[["index.html", "Curso básico de introdução à linguagem R Disciplina BOT89 - PPGBOT INPA Prefácio", " Curso básico de introdução à linguagem R Disciplina BOT89 - PPGBOT INPA Alberto Vicentini e Ricardo de Oliveira Perdiz Última atualização: 2023-09-29 Prefácio Este livro foi criado inicialmente para servir como um material de apoio básico aos estudantes da disciplina Preparação de dados para Análises Estatísticas - Introdução ao R (BOT-89) do Programa de Pós-Graduação em Ciências Biológicas (Botânica) do INPA, ofertada desde o ano de 2011. Inicialmente, a disciplina consistiu de uma modificação da documentação do curso de Introdução à Linguagem R oferecida pelo Programa de Pós-graduação em Ecologia do Instituto de Biociências da Universidade de São Paulo, atualmente ministrada pelo professor Dr. Alexandre Adalardo de Oliveira, e que contem aulas de autoria dos professores Drs. A. A. de Oliveira, João Luís Ferreira Batista, Paulo Inácio K. L. Prado, e Rodrigo Augusto Santinelo Pereira (Batista, I., e Oliveira 2009). Como exemplo, parte dos dados (dados de avistamento de aves no Cerrado e Levantamento em Caixetais) utilizados em nossas aulas são originários desta disciplina da Ecologia da USP. Modificações nessa estrutura foram feitas por Alberto Vicentini ao longo dos últimos 10 anos em disciplinas anuais ofertadas no Programa de pós-graduação em Ciências Biológicas (Botânica) do Instituto Nacional de Pesquisas da Amazônia (INPA). Ricardo Perdiz transpôs as aulas originais formatadas em dokuwiki para o formato Rmarkdown. Também fez correções e acrescentou (poucos) novos conteúdos. Nossa meta é prover uma introdução básica da linguagem de programação R, que é extremamente poderosa para manipulação de dados, análises estatísticas, produção de gráficos e de documentos dinâmicos, e cujo domínio oferece um grande ganho de produtividade a todo cientista e facilita o entendimento de métodos analíticos. Ressaltamos que isto não é um curso de estatística. Referências "],["estrutura-do-livro.html", "Estrutura do livro", " Estrutura do livro Este livro está em constante atualização. Você pode encontrar os arquivos de Rmarkdown que geraram este livro neste endereço: https://github.com/LABOTAM/IntroR/tree/main. Se você tiver alguma contribuição a fazer, seja na forma de correções, críticas, ou o desejo de contribuir ativamente com o projeto, sinta-se à vontade para abrir um problema no repositório do livro: https://github.com/LABOTAM/IntroR/issues. Grato! O livro está dividido em três partes. A primeira parte contem 10 capítulos e aborda os ensinamentos básicos para o usuário aprender a usar a linguagem como uma ferramenta científica. Capítulo 1 aborda os aspectos básicos da linguagem R, o software que utilizamos para usar a linguagem, pacotes com funções, como solicitar ajuda sobre funções, dicas de organização das pastas, e o R como uma calculadora. Capítulo 2 aborda a criação, indexação, e operações matemáticas com vetores no R. Capítulo 3 aborda a criação, indexação, filtragem, importação e exportação de matrizes e data.frames. Capítulo 4 ensina a criar, indexar, e filtrar listas e objetos complexos. Capítulo 5 aborda as funções gráficas do pacote base do R. Capítulo 6 aborda dois conceitos chave em qualquer linguagem de programação: iteração e controles de fluxo. Capítulo 7 abrange o tópico de sumarização de dados, explicando tabelas de contagem, tabelas dinâmicas e junção de tabelas. Capítulo 8 ensina ferramentas básicas para a manipulação de textos, arquivos e pastas. Capítulo 9 ensina de maneira breve funções para amostragens aleatórias e distribuições de valores. Capítulo 10 abrange o uso de funções customizadas para extração de variáveis morfológicas de notas de texto obtidas de espécimes de plantas. A segunda parte contem tutoriais curtos de análise exploratória de dado (AED). A AED deve ser iniciada ainda durante a coleta de dados, pois através dela podemos conhecer nossos dados e acompanhar como estamos coletando esses dados. AED baseia-se largamente em técnicas visuais (gráficos) e pode levar entre 20 a 50% do tempo das análises. Os capítulos abaixo exemplificam algumas ferramentas do R para fazer AED: Capítulo 11 aborda a checagem inicial dos dados. Capítulo 12 aborda a AED em dados univariados. Capítulo 13 aborda a AED em dados biivariados. Capítulo 14 aborda a AED em dados multivariados. Por fim, temos o apêndice contendo materiais suplementares: Apêndice A inclui uma discussão breve sobre o universo de pacotes conhecidos como Tidyverse, comparando-os com o pacote base do R. Apêndice B apresenta um tutorial para baixar e descomprimir arquivos .zip dentro R. Apêndice C apresenta uma lista de vídeos gravados por nós, autores, abordando diversos tópicos deste livro e que podem auxiliar o aprendizado da linguagem. Apêndice D apresenta um código para gerar as caras de Chernoff, que é uma maneira divertida de aprender a lidar com dados multivariados. "],["agradecimentos.html", "Agradecimentos", " Agradecimentos Agradecemos aos Drs. Alexandre Oliveira, João Luís Ferreira Batista, Paulo Inácio K. L. Prado, e Rodrigo Augusto Santinelo Pereira, por permitirem o uso de conteúdo parcial da disciplina introdutória ministrada por eles na USP como base para a criação deste livro. "],["pré-requisitos.html", "Pré-requisitos", " Pré-requisitos Devido ao modo como foi construído, este livro pode ser tanto lido quanto “executado”, uma vez que seus arquivos são o que chamamos de Rmarkdown, uma linguagem que mistura texto com código. Sendo assim, o livro pode ser visualizado em computadores, em celulares modernos, e em tablets. Não é necessário ter um computador próprio, apesar de que possuir um facilita o aprendizado. Entendemos que nosso país ainda carece de muito investimento na melhora da qualidade de vida da população em geral, o que inclui acesso facilitado aos bens de informática. Desta forma, providenciamos duas maneiras de o leitor deste livro fazer bem uso das informações aqui contidas. "],["caso-você-possua-um-computador.html", "Caso você possua um computador", " Caso você possua um computador Instale o R Baixe e instale o R, próprio para o seu sistema operacional. Instale um ambiente de desenvolvimento integrado - IDE Recomendamos que o software RStudio seja instalado no seu computador, pois ele foi criado facilitar a interação do usuário com os múltiplos recursos oferecidos pela linguagem, em especial os inúmeros pacotes desenvolvidos por funcionários desta empresa, entre os quais se inclui o pacote bookdown, utilizado para construir este livro online. Ademais, ambientes de desenvolvimento integrado (do inglês Integrated Development Environment, IDE) como este software têm o objetivo de prover ao usuário mais ferramentas na interação entre o código e o resultado da execução do código, além de facilitar o uso de ferramentas alternativas para construção de texto mesclado com códigos (e.g., LaTeX, Markdown etc), o que permite uma dinamicidade na construção de textos acadêmicos. Existem outras alternativas de software, tais como o Atom e o Visual Studio Code. Fique à vontade para escolher. Baixe os pacotes abaixo Serão necessários o uso de alguns pacotes de R (veja seção 1.3 para entender o que são pacotes de R) para poder fazer uso tanto do repositório localmente quanto fazer uso das próprias aulas. Então, rode o comando abaixo para instalar esses pacotes em seu computador: install.packages(c(&#39;rmarkdown&#39;, &#39;bookdown&#39;, &#39;knitr&#39;, &#39;kableExtra&#39;, &#39;ape&#39;, &#39;labdsv&#39;, &#39;vegan&#39;, &#39;maps&#39;, &#39;readxl&#39;, &#39;readr&#39;, &#39;data.table&#39;, &#39;rgdal&#39;, &#39;taxize&#39;)) Há uma lista de pacotes que serão utilizados apenas no apêndice A. Eles não são necessários para acompanhar o curso, mas caso você chegue a este apêndice, eles serão necessários. Portanto, caso queira já instalá-los, execute o comando abaixo: install.packages(c(&#39;ggplot2&#39;, &#39;dplyr&#39;, &#39;tibble&#39;, &#39;tidyr&#39;, &#39;purrr&#39;, &#39;magrittr&#39;)) Baixe o repositório para seu computador Acesse a página do repositório contendo os código fonte deste livro (Fig. 0.1). Figura 0.1: Imagem inicial do repositório hospedado no GitHub contendo o código fonte deste livro. Busque um botão de cor verde chamado Code (Fig. 0.2). Clique neste botão e aparecerão algumas opções. Clique no botão Download Zip, destacado em vermelho na figura 0.2, e escolha onde você quer salvar o arquivo. Figura 0.2: Destaque do botão “Code” (retângulo “azul” pontilhado circundando o botão, com uma seta “azul” apontando para o mesmo botão) presente na página inicial do repositório hospedado no GitHub contendo o código fonte deste livro. Há um outro retângulo de cor “vermelha” destacando a opção Download Zip. Após baixar, descomprima este arquivo .zip, escolha onde você deseja guardar a pasta, e comece a acessar os arquivos. Os arquivos contendo cada capítulo deste livro são listados abaixo e podem ser encontrados na página inicial do repositório: ## 00-autores.Rmd ## 01-intro.Rmd ## 02-vetores.Rmd ## 03-matrizes_dframes.Rmd ## 04-listas_objComplexos.Rmd ## 05-funcoes_graficas.Rmd ## 06-iteracoes_controleFluxo.Rmd ## 07-sumarizacao_dados.Rmd ## 08-manip_txt_arqs_pasta.Rmd ## 09-amostragens_aleatorias.Rmd ## 10-extracao_dados.Rmd ## 11-aed_checadados.Rmd ## 12-aed_checaunivar.Rmd ## 13-aed_checabivar.Rmd ## 14-aed_checamultivar.Rmd ## 15-tidyverse.Rmd ## 16-baixa_descomprime.Rmd ## 17-videos_html.Rmd ## 17-videos_pdf.Rmd ## 18-chernoff.Rmd ## 19-referencias.Rmd Você pode tanto utilizar os arquivos escritos em formato Rmarkdown e executar os códigos em cada célula de código (code chunks) ou usar os scripts contidos na pasta codigo, que nada mais são do que os capítulos do livro convertidos para um script de R, isto é, em formato .R. Nesses scripts, todos os pedaços de texto, incluindo cabeçalhos e comentários estão precedidos de #'; o que for código aparecerá sem #' precedentes. Clique no nome dos scripts abaixo para levá-lo direto ao arquivo dentro do repositório. 00-autores.R 01-intro.R 02-vetores.R 03-matrizes_dframes.R 04-listas_objComplexos.R 05-funcoes_graficas.R 06-iteracoes_controleFluxo.R 07-sumarizacao_dados.R 08-manip_txt_arqs_pasta.R 09-amostragens_aleatorias.R 10-extracao_dados.R 11-aed_checadados.R 12-aed_checaunivar.R 13-aed_checabivar.R 14-aed_checamultivar.R 15-tidyverse.R 16-baixa_descomprime.R 17-videos_html.R 17-videos_pdf.R 18-chernoff.R 19-referencias.R "],["caso-você-não-possua-um-computador.html", "Caso você não possua um computador", " Caso você não possua um computador O Google oferece um serviço chamado Google Colab que pode ser utilizado em computadores, em celulares modernos com acesso à internet e possuídores de um navegador, e em tablets. Em breve, apresentaremos aqui um endereço contendo todo o conteúdo deste livro já convertido para o formato de um Jupyter Notebook, que é o modelo de arquivo utilizado pelo Google Colab. "],["o-que-é-o-r-e-por-qual-razão-você-deve-se-preocupar-em-programar.html", "O que é o R e por qual razão você deve se preocupar em programar", " O que é o R e por qual razão você deve se preocupar em programar O R em poucas palavras O R é um software livre e gratuito de desenvolvimento coletivo e é muito útil para quem trabalha com ciências e precisa manipular e analisar dados, gerar gráficos e publicações dinâmicas. Tem uma comunidade enorme de usuários e colaboradores e está disponível gratuitamente em diversos repositórios espalhados pelo mundo (https://cran.r-project.org/). O R foi criado para permitir a melhor e mais ampla exploração de dados possível, (…) mas sempre explicando a natureza dos métodos utilizados, num formato aberto (livre) e compreensível (Chambers 2008). O R é uma linguagem de programação; você conversa com o R através de um código. Por ser uma linguagem de programação, no R você pode fazer tudo. A pergunta não é sobre SE o R faz alguma coisa, mas COMO fazer no R alguma coisa. E há várias maneiras de fazer a mesma coisa no R. É fundamental aprender a falar R, pois sabendo falar você pode dizer do seu jeito. Todo estudante de ciências deveria aprender a programar, porque programar lhe ensina a pensar (Steve Jobs). Usar o R é a melhor forma de aprender estatística porque você precisa de fato entender o que está fazendo ao escrever um código. Aprender a programar é como aprender um novo idioma; aprendendo o R fica mais fácil aprender outras linguagens de programação e lhe ajuda a aprender inglês, e o inglês lhe facilita falar R. O R é uma fantástica ferramenta para fazer gráficos; veja exemplos em http://www.r-graph-gallery.com. Com o desenvolvimento da linguagem na última década, você pode gerar aplicativos (Shiny) e relatório dinâmicos usando Rmarkdown, facilitando a formatação gráfica e a reprodutibilidade dos seus artigos, relatórios e projetos científicos. Por que programar? A maioria dos programas de computador não é muito boa. O código no seu laptop, televisor, telefone, carro é geralmente mal documentado, inconsistente e pouco testado. Por que isso importa para a ciência? Porque transformar dados brutos (raw data) em artigos científicos geralmente requer um pouco de programação, o que significa que a maioria dos cientistas escreve software (Nick Barnes, 2010, Publish your computer code, Nature News). É tentador tratar todas as coisas como se fossem pregos, se a única ferramenta que você tem é um martelo (Abraham Maslow, 1996, Lei do Instrumento)! Liberte-se da camisa de força dos softwares de estatística que limitam as análises que você pode fazer e como pode fazer. Um dos objetivos da análise estatística é o de destilar um conjunto longo e complicado de dados em um número pequeno de estatísticas descritivas que façam sentido. Muitos dos pacotes estatísticos de computadores modernos, no entanto, fazem exatamente o oposto disso. Eles produzem automaticamente um número excessivo de resultados que termina sendo aceito sem crítica; pode levar à super interpretação dos dados; e incentiva o mal hábito de jogar dados e cuspir resultados (data trawling). O R, por outro lado, não lhe diz nada a não ser aquilo que você peça explicitamente (Crawley 2007). (…) aprender a programar é importante porque desenvolve habilidades analíticas e de resolução de problemas. É uma atividade criativa, um meio de expressar idéias abstratas. Assim, programar é divertido e é muito mais do que uma habilidade profissional. Ao projetar programas, aprendemos muitas habilidades que são importantes para todas as profissões. Essas habilidades podem ser resumidas como: (1) Leitura crítica, (2) Pensamento analítico, (3) Síntese criativa (Why programming is important). Uma das coisas mais importantes que você (como cientista) pode fazer é dedicar um tempo para aprender uma linguagem de programação de verdade. Aprender a programar é como aprender outro idioma: exige tempo e treinamento, e não há resultados práticos imediatos. Mas se você supera essa primeira subida íngreme da curva de aprendizado, os ganhos como cientista são enormes. Programar não vai apenas livrar você da camisa de força dos pacotes estatísticos, mas também irá aguçar suas habilidades analíticas e ampliar os horizontes de modelagem (..) e estatística (Gotelli e Ellison 2013). Figura 0.3: Curvas de aprendizagem do aluno Sabichão (Geek) e de um aluno que tem medo de código (non-geek). Referências "],["análise-exploratória-de-dados-aed.html", "Análise exploratória de dados (AED)", " Análise exploratória de dados (AED) O que é AED e por que fazer AED? Em estatística, análise exploratória de dados (AED) é uma abordagem para analisar conjuntos de dados visando resumir as suas principais características, particularmente com métodos gráficos e visuais. Um modelo estatístico pode ou não ser usado, mas AED objetiva principalmente ver o que os dados podem nos dizer para além da modelagem ou de testes de hipóteses. A AED foi promovida por John Tukey para incentivar estatísticos a explorar dados e, eventualmente, formular novas hipóteses que possam levar à nova coleta de dados e a experimentos. AED é diferente de análise de dados inicial (AID), que foca mais estreitamente na verificação de suposições necessárias aos modelos de testes de hipóteses, manipulação de valores ausentes e transformações de variáveis, conforme necessário. AED abrange AID (Texto traduzido da WikiPedia). Muitas vezes esquecemos como funciona a ciência e a engenharia. Idéias vêm mais frequentemente de exploração anterior do que de descargas atmosféricas. (…) Encontrar a pergunta é muitas vezes mais importante do que encontrar a resposta. Análise exploratória de dados é uma atitude, uma flexibilidade que depende de visualização gráfica, não é um conjunto de técnicas (Tukey 1980). Em sistemática e taxonomia, uma ciência histórica, a análise exploratória é fundamental, pois é através dela que podemos postular boas hipóteses e usar teste de hipóteses para confirmá-las. Aplicar a análise exploratória de dados para criar hipóteses e então usar os mesmos dados para testar essas hipóteses deve ser evitado. Se alguém tem conhecimento a priori limitado, então uma abordagem válida é criar dois conjuntos de dados: aplicar exploração de dados sobre o primeiro conjunto para criar hipóteses e usar o segundo conjunto de dados para testar essas hipóteses . Tal processo, no entanto, só é prático para conjuntos de dados grandes. Independentemente da situação específica, o uso constante e a estruturação de relatórios transparentes de exploração sistemática de dados melhorariam a qualidade da pesquisa ecológica e de quaisquer recomendações que ela produziria (Zuur, Ieno, e Elphick 2010). A análise exploratória não é dragagem de dados! Assume-se que o pesquisador formulou hipóteses biológicas plausíveis a priori amparadas pela teoria. Objetivos da AED Controlar a qualidade dos dados; Sugerir hipóteses para os padrões observados (novos estudos); Apoiar a escolha dos procedimentos estatísticos de testes de hipótese; Avaliar se os dados atendem às premissas dos procedimentos estatísticos escolhidos. Para ler Dois artigos que você deveria ler: Tukey (1980) e Zuur, Ieno, e Elphick (2010). Referências "],["exercícios-no-notar.html", "Exercícios no notaR", " Exercícios no notaR Ao fim de alguns capítulos, disponibilizaremos em seções chamadas Exercícios uma lista de endereços ligados ao notaR, um sistema criado para auxiliar no aprendizado da linguagem R desenvolvido pelo laboratório de Ecologia Teórica da Universidade de São Paulo (Chalom et al. 2012). Conhecendo o notaR Os exercícios do notaR obrigam o usuário a construir um script de R a partir de um enunciado, acabando por fugir do tradicional copia-cola de tutoriais de R. Muitos exercícios no sistema não obrigam o usuário a estar autenticado (estar logado usando login e senha) no sistema para poder fazê-los. Leia com atenção o enunciado de cada exercício antes de iniciar a construir o seu script. Uma lista de todos os exercícios notaR incluídos neste livro está relacionada abaixo: Resolva o exercício 101.01 Bem vindo ao notaR. Resolva o exercício 101.05 Remoção Com Critério. Resolva o exercício 102.04 Biomassa de Árvores. Resolva o exercício 102.02 Sequências. Resolva o exercício 102.03 Conta de Luz. Resolva o exercício 102.01 Área Basal. Resolva o exercício 102.05 Variância na Unha. Resolva o exercício 101.03 Objetos de Data. Resolva o exercício 103.01 Distância entre cidades. Resolva o exercício 103.02 Criação de um data frame. Resolva o exercício 103.03 Criando uma Matriz. Resolva o exercício 302.02 Histogramas (frequência). Resolva o exercício 302.07 Gráficos com trechos selecionados do data.frame/matriz. Resolva o exercício 302.04 Box-plots. Resolva o exercício 302.05 Gráficos de dispersão. Resolva o exercício 302.06 Matriz de dispersão. Resolva o exercício Editando parâmetros gráficos. Resolva o exercício 104.01 Sintetizando dados. Resolva o exercício 103.05 Classes de Objetos. Resolva o exercício 103.04 Lendo e salvando seus dados. Resolva o exercício 103.7 Cara ou coroa. Resolva o exercício 103.9 Lembrando matrizes e listas. Referências "],["referências-úteis.html", "Referências úteis", " Referências úteis Listamos abaixo algumas referências importantes para complementar o seu estudo: Apostila USP-BIE-5782. Introdução ao R no site do R. Introdução ao uso do programa R de Victor Landeiro e Fabricio Baccaro. Relatórios dinâmicos com R Markdown. "],["sobre-os-autores.html", "Sobre os autores", " Sobre os autores Alberto é doutor em Ecologia, Evolução e Sistemática, com uma ênfase em Evolução pela Universidade do Missouri, Saint Louis (University of Missouri Saint Louis). É cientista do Instituto Nacional de Pesquisas da Amazônia (INPA) desde o ano de 2009. Ministra anualmente disciplinas ligadas ao Programa de pós-graduação em Ciências Biológicas do INPA, como Preparação de dados para análises Estáticas - Introdução ao uso de linguagem R (BOT-89), Delineamento Experimental e Amostral (BOT-90), e Teoria e Prática de Sistemática Filogenética (BOT-99). É colíder do grupo de pesquisa Ecologia e Evolução de Plantas da Amazônia do Conselho Nacional de Desenvolvimento Científico e Tecnológico (CNPq). Ricardo é doutor em Ciências Biológicas (Botânica) pelo INPA. Seus principais interesses são estar e se divertir com a família, trabalhar na floresta coletando e admirando a beleza da Natureza, trabalhar no herbário e laboratório, e também adora se divertir na frente do computador analisando dados e escrevendo. Ama correr e pedalar, e também se divertir e aprender com sua filha. "],["intro.html", "Capítulo 1 Conceitos introdutórios", " Capítulo 1 Conceitos introdutórios Recomendamos que o usuário siga a ordem dos capítulos, especialmente se é a primeira vez que o mesmo está lidando com o R. Use o R via RStudio, é mais simples. Busque executar cada script linha por linha, procurando entender o que cada linha faz e o que cada comando representa. E para cada função nova, busque a ajuda do R, leia o que significam cada um dos argumentos. Altere os argumentos das funções e veja o que acontece. Explore! "],["console-e-scripts.html", "1.1 Console e scripts", " 1.1 Console e scripts As figuras abaixo mostram imagens relativamente similares ao que os usuários do R padrão (Figura 1.1) e RStudio (Figura 1.2) verão ao iniciarem esses programas. Figura 1.1: Imagem de uma sessão do R para Mac OSX com um janela de script aberta além do console. Ao abrirem o R ou o RStudio você terão basicamente duas janelas principais: Console - corresponde à interface que interpreta o código da linguagem. Os códigos digitados aqui serão interpretados pelo R (Texto destacado em verde nas figuras 1.1, 1.2); Script - digitar um código curto no console é simples, mas quando o código é longo, é importante guardá-lo em algum lugar para executá-lo em qualquer momento. Para isso utilizamos scripts, que são arquivos de textos simples que podem ser salvo (extensão .R) numa pasta no seu computador e reutilizado (Texto destacado em amarelo nas figuras 1.1, 1.2). Como um arquivo .R é um texto simples, ele é editável por qualquer editor de texto, como o Bloco de Notas ou Notepad++ para usuários Windows, TextWrangler ou BBEdit para usuários macOS, ou gedit para usuários Linux. O editor de scripts do RStudio é excelente. Figura 1.2: Imagem de uma sessão do RStudio com três painéis abertos. "],["linguagem-objeto-orientada.html", "1.2 Linguagem objeto-orientada", " 1.2 Linguagem objeto-orientada A chave para entender o R é que trata-se de uma linguagem. Uma linguagem para manipular objetos (Venables e Ripley 2002). Um objeto é identificado por uma palavra e veremos ao longo do curso que existem vários tipos de objetos. Este é o conceito mais importante para entender o R. Para começar, digite algumas coisas no Console do seu R ou RStudio. Por exemplo, digite uma fórmula matemática simples no console e o execute: 3 + 5 + 10 ## [1] 18 O console retornou 18, isto é, o R funcionou como uma calculadora. Portanto, números são interpretados como números pelo console. Agora vamos criar um objeto simples chamado objnum e atribuir texto a ele: objum &lt;- &quot;vou colocar um texto dentro do meu primeiro objeto&quot; # enter objum # enter ## [1] &quot;vou colocar um texto dentro do meu primeiro objeto&quot; Vejam que objum é o nome do meu primeiro objeto, e tem como conteúdo o texto que nós atribuímos a ele. Nós poderíamos ter chamado objum de qualquer coisa (sem espaços em branco): banana &lt;- &quot;vou colocar um texto dentro do meu primeiro objeto&quot; banana ## [1] &quot;vou colocar um texto dentro do meu primeiro objeto&quot; # mesma coisa né? Um objeto também pode virar outro objeto. Vejamos abaixo: objdois &lt;- objum objdois # pegou o conteúdo que eu coloquei em objum ## [1] &quot;vou colocar um texto dentro do meu primeiro objeto&quot; Podemos guardar resultados de contas em um objeto: objtres &lt;- 3 + 5 + 10 objtres ## [1] 18 Note que o código exposto acima é geralmente o que está contido em um script, ou seja, a sequência de códigos que você escreveu e que o R interpretará para realizar o que foi dito. Se você copiar e colar o trecho (ou os trechos) de código acima em um arquivo .R, você poderá executá-los tantas vezes quanto quiser. Copie então todos os trechos de código expostos até então para a janela do script e salve-o como script01.R em alguma pasta no seu computador. Note também que dependendo do está incluso no script, o código apresenta cores diferentes para comentários, objetos, e símbolos de atribuição. Isso ajuda a entender os elementos da sintaxe (vocabulário e gramática do R). IDE’s também mostram isso de forma colorida. Note também que, à direita do símbolo #, o texto no código acima fica cinza. Este símbolo indica ao R que todo texto começando no # deve ser interpretado como texto apenas, e não como código. Comentar códigos é uma prática que deve ser tornar rotineira a fim de facilitar o entendimento de cada script. Se você já está escrevendo um script num arquivo e não no console, selecione todo o texto na sua janela de script e digite Control+R (Windows), ou Command+Enter (Mac). O conteúdo do script será executado no Console. Note que o símbolo # não é interpretado pelo console. O R vem com vários scripts prontos, que são funções que executam alguma coisa. Esses scripts são objetos de classe função, pois eles contêm um conjunto de códigos que utilizam parâmetros para executar um conjunto de passos. Parâmetros são objetos que a função utiliza segundo as suas especificações. Por exemplo, vamos listar os objetos criados no passo anterior: # digite ls() # note os parênteses (); a função ls() lista os objetos criados por você: [1] &quot;banana&quot; &quot;objdois&quot; &quot;objtres&quot; &quot;objum&quot; # adicione um parâmetro à função, especificando o que você quer listar, apenas aqueles que contém no nome o padrão &quot;obj&quot; ls(pattern = &quot;obj&quot;) # [1] &quot;objdois&quot; &quot;objtres&quot; &quot;objum&quot; # agora veja o que a função ls é ls # note que não digitei os parênteses e ao digitar isso verei o script que está dentro da função ls que começa assim: function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE) { .... # note que os argumentos da função são os objetos que vão dentro do () da função e são utilizados pela função para executar alguma coisa, neste caso, lista objetos. Experimente mudando parâmetros: ls(sorted = FALSE) # ele mostra os objetos na ordem que foram criados Referências "],["base-pacotes.html", "1.3 R-base e pacotes", " 1.3 R-base e pacotes Como vimos acima, um script do tipo função é um objeto que executa um conjunto de comandos e recebe argumentos que modificam o que o script realiza. Existem dois tipos de funções: Funções do pacote base - funções que vêm junto com o R quando você faz o download do programa, como por exemplo as funções length(), order(), sort(), sum(), mean() etc; Funções de pacotes externos - pacotes (packages em inglês) são funções criadas por colaboradores e organizadas em pacotes que você pode baixar dos repositórios do R. As funções do pacote base vêm junto com o programa e você não precisa se preocupar com isso. Pacotes, por outro lado, devem ser instalados pelo usuário conforme a necessidade. Por exemplo, para trabalhar com dados filogenéticos, você pode necessitar do pacote ape (Paradis et al. 2020), que já tem várias funções preparadas para análises filogenéticas. Se você necessitar deste pacote, por exemplo, basta executar o seguinte comando no console do R: install.packages(&quot;ape&quot;) Para trabalhar com pacotes você primeiro precisa definir um repositório, ou seja, um servidor, de vários disponíveis (espelhos do repositório oficial), de onde o R buscará o pacote desejado. Pode-se também o menu do R ou do RStudio para instalar pacotes e definir um repositório padrão para sua instalação. Como tudo no R, você pode executar comandos que estão no menu usando funções. Por exemplo, ao invés de usarmos o menu do R para definir um repositório e instalar um pacote, vamos executar estas ações por meio de um script: # isso pode não funcionar se estiver no INPA por causa do Proxy. chooseCRANmirror() # seleciona repositório install.packages(&quot;ape&quot;, dependencies = TRUE) # instala o pacote Ape Referências "],["help.html", "1.4 Ajuda no R List Objects", " 1.4 Ajuda no R Toda função no R, oriunda tanto do pacote base ou dos pacotes extras, possui um pedaço de texto chamado de “ajuda” e que possui uma instrução sobre a utilização da mesma. Para obter esta instrução, é muito fácil. Basta executar uma das seguintes opções: # como exemplo vamos usar a função ls() ?ls # ou seja o comando é ?+&quot;nome da função&quot; # ou então help(topic = &quot;ls&quot;) # nome da função como argumento da topic da função help Ao digitar uma das opções acima, o R vai abrir uma janela (no RStudio, vai colocar esse resultado num dos painéis) contendo a página com a explicação da função: ?ls lsR Documentation List Objects Description ls and objects return a vector of character strings giving the names of the objects in the specified environment. When invoked with no argument at the top level prompt, ls shows what data sets and functions a user has defined. When invoked with no argument inside a function, ls returns the names of the function's local variables: this is useful in conjunction with browser. Usage ls(name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE) objects(name, pos= -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE) Arguments name which environment to use in listing the available objects. Defaults to the current environment. Although called name for back compatibility, in fact this argument can specify the environment in any form; see the &lsquo;Details&rsquo; section. pos an alternative argument to name for specifying the environment as a position in the search list. Mostly there for back compatibility. envir an alternative argument to name for specifying the environment. Mostly there for back compatibility. all.names a logical value. If TRUE, all object names are returned. If FALSE, names which begin with a &lsquo;&#8288;.&#8288;&rsquo; are omitted. pattern an optional regular expression. Only names matching pattern are returned. glob2rx can be used to convert wildcard patterns to regular expressions. sorted logical indicating if the resulting character should be sorted alphabetically. Note that this is part of ls() may take most of the time. Details The name argument can specify the environment from which object names are taken in one of several forms: as an integer (the position in the search list); as the character string name of an element in the search list; or as an explicit environment (including using sys.frame to access the currently active function calls). By default, the environment of the call to ls or objects is used. The pos and envir arguments are an alternative way to specify an environment, but are primarily there for back compatibility. Note that the order of strings for sorted = TRUE is locale dependent, see Sys.getlocale. If sorted = FALSE the order is arbitrary, depending if the environment is hashed, the order of insertion of objects, .... References Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth &amp; Brooks/Cole. See Also glob2rx for converting wildcard patterns to regular expressions. ls.str for a long listing based on str. apropos (or find) for finding objects in the whole search path; grep for more details on &lsquo;regular expressions&rsquo;; class, methods, etc., for object-oriented programming. Examples .Ob &lt;- 1 ls(pattern = \"O\") ls(pattern= \"O\", all.names = TRUE) # also shows \".[foo]\" # shows an empty list because inside myfunc no variables are defined myfunc &lt;- function() {ls()} myfunc() # define a local variable inside myfunc myfunc &lt;- function() {y &lt;- 1; ls()} myfunc() # shows \"y\" Todos esses trechos de ajuda (?) do R têm a mesma estrutura e devem ser acessados constantemente para o bom entendimento do funcionamento das funções e seus argumentos. "],["área-de-trabalho-vs.-pasta-de-trabalho.html", "1.5 Área de trabalho vs. Pasta de Trabalho", " 1.5 Área de trabalho vs. Pasta de Trabalho Dois conceitos são fundamentais para trabalhar no R: Área de Trabalho (environment no R) - é o local dentro do R onde você coloca os objetos criados durante a execução de scripts. Você pode visualizar/apagar os objetos no Console: ls() # ls= listar - já vimos que isso lista os objetos criados por você e que estão na área de trabalho ?rm # veja o help desta função rm(objum) # rm = remover - esta função apaga objetos da área de trabalho. No exemplo estamos apagando o objeto chamado objum, criado anteriormente ls() # note agora que o objeto não existe mais rm(list = ls()) # desse jeito apagamos todos os objetos que criamos anteriormente ls() # note que não sobrou nenhum objeto Pasta de Trabalho (working directory- é o local (pasta) no seu computador que o R usa para salvar arquivos. É o caminho padrão para o R encontrar arquivos de dados, scripts, etc. Você pode trabalhar no R sem definir uma Pasta de Trabalho mas é muito mais simples se você usa este recurso. Experimente a seguinte script: getwd() # o nome desta função é abreviação de &quot;get working directory&quot; ou seja &quot;pega a pasta de trabalho definida&quot;. A resposta deste código varia dependendo do seu sistema operacional. Mas a função retorna o caminho completo da pasta de trabalho atual Toda vez que você usar o R, é uma boa prática primeiramente definir a pasta de trabalho, que é o local no seu computador onde você guarda os arquivos relacionados ao seu projeto (dados, scripts, resultados etc.). Você pode definir a pasta de trabalho usando o menu do R (Arquivo ⇒ Diretório de Trabalho no Windows; ou Misc ⇒ Muda Pasta de Trabalho no Mac). Ou você pode usar uma função: ?setwd # veja o help da função que iremos utilizar minhapasta &lt;- &quot;/Users/BetoVicentini/Desktop/bot89-2016&quot; # se estiver usando windows: # minhapasta = &quot;c:/Users/BetoVicentini/Documents/bot89-2016&quot; # minhapasta = &quot;c:\\\\/Users\\\\/BetoVicentini\\\\/Documents\\\\/bot89-2016&quot; #talvez precise usar barras invertidas setwd(dir = minhapasta) # usa a funçao &quot;set working directory&quot; para especificar o diretório (pasta) de trabalho # note que eu defini dir primeiramente como o objeto &quot;minhapasta&quot; usei esse objeto para especificar o objeto &quot;dir&quot;, que é o único argumento da função setwd() Objetos criados no R por você podem ser salvos como um arquivo no seu computador. Você pode usar o menu do R ou RStudio para isso ou pode usar o comando abaixo: ?save # veja o help desta função que vamos utilizar ?save.image # veja o help desta função que vamos utilizar # se sua área de trabalho estiver vazia ls() # se nao retorna nada porque voce apagou acima # crie alguns objetos para o exercício objum &lt;- &quot;um objeto de texto qualquer&quot; objum objdois &lt;- 18 # um objeto com um número qualquer objdois banana &lt;- objum # um objeto idêntico a objum # pronto, agora mostre todos os objetos na sua AREA DE TRABALHO ls() # agora salve esse objetos como um arquivo na sua PASTA DE TRABALHO getwd() # veja onde o arquivo será salvo # se voce quer salvar todos os objetos save.image(file = &quot;meusObjetos.Rdata&quot;) # se voce quer salvar apenas alguns objetos save(objum, banana, file = &quot;meusObjetos2.Rdata&quot;) # veja que na sua pasta de trabalho getwd() voce tem esses arquivos dir() # lista arquivos na sua pasta de trabalho (análoga a função ls() que lista objetos) dir(pattern = &quot;Rdata&quot;) # lista apenas arquivos que tem no nome &quot;.Rdata&quot; # apaga os objetos todos rm(list = ls()) ls() # note que não tem mais objetos na sua área de trabalho, mas pode resgatar objetos que salvou num arquivo Rdata: load(file = &quot;meusObjetos2.Rdata&quot;) # puxa os objetos neste arquivo que está na sua pasta de trabalho ls() # note que ele puxou os objetos objum e banana que salvamos acima neste arquivo # puxe o outro arquivo gerado load(file = &quot;meusObjetos.Rdata&quot;) # puxa os objetos neste arquivo que está na sua pasta de trabalho ls() # veja novamente os objetos na sua área de trabalho: Todos os objetos são listados. Se fizer isso e já houver objetos com o mesmo nome na sua área de trabalho, estes serão sobrepostos. Portanto, Área de Trabalho e Pasta de Trabalho são dois conceitos fundamentais que você precisa entender bem, pois define como e onde você estará salvando informação quando usar o R, tanto em termos de objetos (área de trabalho) como em termos de arquivos (pasta de trabalho). Se você digita q(), que é a função para sair do R, ele geralmente lhe pergunta se você quer salvar os objetos numa área de trabalho padrão (que o R puxa quando você o inicia): q() # sai do R # vai perguntar no Console algo do tipo &quot;Save workspace image to ~/Desktop/bot89-2016/.RData? [y/n/c]:&quot; # note que o arquivo não tem nome apenas extensão &quot;.RData&quot; e é salvo na pasta de trabalho definida com setwd(). Códigos de scripts podem ser executados no console sem necessidade de abrir o script. Por exemplo, suponha que eu tenha salvo o seguinte script num arquivo script01.R: objum &lt;- &quot;meu primeiro objeto de texto&quot; objdois &lt;- 18 # meu primeiro objeto numérico banana &lt;- objum Se este arquivo Scrip01.R está na minha pasta de trabalho, então posso executá-lo com a função source(): dir(pattern = &quot;.R&quot;) # mostra os arquivos .R que estão na pasta de trabalho rm(list = ls()) # apaga todos os objetos, para ver que ele irá criar os objetos indicados no arquivo ls() # nao tem nenhum objeto source(&quot;script01.R&quot;) ls() # os objetos foram criados como especificado no script "],["dicas-de-organização-do-trabalho.html", "1.6 Dicas de organização do trabalho", " 1.6 Dicas de organização do trabalho Você irá manipular diversos arquivos durante a execução de qualquer projeto e precisa organizar os arquivos para não se perder e poder voltar a eles quando necessário. A grande vantagem de realizar a análise de dados, produção de figuras etc, no R é criar um processo replicável, e é preciso ser bem organizado com os arquivos para poder reutilizar o processo com novos dados ou adaptá-lo para novas análises. Isso implica, entre outras coisas, em: Organizar o projeto em uma pasta no seu computador exclusiva para ele; Definir um critério lógico para dar nome aos arquivos do projeto; Organizar arquivos em subpastas segundo a necessidade, por exemplo, uma subpasta para dados, outra para figuras, outras para tabelas geradas e outros resultados. Pode inclusive colocar a criação dessas pastas nos scripts do R, que ele cria na pasta de trabalho (‘getwd()’) que deve ser a pasta do seu projeto através de (funções do R para manipular arquivos e pastas); O código dos seus scripts devem ser escritos de forma genérica para que ele possa ser usado com qualquer outro conjunto de dados que tenha a mesma estrutura que os seus (variáveis). Ou seja, o código deve ser escrito não em função do conteúdo dos seus dados mas apenas na estrutura (i.e. as colunas dos seus dados) deles. Esta é a chave para uma programação eficiente e para a replicabilidade. Isso significa que um resultado obtido a partir dos seus dados não deve ser manualmente atribuído a nenhum objeto no script, apenas atribuído a partir do objeto contendo o resultado. A definição da pasta de trabalho (working directory) é fundamental simplificar a leitura de dados e salvar arquivos sem se preocupar com o caminho completo (full path) para cada arquivo, mas apenas o caminho relativo (relative path). Por exemplo, um arquivo numa pasta de projeto pode ter como caminho completo /home/usuario/Desktop/meuprojeto/dados/morfometricos.xlsx, e o caminho relativo à pasta de trabalho seria apenas dados/morfometricos.xlsx. Da mesma forma para salvar resultados a partir do R. O RStudio (RStudio Team 2020) facilita esse processo para você, permitindo que você crie um projeto. Um projeto basicamente consiste em definir uma pasta de trabalho para que, toda vez que você abrí-lo, a pasta que contem o arquivo de término .Rproj seja a sua pasta de trabalho. Alternativamente, você pode simplesmente indicar a pasta de trabalho toda vez que iniciar uma atividade utilizando as funções setwd() no console ou em um script. Referências "],["dicas-de-erros-comuns-de-sintaxe-da-linguagem-r.html", "1.7 Dicas de erros comuns de sintaxe da linguagem R", " 1.7 Dicas de erros comuns de sintaxe da linguagem R Abrir e esquecer de fechar parênteses, colchetes e aspas é um dos erros mais comuns no início da caminhada rumo ao aprendizado de qualquer linguagem de programação, e é necessário muita paciência1 por parte do usuário para aprender a lidar com a frustração dos sucessivos erros que aparecem no caminho. Mesmo usuários mais experientes têm que aprender a lidar com os erros, que são comuns, o que levou o programador Patrick Burns a publicar um curioso livro sob o título The R Inferno (Burns 2012). Uma ferramenta útil para evitar tais problemas é o uso de uma IDE como o RStudio. Há opções na configuração que autorizam o software a checar seu código e informá-lo de possíveis erros, além de proverem ao usuário uma ferramenta de limpeza do código. Sugerimos fortemente a instalação de uma IDE para usar o R. Segue então uma brevíssima lista de erros super comuns que iniciantes enfrentam no aprendizado da linguagem R. 1.7.1 Parênteses Lembre-se sempre de, ao abrir um parêntese, fechá-lo. Caso contrário, a ação não se completará e seu console ficará travado com um sinal de + aguardando que seu código seja completo. Neste caso, ficar completo significa fechar o parêntese. Tente executar o código abaixo e verifique que o sinal de + ficará estagnado na tela de seu console. Para sair desta tela, clique no console e depois tecle Esc. Você verá que o sinal de &gt; voltará a aparecer no console. erro &lt;- c(1, 2, 3 Agora, execute o comando abaixo. Ele será executado perfeitamente. erro &lt;- c(1, 2, 3) 1.7.2 Vírgulas Ao concatenar elementos ou ao adicionar valores em argumentos de funções, é necessário lembrar sempre de colocar as vírgulas em seus devidos lugares. Caso contrário … mais um erro! Tentem executar o código abaixo: numeros &lt;- c(1, 5, 6 7, 8) ## Error: &lt;text&gt;:1:22: unexpected numeric constant ## 1: numeros &lt;- c(1, 5, 6 7 ## ^ O R dará o aviso Error: unexpected numeric constant in \"numeros &lt;- c(1,5,6 7\" e encerrá a operação. Executem agora o comando abaixo. Será executado sem problemas. numeros &lt;- c(1, 5, 6, 7, 8) 1.7.3 Aspas Textos são especificados dentro de aspas duplas \"\" ou aspas simples ''; tanto faz qual você usa, o importante é sempre que abrir aspas, fechar as aspas com o mesmo tipo. Se seu texto tem acentos, use aspas duplas para delimitá-lo. Aspas simples podem entrar num texto definido por aspas duplas, e vice-versa. Rode isso no seu console: objum &lt;- &quot;um texto com &#39;aspas simples&#39;&quot; objum ## [1] &quot;um texto com &#39;aspas simples&#39;&quot; obj2 &lt;- &#39;um texto com &quot;aspas simples&quot;&#39; obj2 ## [1] &quot;um texto com \\&quot;aspas simples\\&quot;&quot; # note que foi adicionada uma barra invertida, porque \\&quot; na sintaxe do Rsignifica aspas para confundir com as aspas que você usa para indicar textos. 1.7.4 Números Números são sempre especificados sem aspas; se você colocar qualquer número entre aspas, ele será interpretado como texto: obj1 &lt;- 18 obj1 + 1 # essa fórmula irá funcionar porque obj1 é um número ## [1] 19 obj2 &lt;- &quot;18&quot; Isso não vai funcionar porque obj2 não é um número. obj2 + 1 ## Error in obj2 + 1: non-numeric argument to binary operator Caso você insista em rodar, receberá a seguinte mensagem: Error in obj2 + 1 : non-numeric argument to binary operator. 1.7.5 Nomes de objetos Nomes de objetos não podem ter espaço em branco e aspas são ignoradas: obj 1 = &quot;meutexto&quot; #nao vai funcionar ## Error: &lt;text&gt;:1:5: unexpected numeric constant ## 1: obj 1 ## ^ obj1 &lt;- &quot;meutexto&quot; # vai funcionar obj1 ## [1] &quot;meutexto&quot; &quot;obj1&quot; &lt;- &quot;meu texto&quot; # vai criar objeto obj1, ignorando as aspas obj1 ## [1] &quot;meu texto&quot; obj&quot;1&quot; = &quot;meu texto&quot; #nao vai funcionar ## Error: &lt;text&gt;:1:4: unexpected string constant ## 1: obj&quot;1&quot; ## ^ 1.7.6 Atribuição de objetos A atribuição de valores aos objetos pode ser feita com dois operadores equivalentes, = ou &lt;- (este pode ser utilizado no sentido inverso também -&gt;): obj1 &lt;- &quot;meu texto&quot; # ou pode escrever assim obj1 &lt;- &quot;meu texto&quot; # atribui # ou assim &quot;meu texto&quot; -&gt; obj1 # atribui obj1 ## [1] &quot;meu texto&quot; 1.7.7 Busque entender as partes Se você tiver dificuldade no entendimento de um script do R que está tentando rodar, separe os termos das linhas e expressões para entender o que cada parte está fazendo. Também pode alterar os valores dos argumentos para entender o funcionamento de uma função, ou simplesmente digitar a função sem os parênteses para ver o script que ela contem. Por exemplo, vejamos a expressão abaixo, que faz uso de um conjunto de dados chamado iris, que vem disponível com o R. obj1 &lt;- paste(levels(iris$Species), tapply(iris$Sepal.Length, INDEX = iris$Species, mean, na.rm = TRUE), sep = &quot; sépala média = &quot;) obj1 ## [1] &quot;setosa sépala média = 5.006&quot; &quot;versicolor sépala média = 5.936&quot; ## [3] &quot;virginica sépala média = 6.588&quot; À primeira vista, a expressão parece complicada. Vamos separar as partes e entender pedaço por pedaço. Primeiro, vamos tentar entender quem é iris. Vamos checar a estrutura de iris: str(iris) #veja a estrutura ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Agora, vamos obter um sumário estatístico de iris: summary(iris) #veja o que é iris Sepal.Length Sepal.Width Petal.Length Petal.Width Species Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 setosa :50 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 versicolor:50 Median :5.800 Median :3.000 Median :4.350 Median :1.300 virginica :50 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 NA 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 NA Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 NA Note que iris$Species contem 50 valores para três nomes e portanto eles estao sendo intepretados como categoria, isto é, é um fator. Vamos ver os níveis desse fator com a expressão abaixo, contida na função executada anteriormente e que desejamos destrinchar: levels(iris$Species) #categorias especies do objeto factor iris$Species ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; Partamos para o segundo elemento dessa função, que é a expressão colocada abaixo: #o segundo elemento é o resultado de: tapply(iris$Sepal.Length, INDEX = iris$Species, mean, na.rm = TRUE) ## setosa versicolor virginica ## 5.006 5.936 6.588 Essa expressão basicamente calcula a média dos 50 comprimentos de sépala para cada espécie. Por fim, temos o último elemento da expressão que é o argumento sep pertencente à função paste(). Este argumento é responsável por informar à função paste() qual separador nós vamos utilizar para separar os elementos contidos antes do argumento sep, isto é, separar o resultado de levels(iris$Species) da expressão tapply(iris$Sepal.Length,INDEX=iris$Species,mean,na.rm=TRUE). Nesse caso, vamos separar esses dois elementos com o texto sépala média =. paste(, sep =&#39;sépala média = &#39;) Vamos agora ver o resultado da função que executamos lá em cima. #veja o resultado obj1 ## [1] &quot;setosa sépala média = 5.006&quot; &quot;versicolor sépala média = 5.936&quot; ## [3] &quot;virginica sépala média = 6.588&quot; Lembre-se sempre de checar também o código de qualquer função, para poder entender como ela funciona. Vejamos os casos das funções paste() e tapply(), utilizadas neste exercício. Para checar o código de uma função, geralmente basta executa o nome da função sem parênteses. Vejamos: tapply ## function (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE) ## { ## FUN &lt;- if (!is.null(FUN)) ## match.fun(FUN) ## if (inherits(INDEX, &quot;formula&quot;)) { ## if (is.data.frame(X)) ## INDEX &lt;- .formula2varlist(INDEX, X) ## else stop(&quot;&#39;X&#39; must be a data frame when &#39;INDEX&#39; is a formula&quot;) ## } ## if (!is.list(INDEX)) ## INDEX &lt;- list(INDEX) ## INDEX &lt;- lapply(INDEX, as.factor) ## nI &lt;- length(INDEX) ## if (!nI) ## stop(&quot;&#39;INDEX&#39; is of length zero&quot;) ## if (!is.object(X) &amp;&amp; !all(lengths(INDEX) == length(X))) ## stop(&quot;arguments must have same length&quot;) ## namelist &lt;- lapply(INDEX, levels) ## extent &lt;- lengths(namelist, use.names = FALSE) ## cumextent &lt;- cumprod(extent) ## if (cumextent[nI] &gt; .Machine$integer.max) ## stop(&quot;total number of levels &gt;= 2^31&quot;) ## storage.mode(cumextent) &lt;- &quot;integer&quot; ## ngroup &lt;- cumextent[nI] ## group &lt;- as.integer(INDEX[[1L]]) ## if (nI &gt; 1L) ## for (i in 2L:nI) group &lt;- group + cumextent[i - 1L] * ## (as.integer(INDEX[[i]]) - 1L) ## if (is.null(FUN)) ## return(group) ## levels(group) &lt;- as.character(seq_len(ngroup)) ## class(group) &lt;- &quot;factor&quot; ## ans &lt;- split(X, group) ## names(ans) &lt;- NULL ## index &lt;- as.logical(lengths(ans)) ## ans &lt;- lapply(X = ans[index], FUN = FUN, ...) ## ansmat &lt;- array(if (simplify &amp;&amp; all(lengths(ans) == 1L)) { ## ans &lt;- unlist(ans, recursive = FALSE, use.names = FALSE) ## if (!is.null(ans) &amp;&amp; is.na(default) &amp;&amp; is.atomic(ans)) ## vector(typeof(ans)) ## else default ## } ## else vector(&quot;list&quot;, prod(extent)), dim = extent, dimnames = namelist) ## if (length(ans)) { ## ansmat[index] &lt;- ans ## } ## ansmat ## } ## &lt;bytecode: 0x5578c2e586e8&gt; ## &lt;environment: namespace:base&gt; paste ## function (..., sep = &quot; &quot;, collapse = NULL, recycle0 = FALSE) ## .Internal(paste(list(...), sep, collapse, recycle0)) ## &lt;bytecode: 0x5578b0148ff0&gt; ## &lt;environment: namespace:base&gt; Referências "],["o-r-como-calculadora.html", "1.8 O R como calculadora", " 1.8 O R como calculadora O R é uma calculadora potente. Os exemplos abaixo mostram a informação básica necessária ao uso da ferramenta. 1.8.1 Operadores Operadores de atribuição: use = ou &lt;- ou -&gt; para atribuir valor a objeto ou objeto a objeto Operadores matemáticos: + e - são respectivamente adição e subtração; * e / são respectivamente multiplicação e divisão; ^ equivale à exponenciação. Vamos testar os operadores abaixo. Execute cada operação, linha a linha: 3 + 3 ## [1] 6 3 - 3 ## [1] 0 3 * 3 ## [1] 9 3 / 3 ## [1] 1 3^3 ## [1] 27 Objetos numéricos podem ser usados nas fórmulas aritméticas: # atribua um valor a um ou mais objetos obj &lt;- 3 obj2 &lt;- 3 # utilize objetos para fazer contas obj + obj2 ## [1] 6 obj - obj2 ## [1] 0 obj * obj2 ## [1] 9 obj / obj2 ## [1] 1 obj^obj2 ## [1] 27 1.8.2 Precedência de parênteses O uso de parênteses permite construir qualquer lógica de precedência no cálculo. Vamos atribuir valores a três objetos e fazer operações matemáticas com eles para exemplificar: o1 &lt;- 2 o2 &lt;- 4 o3 &lt;- 3 Os resultados não serão os mesmos para: o1 * o2^o3 - 1 # =127 ## [1] 127 o1 * o2^(o3 - 1) # =32 ## [1] 32 (o1 * o2)^o3 - 1 # =511 ## [1] 511 (o1 * o2)^(o3 - 1) # =64 ## [1] 64 1.8.3 Funções e constantes matemáticas Algumas operações aritméticas podem ser realizadas com algumas funções genéricas que apresentamos no exemplo de código abaixo. Veja o ? para qualquer uma das funções abaixo e siga os links relacionados para ver todas as possibilidades dessas funções genéricas de uso genérico. ?srqt ?abs ?log ?log10 ?sin ?cos ?asin ?ceiling ?floor ?round Veremos adiante que essas funções e operações matemáticas são aplicáveis à vetores. # Raiz quadrada sqrt(9) ## [1] 3 # valor absoluto abs(-12) ## [1] 12 abs(-66) ## [1] 66 abs(66) ## [1] 66 # logaritmo log(10) # Logaritmo natural ## [1] 2.302585 log(10, base = 10) # Logbase 10 ## [1] 1 log10(10) # Também log de base 10 ## [1] 1 # funções trigonométricas pi # é uma constante do R, um objeto chamado &quot;pi&quot; que tem o valor de 3.141593 ## [1] 3.141593 sin(0.5 * pi) # Seno ## [1] 1 cos(2 * pi) # Coseno ## [1] 1 asin(1) # Arco seno (radianos) ## [1] 1.570796 asin(1) / pi * 180 ## [1] 90 # arredondamentos # dois valores a &lt;- 3.51 b &lt;- 3.49 # para o valor mais alto (ceiling = teto) ceiling(a) ## [1] 4 ceiling(b) ## [1] 4 # para o valor mais baixo (floor = chão) floor(a) ## [1] 3 floor(b) ## [1] 3 # arredonda dependendo se casa decimal é maior ou menor que 0.5 round(a) ## [1] 4 round(b) ## [1] 3 1.8.4 NA e valores afins Frequentemente no R, quando você realiza uma operação errada ou inválida, o R retorna um dos seguintes códigos (constantes lógicas), que são entendidos pelo R como esses valores e portanto podem ser usados na atribuição à objetos: NA = valores ausentes (faltando); NAN ou not a number = valores inválidos; Inf = infinito; -Inf = infinito negativo. ?NA # veja o help sobre isso # um valor infinito negativo -5 / 0 ## [1] -Inf # um valor infinito positivo 10 / 0 ## [1] Inf Note que o símbolo Inf serve como valor: 500000000000000000 / Inf ## [1] 0 Ele pode ser atribuído a um objeto: # e que posso atribui-lo a um objeto mf &lt;- Inf 500 / mf ## [1] 0 # valor inválido/inexistente sqrt(-1) ## Warning in sqrt(-1): NaNs produced ## [1] NaN # valores ausentes entram na matemática 2 * NA ## [1] NA 2 * NaN ## [1] NaN "],["exercícios.html", "1.9 Exercícios", " 1.9 Exercícios Como prática, vamos iniciar com dois exercícios do notaR para que você se familiarize tanto com a linguagem R quanto com o sistema notaR: Resolva o exercício 101.01 Bem vindo ao notaR. Resolva o exercício 101.05 Remoção Com Critério. "],["vetores.html", "Capítulo 2 Objeto I - Vetores ", " Capítulo 2 Objeto I - Vetores "],["vetores-e-operações-vetoriais-i.html", "2.1 Vetores e operações vetoriais I", " 2.1 Vetores e operações vetoriais I Vetor no R é um tipo de objeto que concatena múltiplos valores de uma mesma classe. É fundamental que você entenda vetores para poder entender objetos mais complexos. 2.1.1 Criação de Vetores A função c() é usada na criação de vetores, pois combina ou concatena elementos. Podemos concatenar números: # um vetor de números v1 &lt;- c(3, 3.14, pi, 37.5, 38) v1 ## [1] 3.000000 3.140000 3.141593 37.500000 38.000000 Podemos concatenar textos: v2 &lt;- c(&quot;a&quot;, &quot;banana&quot;, &quot;maça&quot;, &quot;pera&quot;, &quot;jabuticaba&quot;) v2 ## [1] &quot;a&quot; &quot;banana&quot; &quot;maça&quot; &quot;pera&quot; &quot;jabuticaba&quot; Podemos concatenar valores lógicos (veremos adiante como isso é importante): v3 &lt;- c(TRUE, TRUE, FALSE, FALSE) v3 ## [1] TRUE TRUE FALSE FALSE Podemos abreviar os valores lógicos TRUE como T e FALSE como F: # c(TRUE, TRUE, FALSE, FALSE) e o mesmo que v4 &lt;- c(T, T, F, F) v4 ## [1] TRUE TRUE FALSE FALSE Vejamos se v3 é semelhante a v4: v3 == v4 ## [1] TRUE TRUE TRUE TRUE Note que TRUE e FALSE são valores lógicos e essas palavras são entendidas apenas como tal quando em maiúsculas e sem aspas \" pelo R. Tente executar o comando abaixo para ver o que acontece quando utilizamos esses valores em letras minúsculas: v5 &lt;- c(true, true, false, false) O R retorna a mensagem de erro Error: object 'true' not found pois ele procura pelo primeiro objeto de nosso vetor c(true, true, false, false) na área de trabalho e, ao não encontrar, ele retorna esta mensagem de erro, justamente por não compreender true como um vetor lógico, e sim como um objeto! Se nós atribuímos valores a esses objetos, então a concatenação funciona, podendo assim atribuirmos este vetor ao objeto v5 (ou com qualquer nome que desejamos): true &lt;- TRUE false &lt;- FALSE v5 &lt;- c(true, true, false, false) v5 ## [1] TRUE TRUE FALSE FALSE Há no R valores constantes armazenados em objetos que podem ser chamados a qualquer momento por nós. São objetos que concatenam valores de texto, isto é, são vetores de texto. Vejamos abaixo alguns deles: # essas constantes do R são vetores de texto LETTERS # letras maiusculas ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; letters # letras minusculuas ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; month.abb # meses abreviados ## [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; month.name # meses por extenso ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; 2.1.2 Sequências Numéricas &amp; Repetições É possível criar vetores numéricos usando a função seq() ou o operador :. # usando o : 1:10 # cria uma sequencia de números inteiros 1 a 10 ## [1] 1 2 3 4 5 6 7 8 9 10 20:0 # cria uma sequencia de números inteiros 20 a 0 ## [1] 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0:-20 # cria uma sequencia de números inteiros 0 a -20 ## [1] 0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 ## [20] -19 -20 usando a função seq() temos maior controle das sequências: ?seq # veja o help da função seq(from = 1, to = 10, by = 0.5) # de 1 a 0 a cada 0.5 ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 ## [16] 8.5 9.0 9.5 10.0 seq(from = 10, to = 0, by = -0.5) # de 10 a 0 a cada 0.5 ## [1] 10.0 9.5 9.0 8.5 8.0 7.5 7.0 6.5 6.0 5.5 5.0 4.5 4.0 3.5 3.0 ## [16] 2.5 2.0 1.5 1.0 0.5 0.0 seq(from = 100, to = 0, length.out = 10) # 10 valores igualmente espaçados de 100 a 0 ## [1] 100.00000 88.88889 77.77778 66.66667 55.55556 44.44444 33.33333 ## [8] 22.22222 11.11111 0.00000 É possível criar vetores repetindo valores através da função rep(): # para números rep(5, times = 3) # cria um vetor com três elementos de valor 5 ## [1] 5 5 5 rep(1:5, times = 3) # cria um vetor com três repetições da sequência de 1 a 5 ## [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 rep(1:5, each = 3) # cria um vetor repetindo três vezes cada elemento da sequência de 1 a 5 ## [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 Podemos também utilizar a função rep() com vetores de texto: # para textos obj &lt;- c(&quot;banana&quot;, &quot;maça&quot;, &quot;pera&quot;) rep(obj, times = 3) ## [1] &quot;banana&quot; &quot;maça&quot; &quot;pera&quot; &quot;banana&quot; &quot;maça&quot; &quot;pera&quot; &quot;banana&quot; &quot;maça&quot; ## [9] &quot;pera&quot; rep(obj, each = 3) ## [1] &quot;banana&quot; &quot;banana&quot; &quot;banana&quot; &quot;maça&quot; &quot;maça&quot; &quot;maça&quot; &quot;pera&quot; &quot;pera&quot; ## [9] &quot;pera&quot; "],["operações-matemáticas-com-vetores.html", "2.2 Operações Matemáticas com Vetores", " 2.2 Operações Matemáticas com Vetores Todas as operações aplicadas a um vetor são aplicadas a cada um de seus elementos: meuvetor &lt;- 1:5 # uma sequencia de 1 a 5 mv2 &lt;- meuvetor * 3 # uma sequencia onde cada valor de meuvetor foi multiplicado por 3 mv2 ## [1] 3 6 9 12 15 mv2 &lt;- meuvetor / 3 # uma sequencia onde cada valor de meuvetor foi divido por 3 mv2 ## [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 # se usar uma função matemática com um vetor ela afetará cada elemento indivualmente meuvetor &lt;- c(49, 25, 16, 4, 1) sqrt(meuvetor) # raiz quadrada de cada elemento em meuvetor ## [1] 7 5 4 2 1 Operações com dois ou mais vetores são pareadas. Se os vetores têm o mesmo comprimento (mesmo número de elementos), então a operação é feita par a par, na ordem em que os elementos aparecem no vetor: v1 &lt;- c(1, 5, 10, 15) v2 &lt;- c(2, 4, 8, 16) v1 + v2 # soma dos valores individuais e pareados ## [1] 3 9 18 31 v1 * v2 ## [1] 2 20 80 240 v1^v2 ## [1] 1.000000e+00 6.250000e+02 1.000000e+08 6.568408e+18 REGRA DA RECICLAGEM - se os vetores não têm o mesmo comprimento (mesmo número de elementos), então a operação é feita par a par, mas o vetor mais curto é reciclado, i.e. os elementos do vetor mais curto são repetidos sequencialmente até que a operação seja aplicada a todos os elementos do vetor mais longo (o R dará uma aviso quando a operação envolver vetores de tamanhos diferentes, pois às vezes não é isso que queremos). A mais simples operação para entender a regra da reciclagem é a operação entre um vetor longo e um vetor atômico de um único valor: v1 &lt;- c(1, 5, 10, 15) # vetor com 4 elementos v2 &lt;- 2 # vetor com 1 elemento v1 * v2 # cada elemento de v1 é multiplicado pelo único valor do vetor2 ## [1] 2 10 20 30 Mas a reciclagem se aplica em todos os casos de operação entre vetores de tamanhos diferentes: v1 &lt;- c(1, 5, 10, 15) # vetor com 4 elementos v2 &lt;- c(3, 2) # vetor com 2 elemento v1 * v2 # os valores de v1 são multiplicados par a par pelos valores de v2. Como v2 tem apenas 2 elementos, eles são repetidos 1 vez ## [1] 3 10 30 30 Quanto temos vetores de tamanhos não múltiplos entre si, como por exemplo o objeto ob de tamanho 10 e o objeto oc de tamanho 3, o R executa a operação, porém retorna uma mensagem de alerta em que diz que o vetor de tamanho maior (ob) não é múltiplo do vetor de tamanho menor (oc): ob &lt;- rep(c(0, 1), each = 5) oc &lt;- 1:3 ob * oc ## Warning in ob * oc: longer object length is not a multiple of shorter object ## length ## [1] 0 0 0 0 0 3 1 2 3 1 "],["funções-com-vetores.html", "2.3 Funções com Vetores", " 2.3 Funções com Vetores Algumas funções operam sobre todo o vetor e não sobre cada elemento individualmente. Essas funções são utilizadas constantemente no R e, portanto, devemos conhecer as principais: length() e sort() - comprimento e ordenação de vetores meuvetor &lt;- 10:1 mv2 &lt;- seq(30, 99, by = 3) length(meuvetor) # quantos elementos tem meu vetor1 ## [1] 10 length(mv2) # quantos elementos tem meu vetor2 ## [1] 24 length(meuvetor) / length(mv2) # operação com os resultados ## [1] 0.4166667 mvord &lt;- sort(meuvetor) # ordena os elementos em ordem crescente mvord ## [1] 1 2 3 4 5 6 7 8 9 10 sort(mvord, decreasing = TRUE) # ordena os elementos em ordem decrescentes ## [1] 10 9 8 7 6 5 4 3 2 1 mean(), sd(), min(), sum() etc. - funções de estatística descritiva: ?mean # veja ajuda de uma dessas funções e navegue por outras v1 &lt;- c(2, 4, 6, 8, 4, 3, 5, 7) sum(v1) # soma de todos os valores ## [1] 39 mean(v1) # média aritimética dos valores ## [1] 4.875 median(v1) # valor da mediana ## [1] 4.5 sd(v1) # desvio padrão ## [1] 2.03101 var(v1) # variância ## [1] 4.125 sqrt(var(v1)) # desvio padrão, pois este é a raíz quadrada da variância ## [1] 2.03101 min(v1) # valor mínimo ## [1] 2 max(v1) # valor máximo ## [1] 8 range(v1) # mínimo e máximo ## [1] 2 8 diff(v1) # intervalos (diferenças entre valores consecutivos) entre os valores do vetor ## [1] 2 2 2 -4 -1 2 2 cumsum(v1) # soma cumulativa dos valores ## [1] 2 6 12 20 24 27 32 39 "],["classes.html", "2.4 Classes de vetores e fatores", " 2.4 Classes de vetores e fatores Para entender os conceitos, vamos primeiro conhecer algumas funções úteis no entendimento das classes de objetos do R e algumas funções importantes: class(), is.[class]() e as.[class](). Vetores têm classes diferentes e todos os elementos de um vetor pertencem à mesma classe. As principais classes são: numeric (=double, i.e. inclui casas decimais); integer (numérico mas de valor inteiro); character (texto); logical (verdadeiro ou falso); date (para datas). A função class() nos permite saber a classe de um objeto do R. ?class # veja o help dessa funcao v1 &lt;- 1:20 # um vetor de números inteiros class(v1) ## [1] &quot;integer&quot; v2 &lt;- seq(1, 10, by = 0.5) # um vetor de números class(v2) ## [1] &quot;numeric&quot; v3 &lt;- rep(c(&quot;A&quot;, &quot;B&quot;), each = 10) # um vetor de palavras (character) class(v3) ## [1] &quot;character&quot; v4 &lt;- c(T, T, F, F) # um vetor lógico class(v4) ## [1] &quot;logical&quot; v4 &lt;- c(10, &quot;A&quot;, 20, &quot;B&quot;) # um vetor com misto de números e letras será convertido para texto class(v4) ## [1] &quot;character&quot; v4 ## [1] &quot;10&quot; &quot;A&quot; &quot;20&quot; &quot;B&quot; # veja que em v4 os elementos 10 e 20 viraram palavras, porque vetor só aceita elementos da mesma classe e enquanto um número pode ser convertido em texto, um texto não pode ser convertido em número. Por isso tudo é convertido para texto para a informação seja perdida (i.e. vire NA) As funções genéricas is.[class]() permitem você perguntar se um vetor é de uma determinada classe (is?). Ao utilizar essas funções, o R retornará um vetor lógico, ou seja, verdadeiro ou falso dependendo da classe do objeto: v1 &lt;- 1:20 # um vetor de números inteiros is.integer(v1) # verdadeiro ## [1] TRUE is.numeric(v1) # também verdadeiro porque números inteiros também são números ## [1] TRUE v3 &lt;- rep(c(&quot;A&quot;, &quot;B&quot;), each = 10) # um vetor de palavras is.character(v3) # verdadeiro ## [1] TRUE is.numeric(v3) # falso, porque o vetor contém palavras ## [1] FALSE v4 &lt;- c(10, &quot;A&quot;, 20, &quot;B&quot;) # um vetor com misto de números e letras is.numeric(v4) # falso, porque o vetor contém apenas palavras ## [1] FALSE v4 &lt;- c(T, T, F, F) # um vetor lógico is.logical(v4) # verdadeiro ## [1] TRUE is.numeric(v4) # falso ## [1] FALSE is.character(v4) # falso ## [1] FALSE As funções genéricas as.[class]() (as = ‘como uma?’) permitem você converter um vetor de uma classe para outra. Em alguns casos, isso faz sentido; em outros, o retorno será de valores inexistentes (NA) ou não numéricos (NaN). # conversão total v1 &lt;- 1:20 # um vetor de números inteiros as.character(v1) # converte para texto um vetor numérico ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; ## [16] &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; # conversão parcial v4 &lt;- c(10, &quot;A&quot;, 20, &quot;B&quot;) # um vetor com misto de números e letras as.numeric(v4) # converte cada elemento separadamente (regra da reciclagem é aplicada), o R vai conseguir mudar os textos que são números, mas as letras serão substituídas por NA e um aviso será dado quando isso acontecer ## Warning: NAs introduced by coercion ## [1] 10 NA 20 NA # um vetor de texto não pode virar número v3 &lt;- rep(c(&quot;A&quot;, &quot;B&quot;), each = 10) # um vetor de palavras as.numeric(v3) # todos viram NA pois a conversão é inválida ## Warning: NAs introduced by coercion ## [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA # mas um vetor lógico pode virar número v4 &lt;- c(T, T, F, F) # um vetor lógico as.numeric(v4) # verdadeiro vira 1 e falso vira 0 - isso é muito útil e é por isso que operações matemáticas funcionam com vetores lógicos: ## [1] 1 1 0 0 sum(v4) ## [1] 2 mean(v4) ## [1] 0.5 min(v4) ## [1] 0 O factor (=fator) na linguagem do R é um tipo especial de vetor com elementos de texto (classe character), em que os valores de texto são categorias. Isso tem algumas vantagens operacionais e sempre que o R precisa de um vetor de texto no formato de factor, ele converte automaticamente (se possível). No entanto, é muito importante que você entenda a diferença entre um vetor de classe character e um vetor de classe factor. Isso vai aparecer o tempo todo enquanto você usa o R e algumas vezes você precisará converter de um para outro. Funções importantes a serem memorizadas são: levels() - para ver (ou modificar) os níveis ou categorias de um fator; as.factor() e as.vector() - para converter entre fator e vetor. # um exemplo de um vetor de palavras mvv &lt;- c(&quot;abacate&quot;, &quot;banama&quot;, &quot;mamão&quot;, &quot;uva&quot;) # repetindo cada fruta 3 vezes mvv &lt;- rep(mvv, each = 3) # veja conteúdo mvv ## [1] &quot;abacate&quot; &quot;abacate&quot; &quot;abacate&quot; &quot;banama&quot; &quot;banama&quot; &quot;banama&quot; &quot;mamão&quot; ## [8] &quot;mamão&quot; &quot;mamão&quot; &quot;uva&quot; &quot;uva&quot; &quot;uva&quot; # qual a classe desse vetor? class(mvv) ## [1] &quot;character&quot; # vamos converter esse vetor de character para um fator mvv2 &lt;- as.factor(mvv) class(mvv2) # de fato mudou para factor ## [1] &quot;factor&quot; mvv2 # compare a estrutura deste objeto com mvv (apareceu a a palavra Levels:, que mostra as categorias existentes no fator) ## [1] abacate abacate abacate banama banama banama mamão mamão mamão ## [10] uva uva uva ## Levels: abacate banama mamão uva # por ser um fator você pode levels(mvv2) # você pode ver os níveis do fator, ou seja as categorias que ele contém) ## [1] &quot;abacate&quot; &quot;banama&quot; &quot;mamão&quot; &quot;uva&quot; levels(mvv2) &lt;- c(&quot;abacate&quot;, &quot;banana&quot;, &quot;mamão&quot;, &quot;uva&quot;) # você pode mudar/corrigir os níveis, aqui corrigindo banama por banana mvv2 # veja como mudaram as categorias e os valores ## [1] abacate abacate abacate banana banana banana mamão mamão mamão ## [10] uva uva uva ## Levels: abacate banana mamão uva as.numeric(mvv2) # você pode converter o fator em numérico, de forma que cada categoria vire um número (muito útil isso) ## [1] 1 1 1 2 2 2 3 3 3 4 4 4 as.numeric(mvv) # nao pode fazer a mesma coisa com um vetor de palavras ## Warning: NAs introduced by coercion ## [1] NA NA NA NA NA NA NA NA NA NA NA NA A função as.Date() converte um vetor de trecho em um objeto de classe date. Datas são uma classe especial, que permite operações artiméticas para calcular distâncias temporais. # muitas vezes queremos calcular tempo entre duas observações, como por exemplo, entre duas medições consecutivas num estudo sobre crescimento de plantas # Qual a diferença em dias entre duas datas? data1 &lt;- &quot;31/03/1964&quot; data2 &lt;- &quot;17/04/2016&quot; # eu nao posso simplesmente subtrair esses valores data2 - data1 O R retorna uma mensagem de erro (Error in data2 - data1 : non-numeric argument to binary operator) porque esses objetos são de classe texto, e operações matemáticas só são permitidas com números ou datas. Vejam que a classe dos objetos criados acima são do tipo “texto” (character): class(data1) ## [1] &quot;character&quot; class(data2) ## [1] &quot;character&quot; Porém, se convertermos esses objetos para a classe Date, então poderemos fazer operações matemáticas com eles: # mas o R tem um classe para datas # entao fazemos a conversao ?as.Date # veja o help dessa função data1 &lt;- as.Date(data1, format = &quot;%d/%m/%Y&quot;) data2 &lt;- as.Date(data2, format = &quot;%d/%m/%Y&quot;) # agora a classe mudou class(data1) ## [1] &quot;Date&quot; class(data2) ## [1] &quot;Date&quot; # posso fazer matemática com data data2 - data1 ## Time difference of 19010 days # note o argumento format, ele importa para o R possa entender o formato de sua data data3 &lt;- &quot;2016-04-21&quot; # formato americano as.Date(data3, format = &quot;%d/%m/%Y&quot;) # se eu usasse isso com o mesmo formato acima, o resultado é NA, porque está mal especificado ## [1] NA # mas mudando a simbologia do argumento format as.Date(data3, format = &quot;%Y-%m-%d&quot;) ## [1] &quot;2016-04-21&quot; # ele reconhece "],["indexacao.html", "2.5 Indexação", " 2.5 Indexação Já vimos que vetores são conjuntos de valores da mesma classe (seção 2). Esses valores tem uma posição dentro do vetor, ou seja, possuem um índice. Já vimos também que podemos alterar a ordem dos valores, utilizando a função sort(), ou seja, alterar a posição dos elementos no vetor. O índice identifica os elementos do vetor individualmente: pode ser um número equivalente à posição do elemento no vetor, ou pode ser um nome, quando os elementos do vetor tiverem um nome. Entender indexação é fundamental para escrever bons códigos no R, pois isso se aplica também às matrizes e às outras classes de objetos do R. Aqui vamos ver indexação de vetores, que é dada pelo operador []. 2.5.1 Usando índices numéricos # um vetor simples v1 &lt;- 1:10 v1[1] # valor na posição/índice 1 ## [1] 1 v1[8] # valor na posição/índice 8 ## [1] 8 # em outra ordem v1 &lt;- 1:10 v1 &lt;- sort(v1, decreasing = TRUE) # ordena decrescente v1[1] # valor na posição/índice 1 ## [1] 10 v1[8] # valor na posição/índice 8 ## [1] 3 2.5.2 Usando índices de nomes Índices de nomes são elementos essenciais na manipulação de dados reais, pois nomes de linhas (seus registros) e nomes de colunas (suas variáveis) são nomes dos elementos que compõem a sua matriz. Índice de nomes preservam o identificador dos seus objetos (registros). Podemos atribuir nomes aos elementos do vetor usando a função names(). Uma outra função útil se chama paste(), muito utilizada na manipulação de textos. ?paste # veja o help da função paste ?names # veja o help da função names # um vetor simples v1 &lt;- 1:10 # criando um vetor para usar como nomes v2 &lt;- paste(&quot;nome&quot;, v1, sep = &quot;&quot;) # significa = use a regra da reciclagem e cole (paste) a palavra &#39;nome&#39; com cada valor do vetor v1, sem separador v2 # é portanto um conjunto de textos ## [1] &quot;nome1&quot; &quot;nome2&quot; &quot;nome3&quot; &quot;nome4&quot; &quot;nome5&quot; &quot;nome6&quot; &quot;nome7&quot; &quot;nome8&quot; ## [9] &quot;nome9&quot; &quot;nome10&quot; # note que é muito mais rápido fazer isso do que escrever nome1, nome2 ... nome10, certo? # agora vamos atribuir v2 como nome dos elementos de v1 # para isso é importante que v1 e v2 tenham o mesmo comprimento length(v1) ## [1] 10 length(v2) ## [1] 10 names(v1) # deve ser nulo, pois os elementos não tem nome ## NULL names(v1) &lt;- v2 # atribuimos os nomes v2 # pronto agora os elementos tem nome ## [1] &quot;nome1&quot; &quot;nome2&quot; &quot;nome3&quot; &quot;nome4&quot; &quot;nome5&quot; &quot;nome6&quot; &quot;nome7&quot; &quot;nome8&quot; ## [9] &quot;nome9&quot; &quot;nome10&quot; # posso usar o nome como índice para pegar elementos v1[&quot;nome8&quot;] # valor do elemento que tem nome = nome8 ## nome8 ## 8 v1[8] # isso deve ser equivalente, pois criamos os nomes assim ## nome8 ## 8 # mas note a diferença quando reordenamos o vetor e mudamos os valores de posição v3 &lt;- sort(v1, decreasing = T) v3[8] # o índice numérico pega outro valor ## nome3 ## 3 v3[&quot;nome8&quot;] # o indice de nome pega o mesmo valor (PRESERVA) ## nome8 ## 8 "],["vetor-operador-logico.html", "2.6 Vetores e operadores lógicos", " 2.6 Vetores e operadores lógicos Para manipular dados no R, entender vetores lógicos e operadores lógicos é fundamental. Vetores lógicos são vetores de verdadeiros (TRUE ou apenas T, sempre em letras maiúsculas) ou falsos (FALSE ou F). Eles podem ser convertidos em vetores numéricos e, portanto, operados matematicamente (T = 1, e F = 0). 2.6.1 Fazendo perguntas à vetores Vetores lógicos podem ser respostas às perguntas feitas por operadores lógicos: &gt; - é maior que? &lt; - é menor que? &gt;= - é maior igual a? &lt;= - é menor igual a? == - é igual a? != - é diferente de? %in% - compara conteúdo de vetores Há ainda a função duplicated() que busca valores repetidos em um vetor. O resultado desta função é um vetor contendo TRUE ou FALSE. Valores que possuam o valor TRUE são duplicados. Para checar os duplicados, devemos filtrar o resultado desta ação (veja na seção 2.6.2). # um vetor numerico v1 &lt;- 1:20 # quais valores de v1 são maiores ou iguais a 10 p1 &lt;- v1 &gt;= 10 # vai retornar um vetor lógico p1 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE ## [13] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE # soma dos verdadeiros responde &quot;quantos valores de v1 são maiores ou iguais a 10, pois apenas esses valores são verdadeiros ou seja são 1) sum(p1) ## [1] 11 # experimente os demais operadores # a regra da reciclagem também se aplica neste conceito v1 &lt;- 1:20 v2 &lt;- 1:20 p2 &lt;- v1 == v2 # compara cada par dos vetores que são idênticos p2 # é o vetor lógico resultando, todos os valores são verdadeiros ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [16] TRUE TRUE TRUE TRUE TRUE # portanto, as seguintes expressões também são verdadeiras sum(v1 == v2) == length(v1) ## [1] TRUE # ou então sum(v1 == v2) == length(v2) ## [1] TRUE # valores duplicados vv &lt;- c(2, 2, 2, 3, 4, 5) vv # apenas o dois é duplicado ## [1] 2 2 2 3 4 5 duplicated(vv) # note que esta função retorna TRUE apenas para dois dos três valores 2 (o primeiro não é duplicado) ## [1] FALSE TRUE TRUE FALSE FALSE FALSE # comparando vetores v1 &lt;- c(1, 2, 3, 4) v2 &lt;- c(4, 4, 5, 6) v1 %in% v2 # quantos elementos de v1 existem em v2 ## [1] FALSE FALSE FALSE TRUE sum(v1 %in% v2) # apenas 1 ## [1] 1 v2 %in% v1 # quais elementos de v2 estão em v1 ## [1] TRUE TRUE FALSE FALSE sum(v2 %in% v1) # os dois quatro ## [1] 2 notas.dos.alunos &lt;- c(6.0, 5.1, 6.8, 2.8, 6.1, 9.0, 4.3, 10.4, 6.0, 7.9, 8.9, 6.8, 9.8, 4.6, 11.3, 8.0, 6.7, 4.5) ## Quantos aprovados? sum(notas.dos.alunos &gt;= 5) ## [1] 14 # Qual a proporção de aprovados? prop &lt;- sum(notas.dos.alunos &gt;= 5) / length(notas.dos.alunos) prop ## [1] 0.7777778 # ou em texto paste(round(prop * 100), &quot;%&quot;, sep = &quot;&quot;) ## [1] &quot;78%&quot; Podemos usar também vetores de texto e fatores em conjunto com operadores lógicos. # E VETORES DE TEXTO? v1 &lt;- rep(c(&quot;banana&quot;, &quot;pera&quot;, &quot;laranja&quot;, &quot;limão&quot;), 10) v1 # um vetor de palavras ## [1] &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; ## [8] &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; ## [15] &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; ## [22] &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; ## [29] &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; ## [36] &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; # quantos elementos são iguais a banana v1 == &quot;banana&quot; ## [1] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE ## [13] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE ## [25] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE ## [37] TRUE FALSE FALSE FALSE sum(v1 == &quot;banana&quot;) ## [1] 10 # também poderia perguntar: quantos elementos de v1 contém banana sum(v1 %in% &quot;banana&quot;) ## [1] 10 v1 %in% &quot;banana&quot; ## [1] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE ## [13] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE ## [25] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE ## [37] TRUE FALSE FALSE FALSE # no caso acima == e %in% funcionam igual, mas o operador %in% é util quando quisermos comparar dois vetores de character v2 &lt;- c(&quot;banana&quot;, &quot;pera&quot;, &quot;abacate&quot;) v1 %in% v2 # quais elementos de v1 correspondem a elementos de v2 ## [1] TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE ## [13] TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE ## [25] TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE ## [37] TRUE TRUE FALSE FALSE sum(v1 %in% v2) # quantos são? 10 laranjas e 10 peras ## [1] 20 v2 %in% v1 # quais elementos de v2 estão em v1 ## [1] TRUE TRUE FALSE sum(v2 %in% v1) # quantos são (apenas laranja e pera, abacate não está) ## [1] 2 Operadores auxiliares permitem combinar perguntas: &amp; equivale a E - essa condição E essa outra; | equivale a OU - essa condição OU essa outra; ! - inverte os valores da pergunta # um vetor v1 &lt;- 1:20 v1 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 p1 &lt;- v1 &gt; 5 &amp; v1 &lt;= 15 # quais elementos de v1 são maiores que 5 E menores ou iguais a 15 sum(p1) # quantos são? ## [1] 10 p1 &lt;- v1 &gt; 5 | v1 &lt;= 15 # quais elementos de v1 são maiores que 5 OU menores ou iguais a 15 sum(p1) # quantos são ## [1] 20 # !exclamação NEGA ou INVERTE verdadeiros e falsos v1 &lt;- 1:20 sum(v1 == 5) # quantos v1 são iguais a 5? ## [1] 1 sum(!v1 == 5) # quantos v1 são diferentes de 5? ## [1] 19 sum(v1 &gt; 5) # quantos v1 são maiores que 5? ## [1] 15 sum(!v1 &gt; 5) # quantos v1 são menores que 5? ## [1] 5 # texto v1 &lt;- rep(c(&quot;banana&quot;, &quot;pera&quot;, &quot;laranja&quot;, &quot;limão&quot;), 10) v1 # um vetor de palavras ## [1] &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; ## [8] &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; ## [15] &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; ## [22] &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; ## [29] &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; ## [36] &quot;limão&quot; &quot;banana&quot; &quot;pera&quot; &quot;laranja&quot; &quot;limão&quot; vl &lt;- v1 == &quot;banana&quot; &amp; v1 == &quot;pera&quot; # quantos elementos de v1 sao banana E sao pera vl ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE FALSE sum(vl) # nenhum valor satisfaz as duas condicoes ## [1] 0 vl &lt;- v1 == &quot;banana&quot; | v1 == &quot;pera&quot; # quantos elementos de v1 sao banana ou sao pera vl ## [1] TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE ## [13] TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE ## [25] TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE TRUE TRUE FALSE FALSE ## [37] TRUE TRUE FALSE FALSE sum(vl) # tem 20 valores que satisfazem 1 das condições ## [1] 20 # isso é o mesmo que pergunta desse outro jeito: sum(v1 %in% c(&quot;banana&quot;, &quot;pera&quot;)) ## [1] 20 2.6.2 Filtrando dados com vetores lógicos Vetores lógicos podem ser usados como índices (Seção 2.5) para filtrar elementos de um vetor. É através deste conceito que podemos filtrar dados de matrizes e criar subconjunto de dados. # um vetor com sequencia de 1 a 100 v1 &lt;- 1:100 p1 &lt;- v1 &gt; 15 # Pergunta 1 quantos são maiores que 15 v1[p1] # valores que satisfazem a pergunta 1 ## [1] 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ## [20] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 ## [39] 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [58] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 ## [77] 92 93 94 95 96 97 98 99 100 p2 &lt;- v1 &lt;= 20 # Pergunta 2 quantos são menores ou iguais a 20 v1[p2] # valores que satisfazem a pergunta 2 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # quantos satisfazem as duas perguntas p3 &lt;- p1 &amp; p2 v1[p2] # valores que satisfazem as duas perguntas ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 A função grep() permite a busca de uma palavra (ou pedaço dela) em um vetor de palavras. Mais de uma palavra pode ser buscada ao mesmo tempo. ?grep # veja o help dessa função e seus argumentos # um vetor de palavras v1 &lt;- rep(c(&quot;banana&quot;, &quot;pera&quot;, &quot;laranja&quot;, &quot;limão&quot;), 5) grep(&quot;an&quot;, v1) # quais elementos tem a palavra &#39;an&#39; no nome? ## [1] 1 3 5 7 9 11 13 15 17 19 # note que é case.sensitive (depende se é maiusculo ou minúsculo) grep(&quot;An&quot;, v1) # não encontra nada ## integer(0) grep(&quot;An&quot;, v1, ignore.case = T) # mas eu posso dizer para ele ignorar se é minusculo ou maiúsculo e ele encontra novamente ## [1] 1 3 5 7 9 11 13 15 17 19 # quem sao esses elementos vl &lt;- grep(&quot;An&quot;, v1, ignore.case = T) # pega os índices desses elementos v1[vl] ## [1] &quot;banana&quot; &quot;laranja&quot; &quot;banana&quot; &quot;laranja&quot; &quot;banana&quot; &quot;laranja&quot; &quot;banana&quot; ## [8] &quot;laranja&quot; &quot;banana&quot; &quot;laranja&quot; unique(v1[vl]) # valores únicos desse vetor ## [1] &quot;banana&quot; &quot;laranja&quot; 2.6.3 Perguntando por valores ausentes - NA Vimos anteriormente como o R codifica valores ausentes (seção 1.8.4): converte em uma classe lógica definida pela palavra NA em maiúsculo. E nossos dados frequentemente têm valores ausentes. Isso vai gerar avisos indesejáveis e impedir certas análises. Então, muitas vezes precisamos tirar registros com valores ausentes ou colunas com muitos valores ausentes. Perguntar por valores ausentes no R é feito por uma função especial chamada is.na(). A resposta da função é um vetor lógico indicando quem é e quem não é NA. Há uma outra função chamada na.omit() que elimina valores NA de um vetor. ?is.na # veja o help # um vetor com NAs v1 &lt;- c(NA, NA, 1, 2, 3, 4, 5, 6) is.na(v1) # quem é NA? ## [1] TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE v2 &lt;- v1[!is.na(v1)] # criar um vetor novo com quem não é NA (note o !) v2 ## [1] 1 2 3 4 5 6 # isso também pode ser feito com na.omit() ?na.omit # veja o help dessa função v3 &lt;- na.omit(v1) v3 # a diferença é que criou um objeto de classe na.omit ## [1] 1 2 3 4 5 6 ## attr(,&quot;na.action&quot;) ## [1] 1 2 ## attr(,&quot;class&quot;) ## [1] &quot;omit&quot; v3 &lt;- as.vector(v3) # isso elimina a diferença, convertendo em vetor v3 # agora é idêntico a v2 ## [1] 1 2 3 4 5 6 # agora suponha o seguinte vetor v4 &lt;- c(&quot;NA&quot;, &quot;NA&quot;, &quot;pera&quot;, &quot;banana&quot;, &quot;mamão&quot;) is.na(v4) # ops todos são falsos ## [1] FALSE FALSE FALSE FALSE FALSE # isso porque &quot;NA&quot; é texto e não um objeto de classe lógica class(NA) ## [1] &quot;logical&quot; class(&quot;NA&quot;) ## [1] &quot;character&quot; # mas eu poderia corrigir isso v4[v4 == &quot;NA&quot;] # vejo ## [1] &quot;NA&quot; &quot;NA&quot; v4[v4 == &quot;NA&quot;] &lt;- NA # corrijo v4 ## [1] NA NA &quot;pera&quot; &quot;banana&quot; &quot;mamão&quot; is.na(v4) # agora dois são NAs ## [1] TRUE TRUE FALSE FALSE FALSE # note que agora todos são diferentes de &quot;NA&quot; como texto v4[!v4 == &quot;NA&quot;] ## [1] NA NA &quot;pera&quot; &quot;banana&quot; &quot;mamão&quot; # mas isso de mostra quem não é corretamente v5 &lt;- v4[!is.na(v4)] v5 ## [1] &quot;pera&quot; &quot;banana&quot; &quot;mamão&quot; "],["sabermais-vetores.html", "2.7 Para saber mais:", " 2.7 Para saber mais: Veja nossas vídeoaulas com parte do conteúdo deste capítulo: Criação de vetores. Sequências numéricas e repetições. Indexação. Vetores e Operadores Lógicos. "],["exercícios-1.html", "2.8 Exercícios", " 2.8 Exercícios Resolva o exercício 102.04 Biomassa de Árvores. Resolva o exercício 102.02 Sequências. Resolva o exercício 102.03 Conta de Luz. Resolva o exercício 102.01 Área Basal. Resolva o exercício 102.05 Variância na Unha. Resolva o exercício 101.03 Objetos de Data. "],["mat-dframe.html", "Capítulo 3 Objeto II - Matrizes e data.frames ", " Capítulo 3 Objeto II - Matrizes e data.frames "],["matriz-vs.-data.html", "3.1 Matriz vs. data.frame", " 3.1 Matriz vs. data.frame Objetos de classe matrix ou data.frame são objetos bidimensionais (tem linhas e colunas), e constituem a forma como nossos dados estão organizados. Precisamos entender a diferença entre essas classes e suas propriedades. Objetos de classe matrix contêm linhas e colunas, mas os valores de toda a matriz são da mesma classe (numeric, character, ou logical, por exemplo). Operações matemáticas com matrizes utilizam matrizes numéricas, portanto, de uma única classe, matrix. Objetos de classe data.frame tambêm contém linhas e colunas, mas podem misturar colunas de classes diferentes (numeric e character, factor, e logical, por exemplo). Quando importamos dados ao R, geralmente atribuímos os dados a um objeto de classe data.frame. Podemos converter um objeto de classe matrix para data.frame e vice-versa, usando as funções as.data.frame() ou as.matrix(). Porém, quando convertemos os dados para um objeto de classe matrix, todos os dados passam a ser da mesma classe, geralmente havendo perda de dados. 3.1.1 Criando matrizes Poder criar uma matriz no R é muito útil para várias finalidades como, por exemplo, simular dados em testes de permutação ou preencher uma tabela com resultados de uma análise. Matrizes podem ser criadas de diferentes formas (e.g., pode juntar matrizes pelas linhas e colunas, ou pode extrair sub-matrizes de uma matriz). Para criar matrizes, a função básica se chama matrix(): # veja o help da função ?matrix # a função se usa assim: matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) # onde: # data = NA #um vetor de comprimento igual ao número de células desejadas que é nrow*ncol. # byrow = FALSE #A forma de preenchimento da planilha pelos dados em data. Se byrow=TRUE, então ele preenche pelas linhas, senão pelas # colunas # nrow = número de linhas # ncol = número de colunas # dimnames = um objeto do tipo lista (que ainda não vimos), com dois vetores, um com os nomes das linhas, outro com os nomes das colunas. # exemplo 1 - matriz de 3x3 com zeros mm &lt;- matrix(data = 0, nrow = 3, ncol = 3, byrow = F, dimnames = NULL) mm 0 0 0 0 0 0 0 0 0 # note que data tem comprimento 1, apenas 1 valor. Pela regra da reciclagem ele é repetido até completar o total necessário dado por nrow*ncol # exemplo2 - matriz de 3x3 com valores dd &lt;- 1:9 # nove valores mm &lt;- matrix(data = dd, nrow = 3, ncol = 3, byrow = F, dimnames = NULL) mm 1 4 7 2 5 8 3 6 9 # mudando byrow para TRUE preenchemos pelas linhas mm2 &lt;- matrix(data = dd, nrow = 3, ncol = 3, byrow = TRUE, dimnames = NULL) mm2 1 2 3 4 5 6 7 8 9 # exemplo3 - matriz de 3x3 com valores e nomes de colunas e linhas # define dimensao nrow &lt;- 3 ncol &lt;- 3 # define data dd &lt;- 1:9 # nove valores # define nome de colunas cln &lt;- paste(&quot;coluna&quot;, 1:ncol, sep = &quot;&quot;) # define nome de linhas lln &lt;- paste(&quot;linha&quot;, 1:nrow, sep = &quot;&quot;) mm &lt;- matrix(data = dd, nrow = nrow, ncol = ncol, byrow = F, dimnames = list(lln, cln)) mm coluna1 coluna2 coluna3 linha1 1 4 7 linha2 2 5 8 linha3 3 6 9 Para unir ou criar matrizes (e data.frames) temos duas funções úteis: rbind(), que vem do inglês row bind, ou seja, cole linhas; cbind(), que vem do inglês column bind, ou seja, cole colunas. # vetores numéricos de mesmo comprimento v1 &lt;- 1:10 v2 &lt;- 10:1 v3 &lt;- 11:20 # essas duas condições devem ser verdadeiras length(v1) == length(v2) ## [1] TRUE length(v1) == length(v3) ## [1] TRUE # entao posso criar uma matriz juntando esses vetores em linhas ou colunas mml &lt;- rbind(v1, v2, v3) class(mml) # criou um matrix ## [1] &quot;matrix&quot; &quot;array&quot; mml v1 1 2 3 4 5 6 7 8 9 10 v2 10 9 8 7 6 5 4 3 2 1 v3 11 12 13 14 15 16 17 18 19 20 # ou mmc &lt;- cbind(v1, v2, v3) class(mmc) ## [1] &quot;matrix&quot; &quot;array&quot; # ou se eu já tenho uma matriz, posso usar essas funções para adicionar novas linhas ou colunas novovetor &lt;- 31:40 # por linha ncol(mml) == length(novovetor) # neste caso o número de colunas da matrix precisa ser igual ao número de elementos no vetor ## [1] TRUE mml &lt;- rbind(mml, novovetor) # junto a matrix existente com o novo vetor, adicionando uma nova linha mml v1 1 2 3 4 5 6 7 8 9 10 v2 10 9 8 7 6 5 4 3 2 1 v3 11 12 13 14 15 16 17 18 19 20 novovetor 31 32 33 34 35 36 37 38 39 40 # note que a nova linha recebeu como nome o nome do objeto que continha o dado # por coluna nrow(mmc) == length(novovetor) # neste caso o número de linhas da matrix precisa ser igual ao número de elementos no vetor ## [1] TRUE mmc &lt;- cbind(mmc, novovetor) # junto a matrix existente com o novo vetor, adicionando uma nova coluna mmc v1 v2 v3 novovetor 1 10 11 31 2 9 12 32 3 8 13 33 4 7 14 34 5 6 15 35 6 5 16 36 7 4 17 37 8 3 18 38 9 2 19 39 10 1 20 40 # note que a nova coluna recebeu como nome o nome do objeto que continha o dado 3.1.2 Criando data.frames Objetos de classe data.frame são tabelas de dados, apresentam duas dimensões, e permitem misturar dados de classes diferentes, numéricos, texto (character ou factor) e lógicos. Quando importamos nossos dados ao R, em geral criamos objetos de classe data.frame. Para criar ou converter dados em data.frames, podemos usar as funções data.frame() e as.data.frame(). ?data.frame # veja o help das funções acima # a funcao que cria o objeto é data.frame(..., row.names = NULL, check.rows = FALSE, check.names = TRUE, stringsAsFactors = default.stringsAsFactors()) # de todos os argumentos os mais importantes são: # ... #que pode ser vetores ou tag = vetor (os dados da tabela) # stringsAsFactors #que especifica se queremos os textos como vetores ou fatores # exemplo 1 - # Primeiro criamos alguns dados # um vetor numerico v1 &lt;- 1:10 # um vetor de letras do mesmo comprimento usando a constante LETTERS v2 &lt;- LETTERS[1:10] # um vetor de palavras de mesmo comprimento v3 &lt;- rep(c(&quot;fulano&quot;, &quot;jose&quot;, &quot;joaquim&quot;, &quot;martin&quot;), length.out = length(v1)) # Juntamos num data.frame com fatores dd &lt;- data.frame(v1, v2, v3, stringsAsFactors = T) class(dd) # é um data frame ## [1] &quot;data.frame&quot; dim(dd) # dimensoes, linhas e colunas ## [1] 10 3 ncol(dd) # numero de colunas ## [1] 3 nrow(dd) # numero de linhas ## [1] 10 str(dd) # estrutura do objeto (veja as classes das colunas) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ v1: int 1 2 3 4 5 6 7 8 9 10 ## $ v2: Factor w/ 10 levels &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,..: 1 2 3 4 5 6 7 8 9 10 ## $ v3: Factor w/ 4 levels &quot;fulano&quot;,&quot;joaquim&quot;,..: 1 3 2 4 1 3 2 4 1 3 # JUNTAMOS SEM FATORES dd2 &lt;- data.frame(v1, v2, v3, stringsAsFactors = FALSE) class(dd2) # é um data frame ## [1] &quot;data.frame&quot; str(dd2) # estrutura do objeto (veja as classes das colunas) ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ v1: int 1 2 3 4 5 6 7 8 9 10 ## $ v2: chr &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## $ v3: chr &quot;fulano&quot; &quot;jose&quot; &quot;joaquim&quot; &quot;martin&quot; ... # juntamos com nome de colunas (tag = vetor) dd2 &lt;- data.frame(RegistorID = v1, CodigoZ = v2, Pessoa = v3, stringsAsFactors = FALSE) dd2 RegistorID CodigoZ Pessoa 1 A fulano 2 B jose 3 C joaquim 4 D martin 5 E fulano 6 F jose 7 G joaquim 8 H martin 9 I fulano 10 J jose # agora vamos usar o cbind que vimos acima dz &lt;- cbind(v1, v2, v3) # ou entao usando tag=vetor para ter nomes das colunas de acordo dz &lt;- cbind(RegistorID = v1, CodigoZ = v2, Pessoa = v3) class(dz) # isso cria uma matriz ## [1] &quot;matrix&quot; &quot;array&quot; str(dz) # todos os dados são da mesma classe (texto) ## chr [1:10, 1:3] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : NULL ## ..$ : chr [1:3] &quot;RegistorID&quot; &quot;CodigoZ&quot; &quot;Pessoa&quot; dz &lt;- as.data.frame(dz) # convertemos num data.frame class(dz) # é um data.frame ## [1] &quot;data.frame&quot; str(dz) # converte numeros para numerico e texto para fator ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ RegistorID: chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ CodigoZ : chr &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## $ Pessoa : chr &quot;fulano&quot; &quot;jose&quot; &quot;joaquim&quot; &quot;martin&quot; ... dz &lt;- as.data.frame(as.matrix(dz), stringsAsFactors = FALSE) # convertemos num data.frame sem fatores str(dz) # converte numeros para numerico e texto para character ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ RegistorID: chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ CodigoZ : chr &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## $ Pessoa : chr &quot;fulano&quot; &quot;jose&quot; &quot;joaquim&quot; &quot;martin&quot; ... 3.1.3 Funções importantes na manipulação de matrizes e data.frames As funções head() e tail() mostram o cabeçalho e rodapé tanto para matrizes como para data.frames, respectivamente. Vejam o ? dessas duas funções: ?head ?tail # Primeiro criamos alguns dados # um vetor numerico v1 &lt;- 1:10 # um vetor de letras do mesmo comprimento usando a constante LETTERS v2 &lt;- LETTERS[1:10] # um vetor de palavras de mesmo comprimento v3 &lt;- rep(c(&quot;fulano&quot;, &quot;jose&quot;, &quot;joaquim&quot;, &quot;martin&quot;), length.out = length(v1)) # juntamos com nome de colunas (tag = vetor) e com dd2 &lt;- data.frame(RegistorID = v1, CodigoZ = v2, Pessoa = v3, stringsAsFactors = TRUE) # cabeçalho head(dd2) # primeiras 6 linhas RegistorID CodigoZ Pessoa 1 A fulano 2 B jose 3 C joaquim 4 D martin 5 E fulano 6 F jose head(dd2, 3) # três primeiras linhas RegistorID CodigoZ Pessoa 1 A fulano 2 B jose 3 C joaquim # rodapé tail(dd2) # seis últimas linhas RegistorID CodigoZ Pessoa 5 5 E fulano 6 6 F jose 7 7 G joaquim 8 8 H martin 9 9 I fulano 10 10 J jose tail(dd2, 3) # três últimas linhas RegistorID CodigoZ Pessoa 8 8 H martin 9 9 I fulano 10 10 J jose As funções dim(), nrow() e ncol() informam as dimensões de matrizes e data.frames, número de linhas, e número de colunas, respectivamente. dim(dd2) # vetor com dois valores, número de linhas e número de colunas ## [1] 10 3 nrow(dd2) # número de linhas do data.frame ou matrix ## [1] 10 ncol(dd2) # número de colunas do data.frame ou matrix ## [1] 3 nrow(as.matrix(dd2)) ## [1] 10 ncol(as.matrix(dd2)) ## [1] 3 As funções str() e summary() informam a estrutura dos data.frames e o resumo dos dados, respectivamente. str(dd2) # mostra a estrutura do objeto, quais colunas, classes de colunas e total de valores ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ RegistorID: int 1 2 3 4 5 6 7 8 9 10 ## $ CodigoZ : Factor w/ 10 levels &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,..: 1 2 3 4 5 6 7 8 9 10 ## $ Pessoa : Factor w/ 4 levels &quot;fulano&quot;,&quot;joaquim&quot;,..: 1 3 2 4 1 3 2 4 1 3 summary(dd2) # mostra para cada coluna a variação encontrada: estatística descritiva de variáveis numéricas, contagem por categoria de fatores, etc. Veremos isso adiante. RegistorID CodigoZ Pessoa Min. : 1.00 A :1 fulano :3 1st Qu.: 3.25 B :1 joaquim:2 Median : 5.50 C :1 jose :3 Mean : 5.50 D :1 martin :2 3rd Qu.: 7.75 E :1 NA Max. :10.00 F :1 NA NA (Other):4 NA As funções colnames() e rownames() permitem VER e ATRIBUIR valores de nomes de linhas e colunas em data.frames e matrizes. Em um data.frame, os nomes de linhas DEVEM SER ÚNICOS e não podem ter duas linhas com o mesmo nome. São códigos que identificam registros únicos. Isso é muito importante para o entendimento dos identificadores dos seus dados. # vamos criar uma matriz com nomes de linhas e colunas mm &lt;- matrix(1:9, nrow = 3, ncol = 3, dimnames = list(paste(&quot;linha&quot;, 1:3, sep = &quot;&quot;), paste(&quot;coluna&quot;, 1:3, sep = &quot;&quot;))) # e converter essa matrix para um data.frame dd &lt;- as.data.frame(mm) # vamos também criar outra matriz SEM nomes de linhas e colunas mm2 &lt;- matrix(1:9, nrow = 3, ncol = 3) # e converter essa matrix para um data.frame dd2 &lt;- as.data.frame(mm2) dd2 V1 V2 V3 1 4 7 2 5 8 3 6 9 # para os objetos com nomes podemos ver os nomes rownames(mm) ## [1] &quot;linha1&quot; &quot;linha2&quot; &quot;linha3&quot; rownames(dd) ## [1] &quot;linha1&quot; &quot;linha2&quot; &quot;linha3&quot; colnames(mm) ## [1] &quot;coluna1&quot; &quot;coluna2&quot; &quot;coluna3&quot; colnames(dd) ## [1] &quot;coluna1&quot; &quot;coluna2&quot; &quot;coluna3&quot; # para os objetos sem nomes rownames(mm2) # nulo, não tem nome ## NULL rownames(dd2) # números em formato de texto ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; colnames(mm2) # nulo, não tem nome ## NULL colnames(dd2) # V1 a Vncol(dd) - ele cria nomes das colunas ## [1] &quot;V1&quot; &quot;V2&quot; &quot;V3&quot; # note que no caso do data.frame dd2, apesar de não ter nome de linha e coluna, o R criou uma para ele. DATA.FRAMES SEMPRE TEM NOME DE LINHAS E COLUNAS. Note que o nome das linhas apesar de números correspondentes aos índices, são de fato TEXTO # essas funções permitem VER mas também permitem ATRIBUIR (modificar) nomes # modificando quem já tem nome (matriz, mas funciona igual para dd) colnames(mm) # nomes atuais ## [1] &quot;coluna1&quot; &quot;coluna2&quot; &quot;coluna3&quot; colnames(mm) &lt;- c(&quot;novonome1&quot;, &quot;novonome2&quot;, &quot;novonome3&quot;) mm # veja como o nome das colunas mudou novonome1 novonome2 novonome3 linha1 1 4 7 linha2 2 5 8 linha3 3 6 9 # mudando apenas o nome da coluna2 colnames(mm)[2] &lt;- &quot;colunaDOIS&quot; colnames(mm) # nomes atuais ## [1] &quot;novonome1&quot; &quot;colunaDOIS&quot; &quot;novonome3&quot; # atribuindo quando não tem nome colnames(mm2) # está vazio ou não existe (NULL) ## NULL colnames(mm2) &lt;- paste(&quot;banana&quot;, 1:ncol(mm2), sep = &quot;-&quot;) mm2 # agora tem nome de coluna banana-1 banana-2 banana-3 1 4 7 2 5 8 3 6 9 rownames(mm2) # nomes de linhas também está vazio ## NULL rownames(mm2) &lt;- paste(&quot;chuchu&quot;, 1:nrow(mm2), sep = &quot;.&quot;) mm2 # agora tem nomes de linha e coluna banana-1 banana-2 banana-3 chuchu.1 1 4 7 chuchu.2 2 5 8 chuchu.3 3 6 9 Vamos tentar atribuir um mesmo nome de linha teste1 a duas linhas de nossa matriz mm2 e ver o que acontece: rownames(mm2)[1:2] &lt;- &quot;teste1&quot; # coloque o nome teste1 para as linhas 1 e 2 FUNCIONA PARA MATRIX Reparem que um mesmo nome de linha pode ser utilizado em mais de uma linha de uma matriz. Será que isso pode ser feito em um data.frame? Vejamos: rownames(dd)[1:2] &lt;- &quot;teste1&quot; # nao funciona, porque ele não aceita nomes repetidos de linhas em DATA.FRAMES "],["indexação-de-matriz-e-data.html", "3.2 Indexação de matriz e data.frame", " 3.2 Indexação de matriz e data.frame Entender indexação é fundamental para manipular dados no R. Em indexação de vetores (seção 2.5), vimos que é possível usar números, códigos/nomes ou valores de verdadeiro ou falso (lógico), como elementos para visualizar, filtrar e mudar dados em vetores unidimensionais. O mesmo operador, [], pode ser usado para indexação de uma matriz ou um data.frame. A única diferença é que, por matrizes e data.frames serem bidimensionais, precisamos indicar a qual dimensão estamos nos referindo. Portanto o operador de indexação para matrizes e data.frame tem a seguinte estrutura, [indiceDeLinha , indiceDeColuna], em que a vírgula separa os índices de linha e coluna. 3.2.1 Matrizes # vamos criar uma matriz mm &lt;- matrix(1:9, nrow = 3, ncol = 3, dimnames = list(paste(&quot;linha&quot;, 1:3, sep = &quot;&quot;), paste(&quot;coluna&quot;, 1:3, sep = &quot;&quot;))) # veja a matriz criada mm coluna1 coluna2 coluna3 linha1 1 4 7 linha2 2 5 8 linha3 3 6 9 # USANDO INDICE NUMÉRICO mm[1, 2] # mostra o elemento da linha 1 e coluna 2 ## [1] 4 mm[1, ncol(mm)] # mostra o elemento da linha 1 e última coluna ## [1] 7 mm[nrow(mm), ncol(mm)] # mostra o elemento da última linha e última coluna ## [1] 9 mm[, 1] # mostra a coluna 1 ## linha1 linha2 linha3 ## 1 2 3 # eu posso juntar indices de matrizes e vetores na mesma linha mm[, 1][2] # mostra o segundo elemento do vetor correspondente a primeira coluna ## linha2 ## 2 mm[1, ] # mostra a linha 1 ## coluna1 coluna2 coluna3 ## 1 4 7 mm[nrow(mm), ] # mostra a ultima linha ## coluna1 coluna2 coluna3 ## 3 6 9 mm[, 1:2] # mostra as duas primeiras colunas coluna1 coluna2 linha1 1 4 linha2 2 5 linha3 3 6 mm[1:2, 1:3] # mostra as duas primeiras linhas e duas primeiras colunas coluna1 coluna2 coluna3 linha1 1 4 7 linha2 2 5 8 mm[3:nrow(mm), ] # mostra da linha tres a ultima linha ## coluna1 coluna2 coluna3 ## 3 6 9 mm[c(3, 1), c(3, 2)] # mostra as linhas 3 e 1 e colunas 3 e 2 (nessa ordem) coluna3 coluna2 linha3 9 6 linha1 7 4 # USANDO INDICES DE NOMES mm[&quot;linha1&quot;, ] # mostra a linha 1 - note que poderia ser outro nome, poderia ter chamado no inicio do script a linha 1 de &quot;banana&quot; ## coluna1 coluna2 coluna3 ## 1 4 7 mm[, &quot;coluna1&quot;] # mostra a coluna 1 ## linha1 linha2 linha3 ## 1 2 3 mm[c(&quot;linha3&quot;, &quot;linha1&quot;), c(&quot;coluna3&quot;, &quot;coluna1&quot;)] # mostra a linhas 3 e 1 e colunas 3 e 1. NOTE QUE POSSO ASSIM INVERTER AS COLUNAS E LINHAS coluna3 coluna1 linha3 9 3 linha1 7 1 # SE EU POSSO VER EU POSSO MUDAR mm coluna1 coluna2 coluna3 linha1 1 4 7 linha2 2 5 8 linha3 3 6 9 mm[1, 3] # elemento da linha 1 coluna 3 ## [1] 7 mm[1, 3] &lt;- 33 # mudei o elemento mm[2, 2:3] ## coluna2 coluna3 ## 5 8 mm[2, 2:3] &lt;- mm[2, 2:3] * 10 # mudei os valores das colunas 2 e 3 para a linha 2, multiplicando o original por 10 mm[2, 2:3] ## coluna2 coluna3 ## 50 80 mm coluna1 coluna2 coluna3 linha1 1 4 33 linha2 2 50 80 linha3 3 6 9 3.2.2 data.frame O operador [indiceDeLinha , indiceDeColuna] também funciona para data.frames. Outro operador útil na manipulação de data.frames é o $. Ele permite a visualização e atribuição de valores a qualquer coluna. # vamos criar uma matriz com nomes de linhas e colunas mm &lt;- matrix(1:9, nrow = 3, ncol = 3, dimnames = list(paste(&quot;linha&quot;, 1:3, sep = &quot;&quot;), paste(&quot;coluna&quot;, 1:3, sep = &quot;&quot;))) # veja a matriz criada mm coluna1 coluna2 coluna3 linha1 1 4 7 linha2 2 5 8 linha3 3 6 9 # convertemos para um data.frame dd &lt;- as.data.frame(mm) dd$coluna1 # pego a coluna 1 (note que o nome da coluna vai sem &quot;aspas&quot;) ## [1] 1 2 3 Veja que o uso do operador $ não funciona em matrizes: mm$coluna1 # veja como não funciona para o objeto matrix dd$coluna1[2] # vejo o segundo elemento da coluna1 ## [1] 2 # isso é o mesmo que dd[2, &quot;coluna1&quot;] ## [1] 2 # se eu vejo eu posso mudar dd[2, &quot;coluna1&quot;] &lt;- 10 dd$coluna1[3] &lt;- 20 dd$coluna3 # pego a coluna tres ## [1] 7 8 9 # também posso adicionar uma nova coluna dd$novacoluna &lt;- LETTERS[1:nrow(dd)] dd # agora tenho uma nova coluna coluna1 coluna2 coluna3 novacoluna linha1 1 4 7 A linha2 10 5 8 B linha3 20 6 9 C # ou poderia usar outra forma dd[, &quot;nova2&quot;] &lt;- LETTERS # nao vai funcionar por estou atribuindo um vetor muito mais longo do que tenho linhas length(LETTERS) &gt; nrow(dd) # essa expressão é verdadeira ## [1] TRUE dd[, &quot;nova2&quot;] &lt;- LETTERS[1:nrow(dd)] # isso tem o mesmo comprimento e funciona dd coluna1 coluna2 coluna3 novacoluna nova2 linha1 1 4 7 A A linha2 10 5 8 B B linha3 20 6 9 C C # posso adicionar uma coluna vazia dd$outracoluna &lt;- NA dd coluna1 coluna2 coluna3 novacoluna nova2 outracoluna linha1 1 4 7 A A NA linha2 10 5 8 B B NA linha3 20 6 9 C C NA # e ainda outra (lógica) dd$maisuma &lt;- TRUE dd coluna1 coluna2 coluna3 novacoluna nova2 outracoluna maisuma linha1 1 4 7 A A NA TRUE linha2 10 5 8 B B NA TRUE linha3 20 6 9 C C NA TRUE Adicionar colunas em uma matriz é um pouco diferente do que se faz com um data.frame: # primeiro nao posso usar $ porque matrix não entende isso class(mm) # é uma matrix mm$colun3 # isso nao funciona mm[, &quot;coluna3&quot;] # isso funciona ## linha1 linha2 linha3 ## 7 8 9 # adicionando uma coluna mm[, 4] # isso nao existe mm[, 4] &lt;- log(mm[, &quot;coluna3&quot;]) # isso não funciona # poderia usar a função cbind que vimos anteriormente mm &lt;- cbind(mm, LOGCOLUNA3 = log(mm[, &quot;coluna3&quot;])) # assim eu posso "],["filtrando-e-ordenando-matrizes-e-data.html", "3.3 Filtrando e ordenando matrizes e data.frames", " 3.3 Filtrando e ordenando matrizes e data.frames 3.3.1 Filtragem de dados Já vimos como fazer perguntas sobre vetores (Seção 2.6.1) e obter vetores lógicos ou valores de índices que nos permitem extrair ou filtrar de vetores os dados que satisfazem às condições das perguntas feitas. Aqui vamos estender isso para objetos de classe matrix e data.frame, porque é através de vetores lógicos ou de matrizes lógicas que podemos filtrar dados de objetos bidimensionais. ?iris # veja o help do R sobre Edgar Anderson&#39;s Iris Data que explica esses dados que vem com o R class(iris) ## [1] &quot;data.frame&quot; str(iris) # estrutura, veja as colunas ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # vamos filtrar os dados de uma das especies unique(iris$Species) # vemos os valores únicos ## [1] setosa versicolor virginica ## Levels: setosa versicolor virginica # ou, tendo em vista que é um fator levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; sp1 &lt;- levels(iris$Species)[1] # quais linhas correspondem a essa especie vl &lt;- iris$Species == sp1 sum(vl) # numero de linhas que satisfazem a pergunta ## [1] 50 nrow(iris) # numero total de linhas no data.frame ## [1] 150 # filtrando os dados eu simplesmente uso o vetor lógico como índice de linha. O novo objeto criado terá apenas as linhas em que vl é verdadeiro iris.sp1 &lt;- iris[vl, ] nrow(iris.sp1) == sum(vl) # entao esta condição é verdadeira ## [1] TRUE # filtrar segundo duas colunas vl &lt;- iris$Species == sp1 # seja da especie em sp1 sum(vl) # quantas sao? ## [1] 50 vl2 &lt;- iris$Sepal.Length &lt;= 5 # tenha sepala menor ou igual a 5 sum(vl2) # quantas sao? ## [1] 32 # combinando as duas perguntas vll &lt;- vl &amp; vl2 sum(vll) # quantas sao? ## [1] 28 # filtrando ff &lt;- iris[vll, ] class(ff) # novo data.frame resultando do filtro realizado ## [1] &quot;data.frame&quot; nrow(ff) == sum(vll) # isso deve ser verdadeiro ## [1] TRUE 3.3.1.1 Dados com valores ausentes As funçõesis.na() e na.omit() vistas anteriormente (Seção 2.6.3) permitem eliminar linhas e colunas que tenham valores ausentes. A presença de valores às vezes impede certas análises de serem executadas. # vamos fazer uma cópia do objeto iris e modificar ele acrescentando alguns NAs dd &lt;- iris # tem algum NA originalmente? sum(is.na(dd)) # não tem ## [1] 0 # qual a dimensão? dim(dd) ## [1] 150 5 # pega 10 valores aletórios entre 1:150 (linhas) v1 &lt;- sample(1:nrow(dd), size = 10, replace = F) # nessas linhas acrescenta NAs na coluna 2 dd[v1, 2] &lt;- NA # pega outros 10 valores aletórios entre 1:150 (linhas) v1 &lt;- sample(1:nrow(dd), size = 10, replace = F) # nessas linhas acrescenta NAs na coluna 3 dd[v1, 3] &lt;- NA # pronto agora temos um data.frame com NAs sum(is.na(dd)) # tem 20 NAs na tabela ## [1] 20 # quais linhas tem NA vl &lt;- is.na(dd[, 2]) | is.na(dd[, 3]) # ou é NA em 2 ou em 3 que foi onde mudei dd[vl, ] Sepal.Length Sepal.Width Petal.Length Petal.Width Species 4 4.6 NA 1.5 0.2 setosa 7 4.6 3.4 NA 0.3 setosa 9 4.4 2.9 NA 0.2 setosa 24 5.1 3.3 NA 0.5 setosa 26 5.0 NA 1.6 0.2 setosa 29 5.2 3.4 NA 0.2 setosa 40 5.1 NA 1.5 0.2 setosa 49 5.3 3.7 NA 0.2 setosa 57 6.3 NA 4.7 1.6 versicolor 72 6.1 2.8 NA 1.3 versicolor 86 6.0 NA 4.5 1.6 versicolor 101 6.3 3.3 NA 2.5 virginica 103 7.1 NA 5.9 2.1 virginica 104 6.3 NA 5.6 1.8 virginica 109 6.7 2.5 NA 1.8 virginica 110 7.2 NA 6.1 2.5 virginica 111 6.5 NA 5.1 2.0 virginica 116 6.4 3.2 NA 2.3 virginica 120 6.0 NA 5.0 1.5 virginica 140 6.9 3.1 NA 2.1 virginica # use na.omit() para eliminar todas as linhas que NA em alguma coluna sum(is.na(dd)) # tem 20 valores ## [1] 20 dd2 &lt;- na.omit(dd) sum(is.na(dd2)) # nao tem mais nenhum ## [1] 0 3.3.2 Ordenação de dados Para ordenar matrizes e data.frames, é preciso entender a diferença entre duas funções: sort() ordena um vetor e retorna os valores ordenados; order() ordena um vetor e retorna os índices dos valores ordenados. É isso que deve ser utilizado para ordenar matrizes e data.frames. ?sort ?order # ordenação str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # funcao SORT() o1 &lt;- sort(iris$Sepal.Length) # pega os valores ordenados da coluna comprimento de sépala o1 # sao valores de sepalas do menor para o maior ## [1] 4.3 4.4 4.4 4.4 4.5 4.6 4.6 4.6 4.6 4.7 4.7 4.8 4.8 4.8 4.8 4.8 4.9 4.9 ## [19] 4.9 4.9 4.9 4.9 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.1 5.1 5.1 5.1 ## [37] 5.1 5.1 5.1 5.1 5.1 5.2 5.2 5.2 5.2 5.3 5.4 5.4 5.4 5.4 5.4 5.4 5.5 5.5 ## [55] 5.5 5.5 5.5 5.5 5.5 5.6 5.6 5.6 5.6 5.6 5.6 5.7 5.7 5.7 5.7 5.7 5.7 5.7 ## [73] 5.7 5.8 5.8 5.8 5.8 5.8 5.8 5.8 5.9 5.9 5.9 6.0 6.0 6.0 6.0 6.0 6.0 6.1 ## [91] 6.1 6.1 6.1 6.1 6.1 6.2 6.2 6.2 6.2 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 ## [109] 6.4 6.4 6.4 6.4 6.4 6.4 6.4 6.5 6.5 6.5 6.5 6.5 6.6 6.6 6.7 6.7 6.7 6.7 ## [127] 6.7 6.7 6.7 6.7 6.8 6.8 6.8 6.9 6.9 6.9 6.9 7.0 7.1 7.2 7.2 7.2 7.3 7.4 ## [145] 7.6 7.7 7.7 7.7 7.7 7.9 # em ordem decrescente o2 &lt;- sort(iris$Sepal.Length, decreasing = T) o2 # sao valores de sepalas do maior para o menor ## [1] 7.9 7.7 7.7 7.7 7.7 7.6 7.4 7.3 7.2 7.2 7.2 7.1 7.0 6.9 6.9 6.9 6.9 6.8 ## [19] 6.8 6.8 6.7 6.7 6.7 6.7 6.7 6.7 6.7 6.7 6.6 6.6 6.5 6.5 6.5 6.5 6.5 6.4 ## [37] 6.4 6.4 6.4 6.4 6.4 6.4 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.2 6.2 6.2 ## [55] 6.2 6.1 6.1 6.1 6.1 6.1 6.1 6.0 6.0 6.0 6.0 6.0 6.0 5.9 5.9 5.9 5.8 5.8 ## [73] 5.8 5.8 5.8 5.8 5.8 5.7 5.7 5.7 5.7 5.7 5.7 5.7 5.7 5.6 5.6 5.6 5.6 5.6 ## [91] 5.6 5.5 5.5 5.5 5.5 5.5 5.5 5.5 5.4 5.4 5.4 5.4 5.4 5.4 5.3 5.2 5.2 5.2 ## [109] 5.2 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 ## [127] 5.0 5.0 4.9 4.9 4.9 4.9 4.9 4.9 4.8 4.8 4.8 4.8 4.8 4.7 4.7 4.6 4.6 4.6 ## [145] 4.6 4.5 4.4 4.4 4.4 4.3 # FUNCAO order() # qual o indice dos valores ordenados em ordem crescente? o3 &lt;- order(iris$Sepal.Length) o3 # esses valores correspondem aos INDICES dos valores ordenados ## [1] 14 9 39 43 42 4 7 23 48 3 30 12 13 25 31 46 2 10 ## [19] 35 38 58 107 5 8 26 27 36 41 44 50 61 94 1 18 20 22 ## [37] 24 40 45 47 99 28 29 33 60 49 6 11 17 21 32 85 34 37 ## [55] 54 81 82 90 91 65 67 70 89 95 122 16 19 56 80 96 97 100 ## [73] 114 15 68 83 93 102 115 143 62 71 150 63 79 84 86 120 139 64 ## [91] 72 74 92 128 135 69 98 127 149 57 73 88 101 104 124 134 137 147 ## [109] 52 75 112 116 129 133 138 55 105 111 117 148 59 76 66 78 87 109 ## [127] 125 141 145 146 77 113 144 53 121 140 142 51 103 110 126 130 108 131 ## [145] 106 118 119 123 136 132 # entao para ver os valores ordenados iris$Sepal.Length[o3] ## [1] 4.3 4.4 4.4 4.4 4.5 4.6 4.6 4.6 4.6 4.7 4.7 4.8 4.8 4.8 4.8 4.8 4.9 4.9 ## [19] 4.9 4.9 4.9 4.9 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.1 5.1 5.1 5.1 ## [37] 5.1 5.1 5.1 5.1 5.1 5.2 5.2 5.2 5.2 5.3 5.4 5.4 5.4 5.4 5.4 5.4 5.5 5.5 ## [55] 5.5 5.5 5.5 5.5 5.5 5.6 5.6 5.6 5.6 5.6 5.6 5.7 5.7 5.7 5.7 5.7 5.7 5.7 ## [73] 5.7 5.8 5.8 5.8 5.8 5.8 5.8 5.8 5.9 5.9 5.9 6.0 6.0 6.0 6.0 6.0 6.0 6.1 ## [91] 6.1 6.1 6.1 6.1 6.1 6.2 6.2 6.2 6.2 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 ## [109] 6.4 6.4 6.4 6.4 6.4 6.4 6.4 6.5 6.5 6.5 6.5 6.5 6.6 6.6 6.7 6.7 6.7 6.7 ## [127] 6.7 6.7 6.7 6.7 6.8 6.8 6.8 6.9 6.9 6.9 6.9 7.0 7.1 7.2 7.2 7.2 7.3 7.4 ## [145] 7.6 7.7 7.7 7.7 7.7 7.9 # então isso deve ser totalmente verdadeiro: iris$Sepal.Length[o3] == sort(iris$Sepal.Length) # as comparações para a par são identicasentão esta expressão também é verdadeira: sum(iris$Sepal.Length[o3] == sort(iris$Sepal.Length)) == nrow(iris) ## [1] TRUE # portanto a função sort ordena os valores e funcao order mostra apenas os indices dos valores ordenados. Assim, posso usar a funcao order() para ordenar data.frames, matrizes e vetores idx &lt;- order(iris$Sepal.Length) # indice das linhas ordenadas segundo o comprimento das sepalas # compara com o original: sum(iris$Sepal.Length[idx] == iris$Sepal.Length) == nrow(iris) # é FALSO porque em iris as linhas não estão originalmente ordenadas segundo o comprimento. ## [1] FALSE # vamos mudar isso novo.iris &lt;- iris[idx, ] # pego o vetor de indices dos valores ordenados e uso na indexacao para ordenar o objeto original segunda a coluna escolhida idx2 &lt;- order(novo.iris$Sepal.Length) # indice das linhas ordenadas segundo o comprimento das sepalas # note que agora essa expressão é verdadeira, porque o original já está ordenado segundo essa coluna sum(novo.iris$Sepal.Length[idx2] == novo.iris$Sepal.Length) == nrow(novo.iris) # é FALSO ## [1] TRUE # AGORA ORDENANDO POR MULTIPLAS COLUNAS idx &lt;- order(iris$Species, iris$Sepal.Length, decreasing = TRUE) # por especie e por sepala em ordem decrescente # ordena segundo essas duas colunas novo.iris &lt;- iris[idx, ] novo.iris[, c(&quot;Species&quot;, &quot;Sepal.Length&quot;)] Species Sepal.Length 132 virginica 7.9 118 virginica 7.7 119 virginica 7.7 123 virginica 7.7 136 virginica 7.7 106 virginica 7.6 131 virginica 7.4 108 virginica 7.3 110 virginica 7.2 126 virginica 7.2 130 virginica 7.2 103 virginica 7.1 121 virginica 6.9 140 virginica 6.9 142 virginica 6.9 113 virginica 6.8 144 virginica 6.8 109 virginica 6.7 125 virginica 6.7 141 virginica 6.7 145 virginica 6.7 146 virginica 6.7 105 virginica 6.5 111 virginica 6.5 117 virginica 6.5 148 virginica 6.5 112 virginica 6.4 116 virginica 6.4 129 virginica 6.4 133 virginica 6.4 138 virginica 6.4 101 virginica 6.3 104 virginica 6.3 124 virginica 6.3 134 virginica 6.3 137 virginica 6.3 147 virginica 6.3 127 virginica 6.2 149 virginica 6.2 128 virginica 6.1 135 virginica 6.1 120 virginica 6.0 139 virginica 6.0 150 virginica 5.9 102 virginica 5.8 115 virginica 5.8 143 virginica 5.8 114 virginica 5.7 122 virginica 5.6 107 virginica 4.9 51 versicolor 7.0 53 versicolor 6.9 77 versicolor 6.8 66 versicolor 6.7 78 versicolor 6.7 87 versicolor 6.7 59 versicolor 6.6 76 versicolor 6.6 55 versicolor 6.5 52 versicolor 6.4 75 versicolor 6.4 57 versicolor 6.3 73 versicolor 6.3 88 versicolor 6.3 69 versicolor 6.2 98 versicolor 6.2 64 versicolor 6.1 72 versicolor 6.1 74 versicolor 6.1 92 versicolor 6.1 63 versicolor 6.0 79 versicolor 6.0 84 versicolor 6.0 86 versicolor 6.0 62 versicolor 5.9 71 versicolor 5.9 68 versicolor 5.8 83 versicolor 5.8 93 versicolor 5.8 56 versicolor 5.7 80 versicolor 5.7 96 versicolor 5.7 97 versicolor 5.7 100 versicolor 5.7 65 versicolor 5.6 67 versicolor 5.6 70 versicolor 5.6 89 versicolor 5.6 95 versicolor 5.6 54 versicolor 5.5 81 versicolor 5.5 82 versicolor 5.5 90 versicolor 5.5 91 versicolor 5.5 85 versicolor 5.4 60 versicolor 5.2 99 versicolor 5.1 61 versicolor 5.0 94 versicolor 5.0 58 versicolor 4.9 15 setosa 5.8 16 setosa 5.7 19 setosa 5.7 34 setosa 5.5 37 setosa 5.5 6 setosa 5.4 11 setosa 5.4 17 setosa 5.4 21 setosa 5.4 32 setosa 5.4 49 setosa 5.3 28 setosa 5.2 29 setosa 5.2 33 setosa 5.2 1 setosa 5.1 18 setosa 5.1 20 setosa 5.1 22 setosa 5.1 24 setosa 5.1 40 setosa 5.1 45 setosa 5.1 47 setosa 5.1 5 setosa 5.0 8 setosa 5.0 26 setosa 5.0 27 setosa 5.0 36 setosa 5.0 41 setosa 5.0 44 setosa 5.0 50 setosa 5.0 2 setosa 4.9 10 setosa 4.9 35 setosa 4.9 38 setosa 4.9 12 setosa 4.8 13 setosa 4.8 25 setosa 4.8 31 setosa 4.8 46 setosa 4.8 3 setosa 4.7 30 setosa 4.7 4 setosa 4.6 7 setosa 4.6 23 setosa 4.6 48 setosa 4.6 42 setosa 4.5 9 setosa 4.4 39 setosa 4.4 43 setosa 4.4 14 setosa 4.3 # para cada especie esta ordenado por sepala: novo.iris[novo.iris$Species == &quot;versicolor&quot;, ]$Sepal.Length ## [1] 7.0 6.9 6.8 6.7 6.7 6.7 6.6 6.6 6.5 6.4 6.4 6.3 6.3 6.3 6.2 6.2 6.1 6.1 6.1 ## [20] 6.1 6.0 6.0 6.0 6.0 5.9 5.9 5.8 5.8 5.8 5.7 5.7 5.7 5.7 5.7 5.6 5.6 5.6 5.6 ## [39] 5.6 5.5 5.5 5.5 5.5 5.5 5.4 5.2 5.1 5.0 5.0 4.9 novo.iris[novo.iris$Species == &quot;virginica&quot;, ]$Sepal.Length ## [1] 7.9 7.7 7.7 7.7 7.7 7.6 7.4 7.3 7.2 7.2 7.2 7.1 6.9 6.9 6.9 6.8 6.8 6.7 6.7 ## [20] 6.7 6.7 6.7 6.5 6.5 6.5 6.5 6.4 6.4 6.4 6.4 6.4 6.3 6.3 6.3 6.3 6.3 6.3 6.2 ## [39] 6.2 6.1 6.1 6.0 6.0 5.9 5.8 5.8 5.8 5.7 5.6 4.9 "],["importando-e-exportando-dados-no-r.html", "3.4 Importando e exportando dados no R", " 3.4 Importando e exportando dados no R ATENÇÃO! Se você utiliza Windows, e no seu gerenciador de arquivos os arquivos aparecem sem extensão (.csv, .txt, .doc etc.), mude nas suas preferências para não ocultar extensões de arquivos conhecidos. Dessa forma você consegue ver os arquivos pelo tipo (extensão). Existem diversas funções para importar dados para objetos do R, incluindo funções para ler arquivos do Excel (.xls, ou .xlsx), arquivos XML, arquivos *.DBF etc. O R também tem pacotes que interagem diretamente com bancos de dados (mysql, postgres, sql etc.). Não cobriremos a importação desses tipos aqui, mas você pode pesquisar sozinho no rede. É frequente encontrarmos problemas de acentuação e na transferibilidade entre sistemas operacionais diferentes (Mac, Linux, Windows). A palavra chave aqui é codificação de caracteres (em inglês, “character encoding”). 3.4.1 Arquivos de texto simples para estocar dados Muitos dados que obtemos online e os próprios scripts do R são do formato mais simples que existe, que são arquivos de texto, geralmente arquivos salvos com extensões .csv ou .txt. Arquivos desse tipo podem ser abertos em qualquer editor de texto, em qualquer sistema operacional e em qualquer versão. Isso garante arquivamento, longevidade e transferibilidade. Portanto, é a melhor forma de salvar seus dados e compartilhá-los. Qualquer arquivo desse tipo pode ser lido pelos os editores de script do R ou RStudio. Pode também exportar planilhas do Excel ou LibreOffice (e afins) para esse formato. Vamos nos concentrar neste curso em lidar com arquivos deste tipo. É importante atentar em arquivos de texto contendo dados tabulados para: O separador das colunas pode ser ;, tabulação (no R = ’‘’), ,, ou qualquer símbolo que indique a separação das colunas (ou seja não está nas células); Casas decimais podem ser separadas por . ou ,. DICA: Procure saber como seus dados estão antes de tentar importá-los, de forma a indicar corretamente o delimitador e o separador das casas decimais adequados. Você evitará assim muita dor de cabeça! Datas - colunas com datas constituem um objeto de classe date no R, que a converte em número que pode ser usado em operações matemáticas. Dependendo de como seus dados estão formatados no original, é comum a inversão de mês com dia entre, por exemplo, o sistema inglês (MM-DD-YYYY) e o sistema português (DD-MM-YYYY). Tenha controle disso! Por isso, recomenda-se que: Defina um padrão que você sempre usará para formatar seus dados ANTES de importá-los ao R. Dessa forma você irá memorizar rapidamente como importar os dados do jeito que você sempre prepara; Padronize a codificação dos caracteres (UTF8 é padrão Mac e Linux; Latin1 é padrão Windows) em arquivos .txt; Padronize o separador de casa decimal (ponto ou vírgula?); Pradonize a quebra de linha, i.e., o que indica no texto o início de uma nova linha (novamente, isso é diferente entre Mac, Linux e Windows); Padronize se colunas de texto vão entre aspas; Padronize como você dá nome às colunas; nome de colunas e de linhas não devem ser muito longos, e deve-se evitar acentos ou espaços em branco em nomes de colunas. Isso é muito importante! Se você usa planilhas, recomendamos usar uma versão de software livre da família LibreOffice/OpenOffice pois eles permitem um maior controle da exportação dos dados, o que inclui controlar o tipo de codificação de caracter dos dados de saída e também separadores das colunas, anto para ler como para salvar arquivos de planilhas. 3.4.2 Importando dados 3.4.2.1 Pacote base do R A principal função para importar dados no R é read.table(). Ela funciona para importar arquivos em formato de texto simples (.csv, .txt). Vamos utilizar um conjunto de dados contendo as coordenadas geográficas dos municípios brasileiros para praticar a importação dos dados. Baixe-o para a sua pasta de trabalho. Em seguida, abra o arquivo com um editor de texto simples (Bloco de Notas, Notepad++, TextWrangler, gedit, etc.) e veja como ele está formatado. Verifique: Qual é o separador de colunas?; Qual é a codificação dos caracteres? (consegue ver e editar isso no seu editor?); Qual é a quebra de linha? (consegue ver e editar isso no seu editor? Aspas duplas ou simples definem colunas? (este arquivo não tem nenhuma aspas!) Vamos agora abrir este arquivo no LibreOffice (ou similar, como o Excel). Busque os comandos de importação para poder importar o arquivo de texto2. Veja os controles na importação quanto aos elementos acima: Salve o arquivo como *.ods; Salve novamente como *.csv - veja como você tem controle na exportação quanto aos elementos acima. # se você colocou o arquivo na sua pasta de trabalho, ele deve estar visível por dir(pattern = &quot;csv&quot;) # então posso ler sem precisar especificar o caminho até o arquivo # veja o help da função antes de começar ?read.table # os seguintes argumentos são mais importantes: # sep = &quot; &quot; #o codigo que separa as colunas, o padrão é espaço # quote = &quot;\\&quot;&#39;&quot; #o que define células de texto - o padrão é interpretar tanto aspa simples como dupla presentes # dec = &quot;.&quot; #ponto é a casa decimal padrão # header = FALSE #a primeira linha não tem o nome de colunas # as.is = FALSE #o padrão é converter texto em fatores, se usar T não fará isso # na.strings #se definir, pode informar aqui que símbolos em células inteiras que sejam interpretados como valores ausentes (NA) # encoding #codificação da acentuação. o padrão é &#39;unknown&#39; (desconhecido), na qual ele reconhece segundo o sistema operacional. As opções mais usadas são &#39;latin1&#39; ou &#39;utf8&#39; e alterne com isso se você tem problemas com acentos. # o arquivo original tem os seguintes formatos: # colunas separadas por tabulação (no R isso é definido pela expressão regular &quot;\\t&quot;) # decimal com ponto # não tem aspas definindo as colunas de texto. # a primeira linha é o nome das colunas. # Então, para ler posso usar: dd &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T) class(dd) # data.frame dim(dd) # dimensão do objeto head(dd) # cabeçalho do data.frame # veja o que aconteceria se eu achasse que no meu arquivo as colunas são separadas por vírgula dd2 &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;,&quot;, header = T) head(dd2) dim(dd2) # apenas 1 coluna, porque o separador informado não é o mesmo dos dados # e se o encoding do meu arquivo estiver errado? dd3 &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T, encoding = &quot;latin1&quot;) dd3[5562, ] # veja o que aconteceu com os acentos nessa linha dd[5562, ] # no original o encoding não é &quot;latin1&quot; # veja a estrutura do objeto correto str(dd) # Poxa, todas as colunas são fatores, mesmo as colunas Latitude e Longitude que são numéricas. # Deve ter algum valor nessas colunas que não são numéricos. # Quais são? vl &lt;- is.na(as.numeric(as.vector(dd$Latitude))) # quais são NA quando eu converto para numérico? Pois esses devem ser valores de texto e não numéricos. Note que converti o fator para vetor antes de converter para numérico. A função is.na pergunta o que é NA, pois os textos que não podem ser convertidos para número serão valores ausentes (NA) sum(vl) dd[vl, ] # essas linhas tem a palavra &quot;NULL&quot; para Latitude e Longitude no arquivo original (volte lá para confirmar), e o R não reconheceu isso como ausente NA. Como vetores devem ser da mesma classe, os números dessas colunas foram codificados como texto e as colunas convertidas a fatores de texto que é o padrão da função read.table() Podemos usar o argumento na.strings para corrigir isso durante a importação: dd4 &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T, dec = &quot;.&quot;, na.strings = c(&quot;NULL&quot;, &quot;NA&quot;, &quot;&quot;)) # qualquer CELULA INTEIRA que contenha NULL ou NA ou esteja vazia SERÁ INTERPRETADA COMO VALOR AUSENTE e codificada como NA no R. str(dd4) # note que agora as colunas Latitude e Longitude foram interpretadas como número # mas o que acontece se informamos mal a casa decimal? dd5 &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T, dec = &quot;,&quot;, na.strings = c(&quot;NULL&quot;, &quot;NA&quot;, &quot;&quot;)) str(dd5) # como tem ponto como definição de casa decimal no arquivo de dados, as colunas numéricas foram novamente interpretadas como texto. # Texto como vetores ou fatores? dd4 &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T, dec = &quot;.&quot;, na.strings = c(&quot;NULL&quot;, &quot;NA&quot;, &quot;&quot;)) str(dd4) # todas as colunas de texto neste objeto foram interpretadas como fatores # o argumento as.is permite corrigir isso. &quot;as is&quot; significa &quot;como está&quot; nos dados originais, então valores de texto são lidos como vetores de caracteres não codificados em fatores. dd6 &lt;- read.table( file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T, dec = &quot;.&quot;, na.strings = c(&quot;NULL&quot;, &quot;NA&quot;, &quot;&quot;), as.is = TRUE ) str(dd6) # diferentemente do objeto anterior, não há mais fatores # Lembram que colocamos o endereco do arquivo mais acima? # podemos usar um endereco da internet para baixar um arquivo dd7 &lt;- read.table( &quot;https://github.com/LABOTAM/IntroR/blob/main/dados/municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = TRUE ) dd7 head(dd7) # a função read.table tem vários outros argumentos. Veja o help e entenda isso bem. 3.4.2.2 Pacote readr A principal função para ler arquivos do pacote readr (Wickham e Hester 2020) se chama read_delim(). Funciona de maneira parecida com o read.table() com algumas pequenas diferenças: não converte colunas de texto que possam ser categorizadas em fatores (read.table() faz isso por padrão), retorna um tibble no lugar de um data.frame (tibbles são data.frames diferentes na maneira como aparecem no console; além de mostrar apenas uma porção dos dados, para cada coluna há a indicação do tipo de variável presente), assume por padrão que o dado importado possui cabeçalho. Existem outras diferenças que podem ser melhor entendidas na página do pacote (https://github.com/tidyverse/readr). Os argumentos possuem nomes diferentes do que os utilizados em read.table() e, como este, importa arquivos em formato de texto simples (.csv , .txt). # pacote readr # usando como exemplo o mesmo arquivo municipiosbrasil.csv library(&quot;readr&quot;) rr1 &lt;- read_delim(&quot;municipiosbrasil.csv&quot;, delim = &quot;\\t&quot;) rr1 dd7 dim(rr1) dim(dd7) Como no pacote base, também podemos ler arquivos diretamente da rede: rr2 &lt;- read_delim(&quot;https://github.com/LABOTAM/IntroR/blob/main/dados/municipiosbrasil.csv&quot;, delim = &quot;\\t&quot;) rr2 3.4.2.3 Pacote data.table A principal função para ler arquivos do pacote data.table (Dowle e Srinivasan 2020) se chama fread(). Este pacote é muito conhecido devido à velocidade de suas ações, funcionando perfeitamente para dados grandes. Esta função possui uma particularidade: o usuário não precisa indicar o separador; automaticamente ele descobre o separador e lê o arquivo. Em casos especiais, é necessário a indicação do separador com o argumento sep, igual ao read.table(). Ao ler um arquivo, a função retorna também um data.frame, porém com certas particularidades quanto à impressão do resultado na tela do console, como acontece com a função read_delim() do pacote readr. Mais informações, leiam atentamente o site do pacote: https://github.com/Rdatatable/data.table. O pacote como um todo é uma excelente ferramenta na manipulação de dados. Como os pacotes citados acima, esta função é capaz de importar arquivos em formato de texto simples (.csv , .txt). # pacote data.table # usando como exemplo o mesmo arquivo municipiosbrasil.csv library(&quot;data.table&quot;) dt1 &lt;- fread(&quot;municipiosbrasil.csv&quot;) dt1 Também podemos ler arquivos diretamente da rede, providenciando um endereço que contenha um arquivo de texto simples: dt2 &lt;- fread(&quot;https://github.com/LABOTAM/IntroR/blob/main/dados/municipiosbrasil.csv&quot;) dt2 3.4.2.4 Importando do Excel diretamente Utilizamos o pacote readxl(Wickham e Bryan 2019) para ler dados de arquivos Excel, isto é, arquivos .xlsx ou .xls. A principal função para importar dados deste pacote se chama read_excel(). Os principais erros aqui podem ser por células unidas, cabeçalhos no topo da planilha, e acentos. Veja o ? das funções usadas para conhecer parâmetros opcionais para resolver esses possíveis problemas. # instale o pacote library(&quot;readxl&quot;) # se o arquivo for xls # Salve o arquivo municipiosbrasil.csv como xlsx ou xls meuxlsx &lt;- &quot;municipiosbrasil.xlsx&quot; dd &lt;- read_excel(path = meuxlsx, sheet = 1) dd dd &lt;- as.data.frame(dd) dd # se o arquivo for xls meuxls &lt;- &quot;municipiosbrasil.xls&quot; dd &lt;- read_excel(path = meuxls, sheet = 1) dd dd &lt;- as.data.frame(dd) dd 3.4.3 Exportando dados 3.4.3.1 Pacote base do R A principal função do pacote base do R para exportar dados se chama write.table(). Ela funciona para exportar arquivos em formato de texto simples (.csv, .txt) e usa basicamente os mesmos argumentos da função read.table(). ?write.table # veja o help - recomendo usar essa função genérica e evitar de usar atalhos tipo write.csv, que no fundo usam esta mesma função Por se tratar de uma função do pacote base, não é necessário recorrer a função library() para chamar nenhum pacote, pois a função encontra-se disponível a qualquer momento para ser utilizada no R: # vamos usar o mesmo arquivo dir(pattern = &quot;csv&quot;) # ler o arquivo para o R para ter algo a exportar dd &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, sep = &quot;\\t&quot;, header = T, dec = &quot;.&quot;, na.strings = c(&quot;NULL&quot;, &quot;NA&quot;, &quot;&quot;), as.is = TRUE) str(dd) # diferentemente do objeto anterior, não há mais fatores # filtrando apenas para municipios do Amazonas: vl &lt;- dd$Province %in% &quot;Amazonas&quot; sum(vl) # quantos são? # ou, desse jeito que é identico: vl &lt;- dd$Province == &quot;Amazonas&quot; sum(vl) dd.am &lt;- dd[vl, ] nrow(dd.am) == sum(vl) # deve ser verdadeiro, certo? # salvando esses dados num novo arquivo com diferentes formatações: # separado por tabulação e textos sem aspas e células NA sem nada write.table(dd.am, file = &quot;muni-am1.csv&quot;, sep = &quot;\\t&quot;, na = &quot;&quot;, quote = FALSE) # separado por tabulação e textos com aspas e células NA sem nada write.table(dd.am, file = &quot;muni-am2.csv&quot;, sep = &quot;\\t&quot;, na = &quot;&quot;, quote = TRUE) # separado por vírgula e textos com aspas e células NA com a palavra valor.ausente write.table(dd.am, file = &quot;muni-am3.csv&quot;, sep = &quot;,&quot;, na = &quot;valor.ausente&quot;, quote = TRUE) # separado por vírgula e textos com aspas e células NA vazios e não adicona nomes das linhas como primeira coluna (row.names=FALSE). Pode deslocar a primeira linha na sua planilha SE você NAO USAR este argumento) write.table(dd.am, file = &quot;muni-am4.csv&quot;, sep = &quot;,&quot;, na = &quot;&quot;, quote = TRUE, row.names = FALSE) # separado por tabulação e textos sem aspas e células NA vazias, sem nomes das linhas, e quebra de linha no formato do windows (eol = &quot;\\r\\n&quot;) write.table(dd.am, file = &quot;muni-am5.csv&quot;, sep = &quot;,&quot;, na = &quot;&quot;, quote = TRUE, row.names = FALSE, eol = &quot;\\r\\n&quot;) # ABRA OS ARQUIVOS GERADOS NO SEU EDITOR DE TEXTO E COMPARE AS FORMATAÇÕES GERADAS 3.4.3.2 Pacote readr A principal função do pacote readrpara exportar dados se chama write_delim(). Ela exporta data.frames em formato de texto simples (.csv, .txt), utilizando basicamente os mesmos argumentos da função read_delim(), pertencente ao mesmo pacote. # exportando dados com pacote readr # utilizando mesmo objeto criado com pacote base write_delim(dd.am, &quot;muni-am6.csv&quot;, delim = &quot;\\t&quot;) write_delim(dd.am, &quot;muni-am7.csv&quot;, delim = &quot;;&quot;) 3.4.3.3 Pacote data.table A principal função do pacote data.table para exportar data.frames em formato de texto simples (.csv, .txt) se chama fwrite() e usa basicamente os mesmos argumentos da função read_delim(), pertencente ao pacote readr. # exportando dados com pacote data.table # utilizando mesmo objeto criado com pacote base fwrite(dd.am, &quot;muni-am8.csv&quot;, sep = &quot;\\t&quot;) 3.4.4 Outras funções úteis A função scan() lê um arquivo de texto em qualquer formato para um vetor ou lista no R. Trata-se de uma função genérica que é bom memorizar. Vamos usar o mesmo arquivo municipiosbrasil.csv para demonstrar sua utilidade: # esta função é muito util para ler linha por linha um arquivo de texto que você quer explorar. dd &lt;- scan(file = &quot;municipiosbrasil.csv&quot;, what = &quot;complex&quot;, sep = &quot;\\n&quot;) class(dd) ## [1] &quot;character&quot; length(dd) # cada linha é um elemento do vetor ## [1] 5568 dd[1] ## [1] &quot;Country\\tProvince\\tRegiao\\tMunicipio\\tLatitude\\tLongitude&quot; # usando tabulação dd2 &lt;- scan(file = &quot;municipiosbrasil.csv&quot;, what = &quot;complex&quot;, sep = &quot;\\t&quot;) class(dd2) ## [1] &quot;character&quot; length(dd2) # cada célula é um elemento deste vetor ## [1] 33408 dd2[1:5] ## [1] &quot;Country&quot; &quot;Province&quot; &quot;Regiao&quot; &quot;Municipio&quot; &quot;Latitude&quot; # nao faz muito sentido com esses dados que tem formato de tabela, mas essa função pode ser usada com qualquer arquivo de tipo texto, por exemplo: # de um artigo no qual você quer buscar palavras e tabular palavras chaves? # num log de uma análise feita por outro software (nao no R) do qual você quer extrair resultados a partir da lógica complicada do texto de resultado) # etc. Referências "],["sabermais-indexacao-matrizes-dframes.html", "3.5 Para saber mais:", " 3.5 Para saber mais: Vídeoaula de Indexação de matrizes e data.frames. Vídeoaula de filtragem e ordenação de matrizes. "],["exercícios-2.html", "3.6 Exercícios", " 3.6 Exercícios Resolva o exercício 103.01 Distância entre cidades. Resolva o exercício 103.02 Criação de um data frame. Resolva o exercício 103.03 Criando uma Matriz. "],["lista-objcompl.html", "Capítulo 4 Objeto III - Listas e objetos complexos ", " Capítulo 4 Objeto III - Listas e objetos complexos "],["listas.html", "4.1 Listas", " 4.1 Listas O resultado de muitas análises são objetos de classe list e você precisa entender o que isso significa. Listas permitem organizar diferentes classes de objetos numa estrutura hierárquica organizada. Uma mesma lista pode incluir elementos que são vetores de qualquer classe, matrizes, data.frames etc. Listas são criadas pela função list(). A indexação de listas é dado pelo operador [[indice_ou_nome]] ou lista$ seguida do nome (se os elementos da lista tem nome; e.g. lista$nomeDeUmElementoDaLista). ?list # veja o help # um vetor simples v1 &lt;- 1:10 class(v1) ## [1] &quot;integer&quot; # outro vetor simples v2 &lt;- LETTERS class(v2) ## [1] &quot;character&quot; # uma matriz simples mm &lt;- matrix(1:9, nrow = 3, ncol = 3) class(mm) ## [1] &quot;matrix&quot; &quot;array&quot; # um data.frame dd &lt;- iris dd Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.4 3.4 1.7 0.2 setosa 5.1 3.7 1.5 0.4 setosa 4.6 3.6 1.0 0.2 setosa 5.1 3.3 1.7 0.5 setosa 4.8 3.4 1.9 0.2 setosa 5.0 3.0 1.6 0.2 setosa 5.0 3.4 1.6 0.4 setosa 5.2 3.5 1.5 0.2 setosa 5.2 3.4 1.4 0.2 setosa 4.7 3.2 1.6 0.2 setosa 4.8 3.1 1.6 0.2 setosa 5.4 3.4 1.5 0.4 setosa 5.2 4.1 1.5 0.1 setosa 5.5 4.2 1.4 0.2 setosa 4.9 3.1 1.5 0.2 setosa 5.0 3.2 1.2 0.2 setosa 5.5 3.5 1.3 0.2 setosa 4.9 3.6 1.4 0.1 setosa 4.4 3.0 1.3 0.2 setosa 5.1 3.4 1.5 0.2 setosa 5.0 3.5 1.3 0.3 setosa 4.5 2.3 1.3 0.3 setosa 4.4 3.2 1.3 0.2 setosa 5.0 3.5 1.6 0.6 setosa 5.1 3.8 1.9 0.4 setosa 4.8 3.0 1.4 0.3 setosa 5.1 3.8 1.6 0.2 setosa 4.6 3.2 1.4 0.2 setosa 5.3 3.7 1.5 0.2 setosa 5.0 3.3 1.4 0.2 setosa 7.0 3.2 4.7 1.4 versicolor 6.4 3.2 4.5 1.5 versicolor 6.9 3.1 4.9 1.5 versicolor 5.5 2.3 4.0 1.3 versicolor 6.5 2.8 4.6 1.5 versicolor 5.7 2.8 4.5 1.3 versicolor 6.3 3.3 4.7 1.6 versicolor 4.9 2.4 3.3 1.0 versicolor 6.6 2.9 4.6 1.3 versicolor 5.2 2.7 3.9 1.4 versicolor 5.0 2.0 3.5 1.0 versicolor 5.9 3.0 4.2 1.5 versicolor 6.0 2.2 4.0 1.0 versicolor 6.1 2.9 4.7 1.4 versicolor 5.6 2.9 3.6 1.3 versicolor 6.7 3.1 4.4 1.4 versicolor 5.6 3.0 4.5 1.5 versicolor 5.8 2.7 4.1 1.0 versicolor 6.2 2.2 4.5 1.5 versicolor 5.6 2.5 3.9 1.1 versicolor 5.9 3.2 4.8 1.8 versicolor 6.1 2.8 4.0 1.3 versicolor 6.3 2.5 4.9 1.5 versicolor 6.1 2.8 4.7 1.2 versicolor 6.4 2.9 4.3 1.3 versicolor 6.6 3.0 4.4 1.4 versicolor 6.8 2.8 4.8 1.4 versicolor 6.7 3.0 5.0 1.7 versicolor 6.0 2.9 4.5 1.5 versicolor 5.7 2.6 3.5 1.0 versicolor 5.5 2.4 3.8 1.1 versicolor 5.5 2.4 3.7 1.0 versicolor 5.8 2.7 3.9 1.2 versicolor 6.0 2.7 5.1 1.6 versicolor 5.4 3.0 4.5 1.5 versicolor 6.0 3.4 4.5 1.6 versicolor 6.7 3.1 4.7 1.5 versicolor 6.3 2.3 4.4 1.3 versicolor 5.6 3.0 4.1 1.3 versicolor 5.5 2.5 4.0 1.3 versicolor 5.5 2.6 4.4 1.2 versicolor 6.1 3.0 4.6 1.4 versicolor 5.8 2.6 4.0 1.2 versicolor 5.0 2.3 3.3 1.0 versicolor 5.6 2.7 4.2 1.3 versicolor 5.7 3.0 4.2 1.2 versicolor 5.7 2.9 4.2 1.3 versicolor 6.2 2.9 4.3 1.3 versicolor 5.1 2.5 3.0 1.1 versicolor 5.7 2.8 4.1 1.3 versicolor 6.3 3.3 6.0 2.5 virginica 5.8 2.7 5.1 1.9 virginica 7.1 3.0 5.9 2.1 virginica 6.3 2.9 5.6 1.8 virginica 6.5 3.0 5.8 2.2 virginica 7.6 3.0 6.6 2.1 virginica 4.9 2.5 4.5 1.7 virginica 7.3 2.9 6.3 1.8 virginica 6.7 2.5 5.8 1.8 virginica 7.2 3.6 6.1 2.5 virginica 6.5 3.2 5.1 2.0 virginica 6.4 2.7 5.3 1.9 virginica 6.8 3.0 5.5 2.1 virginica 5.7 2.5 5.0 2.0 virginica 5.8 2.8 5.1 2.4 virginica 6.4 3.2 5.3 2.3 virginica 6.5 3.0 5.5 1.8 virginica 7.7 3.8 6.7 2.2 virginica 7.7 2.6 6.9 2.3 virginica 6.0 2.2 5.0 1.5 virginica 6.9 3.2 5.7 2.3 virginica 5.6 2.8 4.9 2.0 virginica 7.7 2.8 6.7 2.0 virginica 6.3 2.7 4.9 1.8 virginica 6.7 3.3 5.7 2.1 virginica 7.2 3.2 6.0 1.8 virginica 6.2 2.8 4.8 1.8 virginica 6.1 3.0 4.9 1.8 virginica 6.4 2.8 5.6 2.1 virginica 7.2 3.0 5.8 1.6 virginica 7.4 2.8 6.1 1.9 virginica 7.9 3.8 6.4 2.0 virginica 6.4 2.8 5.6 2.2 virginica 6.3 2.8 5.1 1.5 virginica 6.1 2.6 5.6 1.4 virginica 7.7 3.0 6.1 2.3 virginica 6.3 3.4 5.6 2.4 virginica 6.4 3.1 5.5 1.8 virginica 6.0 3.0 4.8 1.8 virginica 6.9 3.1 5.4 2.1 virginica 6.7 3.1 5.6 2.4 virginica 6.9 3.1 5.1 2.3 virginica 5.8 2.7 5.1 1.9 virginica 6.8 3.2 5.9 2.3 virginica 6.7 3.3 5.7 2.5 virginica 6.7 3.0 5.2 2.3 virginica 6.3 2.5 5.0 1.9 virginica 6.5 3.0 5.2 2.0 virginica 6.2 3.4 5.4 2.3 virginica 5.9 3.0 5.1 1.8 virginica class(dd) ## [1] &quot;data.frame&quot; # criamos uma lista simples v1 ## [1] 1 2 3 4 5 6 7 8 9 10 v2 ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; mm 1 4 7 2 5 8 3 6 9 dd Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.4 3.4 1.7 0.2 setosa 5.1 3.7 1.5 0.4 setosa 4.6 3.6 1.0 0.2 setosa 5.1 3.3 1.7 0.5 setosa 4.8 3.4 1.9 0.2 setosa 5.0 3.0 1.6 0.2 setosa 5.0 3.4 1.6 0.4 setosa 5.2 3.5 1.5 0.2 setosa 5.2 3.4 1.4 0.2 setosa 4.7 3.2 1.6 0.2 setosa 4.8 3.1 1.6 0.2 setosa 5.4 3.4 1.5 0.4 setosa 5.2 4.1 1.5 0.1 setosa 5.5 4.2 1.4 0.2 setosa 4.9 3.1 1.5 0.2 setosa 5.0 3.2 1.2 0.2 setosa 5.5 3.5 1.3 0.2 setosa 4.9 3.6 1.4 0.1 setosa 4.4 3.0 1.3 0.2 setosa 5.1 3.4 1.5 0.2 setosa 5.0 3.5 1.3 0.3 setosa 4.5 2.3 1.3 0.3 setosa 4.4 3.2 1.3 0.2 setosa 5.0 3.5 1.6 0.6 setosa 5.1 3.8 1.9 0.4 setosa 4.8 3.0 1.4 0.3 setosa 5.1 3.8 1.6 0.2 setosa 4.6 3.2 1.4 0.2 setosa 5.3 3.7 1.5 0.2 setosa 5.0 3.3 1.4 0.2 setosa 7.0 3.2 4.7 1.4 versicolor 6.4 3.2 4.5 1.5 versicolor 6.9 3.1 4.9 1.5 versicolor 5.5 2.3 4.0 1.3 versicolor 6.5 2.8 4.6 1.5 versicolor 5.7 2.8 4.5 1.3 versicolor 6.3 3.3 4.7 1.6 versicolor 4.9 2.4 3.3 1.0 versicolor 6.6 2.9 4.6 1.3 versicolor 5.2 2.7 3.9 1.4 versicolor 5.0 2.0 3.5 1.0 versicolor 5.9 3.0 4.2 1.5 versicolor 6.0 2.2 4.0 1.0 versicolor 6.1 2.9 4.7 1.4 versicolor 5.6 2.9 3.6 1.3 versicolor 6.7 3.1 4.4 1.4 versicolor 5.6 3.0 4.5 1.5 versicolor 5.8 2.7 4.1 1.0 versicolor 6.2 2.2 4.5 1.5 versicolor 5.6 2.5 3.9 1.1 versicolor 5.9 3.2 4.8 1.8 versicolor 6.1 2.8 4.0 1.3 versicolor 6.3 2.5 4.9 1.5 versicolor 6.1 2.8 4.7 1.2 versicolor 6.4 2.9 4.3 1.3 versicolor 6.6 3.0 4.4 1.4 versicolor 6.8 2.8 4.8 1.4 versicolor 6.7 3.0 5.0 1.7 versicolor 6.0 2.9 4.5 1.5 versicolor 5.7 2.6 3.5 1.0 versicolor 5.5 2.4 3.8 1.1 versicolor 5.5 2.4 3.7 1.0 versicolor 5.8 2.7 3.9 1.2 versicolor 6.0 2.7 5.1 1.6 versicolor 5.4 3.0 4.5 1.5 versicolor 6.0 3.4 4.5 1.6 versicolor 6.7 3.1 4.7 1.5 versicolor 6.3 2.3 4.4 1.3 versicolor 5.6 3.0 4.1 1.3 versicolor 5.5 2.5 4.0 1.3 versicolor 5.5 2.6 4.4 1.2 versicolor 6.1 3.0 4.6 1.4 versicolor 5.8 2.6 4.0 1.2 versicolor 5.0 2.3 3.3 1.0 versicolor 5.6 2.7 4.2 1.3 versicolor 5.7 3.0 4.2 1.2 versicolor 5.7 2.9 4.2 1.3 versicolor 6.2 2.9 4.3 1.3 versicolor 5.1 2.5 3.0 1.1 versicolor 5.7 2.8 4.1 1.3 versicolor 6.3 3.3 6.0 2.5 virginica 5.8 2.7 5.1 1.9 virginica 7.1 3.0 5.9 2.1 virginica 6.3 2.9 5.6 1.8 virginica 6.5 3.0 5.8 2.2 virginica 7.6 3.0 6.6 2.1 virginica 4.9 2.5 4.5 1.7 virginica 7.3 2.9 6.3 1.8 virginica 6.7 2.5 5.8 1.8 virginica 7.2 3.6 6.1 2.5 virginica 6.5 3.2 5.1 2.0 virginica 6.4 2.7 5.3 1.9 virginica 6.8 3.0 5.5 2.1 virginica 5.7 2.5 5.0 2.0 virginica 5.8 2.8 5.1 2.4 virginica 6.4 3.2 5.3 2.3 virginica 6.5 3.0 5.5 1.8 virginica 7.7 3.8 6.7 2.2 virginica 7.7 2.6 6.9 2.3 virginica 6.0 2.2 5.0 1.5 virginica 6.9 3.2 5.7 2.3 virginica 5.6 2.8 4.9 2.0 virginica 7.7 2.8 6.7 2.0 virginica 6.3 2.7 4.9 1.8 virginica 6.7 3.3 5.7 2.1 virginica 7.2 3.2 6.0 1.8 virginica 6.2 2.8 4.8 1.8 virginica 6.1 3.0 4.9 1.8 virginica 6.4 2.8 5.6 2.1 virginica 7.2 3.0 5.8 1.6 virginica 7.4 2.8 6.1 1.9 virginica 7.9 3.8 6.4 2.0 virginica 6.4 2.8 5.6 2.2 virginica 6.3 2.8 5.1 1.5 virginica 6.1 2.6 5.6 1.4 virginica 7.7 3.0 6.1 2.3 virginica 6.3 3.4 5.6 2.4 virginica 6.4 3.1 5.5 1.8 virginica 6.0 3.0 4.8 1.8 virginica 6.9 3.1 5.4 2.1 virginica 6.7 3.1 5.6 2.4 virginica 6.9 3.1 5.1 2.3 virginica 5.8 2.7 5.1 1.9 virginica 6.8 3.2 5.9 2.3 virginica 6.7 3.3 5.7 2.5 virginica 6.7 3.0 5.2 2.3 virginica 6.3 2.5 5.0 1.9 virginica 6.5 3.0 5.2 2.0 virginica 6.2 3.4 5.4 2.3 virginica 5.9 3.0 5.1 1.8 virginica ml &lt;- list(v1, v2, mm, dd) class(ml) # deve ser lista ## [1] &quot;list&quot; length(ml) # número de elementos ## [1] 4 names(ml) # os elementos dessa lista não tem nome ## NULL str(ml) # veja a estrutura do objeto ## List of 4 ## $ : int [1:10] 1 2 3 4 5 6 7 8 9 10 ## $ : chr [1:26] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ... ## $ : int [1:3, 1:3] 1 2 3 4 5 6 7 8 9 ## $ :&#39;data.frame&#39;: 150 obs. of 5 variables: ## ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## ..$ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ml[[1]] # o elemento 1 é o vetor ## [1] 1 2 3 4 5 6 7 8 9 10 ml[[2]] # o segundo também ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; ml[[1:2]] # note que retorna apenas o segundo... nao funciona como vetor para pegar mais de um elemento, pois a estrutura é complexa ## [1] 2 ml[[1]][3] # terceiro elemento do vetor que está no elemento 1 da lista ## [1] 3 ml[[3]] # é uma matrix 1 4 7 2 5 8 3 6 9 ml[[3]][1, 3] # valor da primeira linha e da terceira coluna da matrix que o objeto 2 da lista ## [1] 7 ml[[4]] # é uma data.frame Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.4 3.4 1.7 0.2 setosa 5.1 3.7 1.5 0.4 setosa 4.6 3.6 1.0 0.2 setosa 5.1 3.3 1.7 0.5 setosa 4.8 3.4 1.9 0.2 setosa 5.0 3.0 1.6 0.2 setosa 5.0 3.4 1.6 0.4 setosa 5.2 3.5 1.5 0.2 setosa 5.2 3.4 1.4 0.2 setosa 4.7 3.2 1.6 0.2 setosa 4.8 3.1 1.6 0.2 setosa 5.4 3.4 1.5 0.4 setosa 5.2 4.1 1.5 0.1 setosa 5.5 4.2 1.4 0.2 setosa 4.9 3.1 1.5 0.2 setosa 5.0 3.2 1.2 0.2 setosa 5.5 3.5 1.3 0.2 setosa 4.9 3.6 1.4 0.1 setosa 4.4 3.0 1.3 0.2 setosa 5.1 3.4 1.5 0.2 setosa 5.0 3.5 1.3 0.3 setosa 4.5 2.3 1.3 0.3 setosa 4.4 3.2 1.3 0.2 setosa 5.0 3.5 1.6 0.6 setosa 5.1 3.8 1.9 0.4 setosa 4.8 3.0 1.4 0.3 setosa 5.1 3.8 1.6 0.2 setosa 4.6 3.2 1.4 0.2 setosa 5.3 3.7 1.5 0.2 setosa 5.0 3.3 1.4 0.2 setosa 7.0 3.2 4.7 1.4 versicolor 6.4 3.2 4.5 1.5 versicolor 6.9 3.1 4.9 1.5 versicolor 5.5 2.3 4.0 1.3 versicolor 6.5 2.8 4.6 1.5 versicolor 5.7 2.8 4.5 1.3 versicolor 6.3 3.3 4.7 1.6 versicolor 4.9 2.4 3.3 1.0 versicolor 6.6 2.9 4.6 1.3 versicolor 5.2 2.7 3.9 1.4 versicolor 5.0 2.0 3.5 1.0 versicolor 5.9 3.0 4.2 1.5 versicolor 6.0 2.2 4.0 1.0 versicolor 6.1 2.9 4.7 1.4 versicolor 5.6 2.9 3.6 1.3 versicolor 6.7 3.1 4.4 1.4 versicolor 5.6 3.0 4.5 1.5 versicolor 5.8 2.7 4.1 1.0 versicolor 6.2 2.2 4.5 1.5 versicolor 5.6 2.5 3.9 1.1 versicolor 5.9 3.2 4.8 1.8 versicolor 6.1 2.8 4.0 1.3 versicolor 6.3 2.5 4.9 1.5 versicolor 6.1 2.8 4.7 1.2 versicolor 6.4 2.9 4.3 1.3 versicolor 6.6 3.0 4.4 1.4 versicolor 6.8 2.8 4.8 1.4 versicolor 6.7 3.0 5.0 1.7 versicolor 6.0 2.9 4.5 1.5 versicolor 5.7 2.6 3.5 1.0 versicolor 5.5 2.4 3.8 1.1 versicolor 5.5 2.4 3.7 1.0 versicolor 5.8 2.7 3.9 1.2 versicolor 6.0 2.7 5.1 1.6 versicolor 5.4 3.0 4.5 1.5 versicolor 6.0 3.4 4.5 1.6 versicolor 6.7 3.1 4.7 1.5 versicolor 6.3 2.3 4.4 1.3 versicolor 5.6 3.0 4.1 1.3 versicolor 5.5 2.5 4.0 1.3 versicolor 5.5 2.6 4.4 1.2 versicolor 6.1 3.0 4.6 1.4 versicolor 5.8 2.6 4.0 1.2 versicolor 5.0 2.3 3.3 1.0 versicolor 5.6 2.7 4.2 1.3 versicolor 5.7 3.0 4.2 1.2 versicolor 5.7 2.9 4.2 1.3 versicolor 6.2 2.9 4.3 1.3 versicolor 5.1 2.5 3.0 1.1 versicolor 5.7 2.8 4.1 1.3 versicolor 6.3 3.3 6.0 2.5 virginica 5.8 2.7 5.1 1.9 virginica 7.1 3.0 5.9 2.1 virginica 6.3 2.9 5.6 1.8 virginica 6.5 3.0 5.8 2.2 virginica 7.6 3.0 6.6 2.1 virginica 4.9 2.5 4.5 1.7 virginica 7.3 2.9 6.3 1.8 virginica 6.7 2.5 5.8 1.8 virginica 7.2 3.6 6.1 2.5 virginica 6.5 3.2 5.1 2.0 virginica 6.4 2.7 5.3 1.9 virginica 6.8 3.0 5.5 2.1 virginica 5.7 2.5 5.0 2.0 virginica 5.8 2.8 5.1 2.4 virginica 6.4 3.2 5.3 2.3 virginica 6.5 3.0 5.5 1.8 virginica 7.7 3.8 6.7 2.2 virginica 7.7 2.6 6.9 2.3 virginica 6.0 2.2 5.0 1.5 virginica 6.9 3.2 5.7 2.3 virginica 5.6 2.8 4.9 2.0 virginica 7.7 2.8 6.7 2.0 virginica 6.3 2.7 4.9 1.8 virginica 6.7 3.3 5.7 2.1 virginica 7.2 3.2 6.0 1.8 virginica 6.2 2.8 4.8 1.8 virginica 6.1 3.0 4.9 1.8 virginica 6.4 2.8 5.6 2.1 virginica 7.2 3.0 5.8 1.6 virginica 7.4 2.8 6.1 1.9 virginica 7.9 3.8 6.4 2.0 virginica 6.4 2.8 5.6 2.2 virginica 6.3 2.8 5.1 1.5 virginica 6.1 2.6 5.6 1.4 virginica 7.7 3.0 6.1 2.3 virginica 6.3 3.4 5.6 2.4 virginica 6.4 3.1 5.5 1.8 virginica 6.0 3.0 4.8 1.8 virginica 6.9 3.1 5.4 2.1 virginica 6.7 3.1 5.6 2.4 virginica 6.9 3.1 5.1 2.3 virginica 5.8 2.7 5.1 1.9 virginica 6.8 3.2 5.9 2.3 virginica 6.7 3.3 5.7 2.5 virginica 6.7 3.0 5.2 2.3 virginica 6.3 2.5 5.0 1.9 virginica 6.5 3.0 5.2 2.0 virginica 6.2 3.4 5.4 2.3 virginica 5.9 3.0 5.1 1.8 virginica ml[[4]][, 1] # a primeira coluna deste data.frame ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 ## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 ml[[4]]$Sepal.Length # mesma coisa ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 ## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 # uma lista pode conter listas mll &lt;- list(list(v1, v2), mm, dd) # o primeiro elemento virou uma lista com dois vetores class(mll[[1]]) # é uma lista agora ## [1] &quot;list&quot; mll[[1]][[1]] # a sublista 1 do elemento 1 da lista ## [1] 1 2 3 4 5 6 7 8 9 10 mll[[1]][[2]] # a sublista 2 do elemento 1 da lista ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # criamos uma lista com nomes ml &lt;- list(VETOR1 = v1, MATRIZ = mm, TABELA = dd) class(ml) ## [1] &quot;list&quot; str(ml) ## List of 3 ## $ VETOR1: int [1:10] 1 2 3 4 5 6 7 8 9 10 ## $ MATRIZ: int [1:3, 1:3] 1 2 3 4 5 6 7 8 9 ## $ TABELA:&#39;data.frame&#39;: 150 obs. of 5 variables: ## ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## ..$ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... names(ml) # nome dos elementos ## [1] &quot;VETOR1&quot; &quot;MATRIZ&quot; &quot;TABELA&quot; ml[[&quot;VETOR1&quot;]] ## [1] 1 2 3 4 5 6 7 8 9 10 ml$VETOR1 # ou assim, da mesma forma que uma coluna de um data.frame ## [1] 1 2 3 4 5 6 7 8 9 10 ml[[&quot;TABELA&quot;]][, &quot;Sepal.Length&quot;] # coluna do data.frame em TABELA ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 ## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 ml[[&quot;TABELA&quot;]]$Sepal.Length # idem ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 ## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 ml$TABELA$Sepal.Length # idem também ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 ## [19] 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 ## [37] 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 ## [55] 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 ## [73] 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 ## [91] 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 ## [109] 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0 6.9 5.6 7.7 6.3 6.7 7.2 ## [127] 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 ## [145] 6.7 6.7 6.3 6.5 6.2 5.9 "],["obj-complexos.html", "4.2 Objetos complexos", " 4.2 Objetos complexos Em alguns casos como, por exemplo, em arquivos de dados espaciais (shapefiles), que apresentam estruturas complexas que incluem as especificações dos polígonos, pontos ou linhas, a projeção espacial e os dados associados, exige-se um objeto que possua uma estrutura de complexidade similar. Nestes casos, é importante que você conheça o operador @, que permite extrair elementos desses objetos. Em alguns casos você terá que usá-lo para entender o objeto ou para pegar elementos dos mesmos objetos. A função slotNames() permite ver os elementos que podem ser extraídos com o operador @. Abaixo mostramos um exemplo através de um mapa dos municípios brasileiros. Para isso, vamos precisar baixar um arquivo (https://github.com/LABOTAM/IntroR/blob/main/dados/municipiosshape.zip). Baixe este arquivo comprimido que contem os arquivos de um único shapefile. Descomprima-o na sua pasta de trabalho e você perceberá que haverá vários arquivos associados. Para trabalhar com esses arquivos, vamos utilizar os pacotes maps (Brownrigg 2018) e rgdal (Bivand, Keitt, e Rowlingson 2020). # vamos precisar de dois pacotes para dados espaciais # se não tiver instalado, instale com as dependencias # install.packages(c(&quot;maps&quot;, &quot;rgdal&quot;), dependencies = TRUE) library(&quot;maps&quot;) library(&quot;rgdal&quot;) # agora mudem o diretorio para pasta que contem os arquivos shape # lembre que voces podem tanto utilizar a funcao `setwd()` quanto clicar em Ferramentas/Tools na barra de opcoes do RStudio para mudar o diretorio de trabalho dir(pattern = &quot;shp&quot;) # lista arquivos shape na pasta # veja o help da função para ler shapefiles ?readOGR # le o shape file com objeto espacial no R mp &lt;- readOGR(dsn = &quot;MUNICIPIOS.shp&quot;, layer = &quot;MUNICIPIOS&quot;, encoding = &quot;UTF-8&quot;) plot(mp) # veja o mapa class(mp) # é um objeto de classe SpatialPolygonsDataFrame str(mp) # a estrutura é complexa # tem elementos definidos por $, que interpretado diretamente, é corresponde a um data.frame que é o dado associado à cada polígono no arquivo (attribute table do shapefile). names(mp) mp$NOME_MUNI dim(mp) # tem elementos definidos por @ # ver o help da função # ?slot # slotNames(mp) #lista quais são esses elementos mp@data # é o mesmo data.frame que é automaticamente reconhecido na expressão acima dim(mp) == dim(mp@data) names(mp) == names(mp@data) # area do mapa dos municipios (os limites em latitude e longitude da área) mp@bbox plot(mp@bbox) # adicionamos o mapa mundi sobre isso map(add = T) # mp@polygons define cada poligono individualmente numa lista class(mp@polygons) mp@polygons[[1]] # um elemento qualquer class(mp@polygons[[1]]) str(mp@polygons[[1]]) # veja que este objeto tem vários elementos definidos por @ # slotNames(mp@polygons[[1]]) #slots desse objeto mp@polygons[[1]]@labpt # o centroid do polígono 1 que é o municipio de: mp@data$NOME_MUNI[1] # Chuí # qual elemento é manaus? gp &lt;- grep(&quot;Manaus&quot;, mp@data$NOME_MUNI) # pega o polígono de manaus manaus &lt;- mp@polygons[[gp]] class(manaus) str(manaus) # plota manaus # dev.off() #fecha dispositivos gráficos podes precisar disso map(xlim = mp@bbox[&quot;x&quot;, ], ylim = mp@bbox[&quot;y&quot;, ]) polygon(manaus@Polygons[[1]]@coords, col = &quot;red&quot;) # centroides do poligono de manaus ctro &lt;- manaus@Polygons[[1]]@labpt ctro[2] &lt;- ctro[2] + 1.5 # adiciona 1.5 graus na latitude para não plotar sobre o poligono do municipio # plota no nome text(x = ctro[1], y = ctro[2], labels = &quot;Manaus&quot;, cex = 0.8) Referências "],["func-graf.html", "Capítulo 5 Funções gráficas ", " Capítulo 5 Funções gráficas "],["dispositivos-gráficos.html", "5.1 Dispositivos Gráficos", " 5.1 Dispositivos Gráficos Existem dois principais tipos de dispositivos (Devices) gráficos no R que basicamente significam onde você imprimirá um gráfico ou figura. Isso pode ocorrer: Na tela do computador (monitor), ou seja, em janelas do R ou do RStudio onde você visualiza gráficos; Em um arquivo em formato .pdf, .jpeg, .tiff, .png, .eps etc. 5.1.1 Função plot() A função plot() (ou plot.default()) é a principal função genérica para gerar gráficos no R. Veremos isso com mais detalhes na seção Funções gráficas de alto nível. Aqui demonstraremos o uso da função simplificadamente para facilitar as demais explicações. Entenda que geramos gráficos com essa função. Vamos a um exemplo muito simples: # o objeto R do iris como exemplo str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... # plotando comprimento de sépala vs. comprimento de pétalas e colorindo os pontos de acordo com as espécies vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] # cria um vetor de cores para cada linha em Iris segundo especie # plota a figura plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) Muitos argumentos da função plot() são parâmetros gráficos (Seções 5.2 e 5.3). 5.1.2 Dispositivos de Tela Quando você usa funções para gerar um gráfico, o R ou RStudio usa automaticamente um dispositivo de tela. No entanto, você pode abrir novas janelas com as seguintes funções: X11() ou x11() funcionam no Mac, Linux e Windows; quartz() funciona apenas no Mac; windows() funciona apenas no Windows. ?device # veja o help da função e as opções de devices X11() # irá abrir uma janela nova # vamos plotar o mesmo gráfico do exercício anterior vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] # cria um vetor de cores para cada linha em Iris segundo especie # plota a figura plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) # irá fechar essa nova janela dev.off() quartz() # num mac abre uma janela sem dar nenhum aviso (funciona melhor que X11() no Mac) vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] # cria um vetor de cores para cada linha em Iris segundo especie # plota a figura plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) dev.off() # fecha 5.1.3 Listar e controlar dispositivos Existem funções que permitem trabalhar com vários dispositivos ao mesmo tempo, controlando o uso dos dispositivos abertos. Pode haver, por exemplo, várias janelas diferentes mostrando gráficos diferentes durante um trabalho. As principais funções para trabalhar com dispositivos são: A função dev.list()lista todos os dispositivos abertos no momento (geralmente o dispositivo padrão, que é sempre o número 1, é ignorado na lista), retornando o número (ordem de abertura) e o nome de cada um; dev.cur() mostra qual o dispositivo que está ativo (em inglês, current). Se há vários abertos, haverá sempre um que estará ativo naquele momento e se você enviar uma figura, ela sairá neste dispositivo; dev.set() torna ativo um determinado dispositivo; dev.off() fecha o dispositivo atual ou vários. Esta é a função dessa lista que é a mais usada na prática. # vamos primeiro fechar todos os dispositivos dev.off(which = dev.list()) dev.list() # vai retornar NULL por não há dispositivos abertos # vamos abrir vários dispositivos X11() # primeira janela extra X11() # segunda janela e mesma figura com cores diferentes X11() # terceira janela e mesma figura com cores diferentes # coloque e redimensione as janelas para ter as tres visiveis na tua tela e volte aqui. # veja os dispositivos abertos dev.list() # qual o atual dev.cur() # o ultimo que abrimos, né dev.set(2) # vamos mudar para o segundo e plotar algo plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, cex = 0.8) # vamos mudar para o terceiro e plotar outra coisa dev.set(3) dev.cur() # deve responder 3 vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) # vamos mudar para o quarto e plotar a mesma coisa com outras cores dev.set(4) dev.cur() # deve responder 4 vcl &lt;- c(&quot;red&quot;, &quot;blue&quot;, &quot;white&quot;)[as.numeric(iris$Species)] plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) # vamos fechar o dispositivo atual dev.cur() dev.off() dev.cur() # mudou automaticamente porque voce fechou o 4 dev.off() # mesma coisa fechou o ativo dev.cur() # sobrou o 3 # fechar este também dev.off() dev.list() # nao tem mais nenhum aberto 5.1.4 Dispositivos de arquivos Há vários dispositivos para gerar arquivos com imagens. As funções em geral têm o nome do tipo de arquivo gerado. Vamos ver dois exemplos apenas, mas a mesma lógica se aplica a qualquer um dos dispositivos listados no ? dos dispositivos (execute o comando help('device') e veja a explicação sobre os dispositivos (devices)). Essas funções são ótimas ferramentas para incluir nos seus scripts visando a produção de figuras para uma publicação. Procure na revista em que você deseja publicar seu artigo as especificações técnicas das figuras. Em seguida, cheque os parâmetros das funções gráficas (Seções 5.2 e 5.3) para você ser capaz de gerar figuras na especificação exata da revista selecionada. 5.1.5 Figuras vetoriais em pdf ou postscript Em nossa opinião, as funções pdf() e postscript() são as mais importantes para a geração de figuras, porque elas geram arquivos de excelente qualidade por serem vetoriais. Não há a necessidade de se definir a resolução, porque nesse tipo de imagem isso não existe. # plotando a figura na tela é o que fazemos normalmente vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) # salvando a figura num PDF ?pdf # veja o help dessa função e seus argumentos, especialmente width e height # abre o dispositivo para pdf pdf(file = &quot;meupdf.pdf&quot;, width = lcm(15), height = lcm(10)) # lcm() apenas pega valores em cm e converte em polegadas que é a especificação padrão da funcao pdf. Portanto largura e altura de cada página do PDF é definida por esses argumentos # plota a figura plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) dev.off() # fecha o pdf # só será possível ver o pdf se tiver fechado ele. getwd() # o pdf foi gerado nessa pasta # se voce incluir vários gráficos. O pdf irá gerar várias páginas ao mesmo tempo. # abre o dispositivo para pdf pdf(file = &quot;meupdf2.pdf&quot;, paper = &quot;a4&quot;) # tamanho papel A4 # plota a figura 10 vezes for (i in 1:10) { plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) } dev.off() # fecha o pdf # veja que o arquivo 2 tem várias páginas 5.1.6 Figuras raster As funções jpeg(), png() e tiff() geram imagens em pixels, cuja qualidade depende muito da definição da resolução. # formato jpeg sem controlar a resolucao (usando units=&#39;px&#39; ou pixel) # abre o dispositivo no formato desejado jpeg(filename = &quot;meujpeg.jpg&quot;, width = 600, height = 400, units = &quot;px&quot;) # plota alguma coisa vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) # fecha o jpeg dev.off() # ABRA O ARQUIVO E FAÇA UM ZOOM GRANDE # note que os pixels são super visíveis # AGORA MELHORANDO A RESOLUCAO # formato jpeg com 300dpi # abre o dispositivo no formato desejado jpeg(filename = &quot;meujpeg2.jpg&quot;, width = 15, height = 10, units = &quot;cm&quot;, res = 300) # plota alguma coisa vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)] plot(iris$Sepal.Length, iris$Petal.Length, type = &quot;p&quot;, pch = 21, bg = vcl, cex = 0.8) # fecha o jpeg dev.off() DICA: Abra os três arquivos e compare a resolução deles, ampliando a imagem até visualizar o pixel. Note que em um pdf você nunca verá o pixel. Por isso, recomendamos que vocÊ trabalhe sempre com a função pdf(). "],["par-graficos-p1.html", "5.2 Parâmetros gráficos, parte I - Margem, fonte, proporções", " 5.2 Parâmetros gráficos, parte I - Margem, fonte, proporções Para fazer boas figuras no R, você precisa muitas vezes controlar parâmetros gráficos dos dispositivos, como margem da figura, tamanho de fonte, tipo da fonte, distância das legendas dos eixos x e y, se essas legendas são horizontais ou verticais, o tipo símbolos dos pontos, as cores dos simbolos etc. Você pode definir esses parâmetros diretamente nas funções gráficas de alto-nível highlevel plot&gt; (..., &lt;tag&gt; = &lt;value&gt;), onde um valor (value) de um parâmetro (tag) pode ser adicionado diretamente como argumento de uma função de alto-nível. Alguns desses parâmetros, no entanto, só podem ser definidos através da função par(), que também define parâmetros gráficos globais, isto é, se você alterar os parâmetros através dessa função, isso será alterado para todos os gráficos que forem abertos posteriormente durante a mesma sessão do R. Esta mesma função também permite visualizar os parâmetros gráficos. Leia atentamente o ? da função par(). Você pode salvar os parâmetros globais antes de alterá-los. ?par # veja o help dessa função # você pode ver os parâmetros padrão: par() # vejo todos os parâmetros ## $xlog ## [1] FALSE ## ## $ylog ## [1] FALSE ## ## $adj ## [1] 0.5 ## ## $ann ## [1] TRUE ## ## $ask ## [1] FALSE ## ## $bg ## [1] &quot;transparent&quot; ## ## $bty ## [1] &quot;o&quot; ## ## $cex ## [1] 1 ## ## $cex.axis ## [1] 1 ## ## $cex.lab ## [1] 1 ## ## $cex.main ## [1] 1.2 ## ## $cex.sub ## [1] 1 ## ## $cin ## [1] 0.15 0.20 ## ## $col ## [1] &quot;black&quot; ## ## $col.axis ## [1] &quot;black&quot; ## ## $col.lab ## [1] &quot;black&quot; ## ## $col.main ## [1] &quot;black&quot; ## ## $col.sub ## [1] &quot;black&quot; ## ## $cra ## [1] 10.8 14.4 ## ## $crt ## [1] 0 ## ## $csi ## [1] 0.2 ## ## $cxy ## [1] 0.02604167 0.06329114 ## ## $din ## [1] 7 5 ## ## $err ## [1] 0 ## ## $family ## [1] &quot;&quot; ## ## $fg ## [1] &quot;black&quot; ## ## $fig ## [1] 0 1 0 1 ## ## $fin ## [1] 7 5 ## ## $font ## [1] 1 ## ## $font.axis ## [1] 1 ## ## $font.lab ## [1] 1 ## ## $font.main ## [1] 2 ## ## $font.sub ## [1] 1 ## ## $lab ## [1] 5 5 7 ## ## $las ## [1] 0 ## ## $lend ## [1] &quot;round&quot; ## ## $lheight ## [1] 1 ## ## $ljoin ## [1] &quot;round&quot; ## ## $lmitre ## [1] 10 ## ## $lty ## [1] &quot;solid&quot; ## ## $lwd ## [1] 1 ## ## $mai ## [1] 1.02 0.82 0.82 0.42 ## ## $mar ## [1] 5.1 4.1 4.1 2.1 ## ## $mex ## [1] 1 ## ## $mfcol ## [1] 1 1 ## ## $mfg ## [1] 1 1 1 1 ## ## $mfrow ## [1] 1 1 ## ## $mgp ## [1] 3 1 0 ## ## $mkh ## [1] 0.001 ## ## $new ## [1] FALSE ## ## $oma ## [1] 0 0 0 0 ## ## $omd ## [1] 0 1 0 1 ## ## $omi ## [1] 0 0 0 0 ## ## $page ## [1] TRUE ## ## $pch ## [1] 1 ## ## $pin ## [1] 5.76 3.16 ## ## $plt ## [1] 0.1171429 0.9400000 0.2040000 0.8360000 ## ## $ps ## [1] 12 ## ## $pty ## [1] &quot;m&quot; ## ## $smo ## [1] 1 ## ## $srt ## [1] 0 ## ## $tck ## [1] NA ## ## $tcl ## [1] -0.5 ## ## $usr ## [1] 0 1 0 1 ## ## $xaxp ## [1] 0 1 5 ## ## $xaxs ## [1] &quot;r&quot; ## ## $xaxt ## [1] &quot;s&quot; ## ## $xpd ## [1] FALSE ## ## $yaxp ## [1] 0 1 5 ## ## $yaxs ## [1] &quot;r&quot; ## ## $yaxt ## [1] &quot;s&quot; ## ## $ylbias ## [1] 0.2 op &lt;- par() # pego todos os parâmetros class(op) # isso é uma lista ## [1] &quot;list&quot; names(op) # esses são os nomes dos parâmetros ## [1] &quot;xlog&quot; &quot;ylog&quot; &quot;adj&quot; &quot;ann&quot; &quot;ask&quot; &quot;bg&quot; ## [7] &quot;bty&quot; &quot;cex&quot; &quot;cex.axis&quot; &quot;cex.lab&quot; &quot;cex.main&quot; &quot;cex.sub&quot; ## [13] &quot;cin&quot; &quot;col&quot; &quot;col.axis&quot; &quot;col.lab&quot; &quot;col.main&quot; &quot;col.sub&quot; ## [19] &quot;cra&quot; &quot;crt&quot; &quot;csi&quot; &quot;cxy&quot; &quot;din&quot; &quot;err&quot; ## [25] &quot;family&quot; &quot;fg&quot; &quot;fig&quot; &quot;fin&quot; &quot;font&quot; &quot;font.axis&quot; ## [31] &quot;font.lab&quot; &quot;font.main&quot; &quot;font.sub&quot; &quot;lab&quot; &quot;las&quot; &quot;lend&quot; ## [37] &quot;lheight&quot; &quot;ljoin&quot; &quot;lmitre&quot; &quot;lty&quot; &quot;lwd&quot; &quot;mai&quot; ## [43] &quot;mar&quot; &quot;mex&quot; &quot;mfcol&quot; &quot;mfg&quot; &quot;mfrow&quot; &quot;mgp&quot; ## [49] &quot;mkh&quot; &quot;new&quot; &quot;oma&quot; &quot;omd&quot; &quot;omi&quot; &quot;page&quot; ## [55] &quot;pch&quot; &quot;pin&quot; &quot;plt&quot; &quot;ps&quot; &quot;pty&quot; &quot;smo&quot; ## [61] &quot;srt&quot; &quot;tck&quot; &quot;tcl&quot; &quot;usr&quot; &quot;xaxp&quot; &quot;xaxs&quot; ## [67] &quot;xaxt&quot; &quot;xpd&quot; &quot;yaxp&quot; &quot;yaxs&quot; &quot;yaxt&quot; &quot;ylbias&quot; # a função par permite ver os valores atualmente definidos par(&quot;family&quot;) # tipo de fonte nao tem ## [1] &quot;&quot; par(&quot;mar&quot;) # margens da figura em número de linhas ## [1] 5.1 4.1 4.1 2.1 # a função para tem apenas 1 argumento além dos parâmetros gráficos op2 &lt;- par(no.readonly = TRUE) class(op2) ## [1] &quot;list&quot; # a diferença entre especificar no.readonly como verdadeiro (na primeria opção não especificada acima, o padrão é FALSE) # é que a lista gerada pode ser usada para refazer alterações, ou seja, para resgatar os parâmetros gráficos padrão. # ou seja, posso fazer: par(op2) # para resgatar valores originais # mas não posso fazer o mesmo com a primeira opção par(op) # porque op é uma lista diferente length(op) == length(op2) # tem comprimentos diferentes ## [1] FALSE identical(op, op2) # nao são identicas ## [1] FALSE 5.2.1 Margem da figura # Usando novamente o exemplo de iris Sepalas &lt;- iris$Sepal.Length Petalas &lt;- iris$Petal.Length # especies como números spp &lt;- as.numeric(as.factor(iris$Species)) # uma cor para cada espécie vcl &lt;- c(&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;)[spp] # um simbolo para cada espécie sbs &lt;- c(21, 22, 23)[spp] # plota a figura no dispositivo padrão plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8 ) # ALTERANDO A MARGEM em NUMEROS DE LINHAS # salva o valor padrao para resgatar ao final op &lt;- par(no.readonly = TRUE) op$mar # esses são os valor atuais para Margem Inferior, Esquerda, Superior e Direita, respectivamente. #quando se referir a margem todos os parâmetros seguem a ordem ANTI-HORÁRIA iniciando na margem inferior ## [1] 5.1 4.1 4.1 2.1 # reduzindo as margem direita e superior em número de linhas par(mar = c(5, 4, 1, 0.5)) plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8 ) # voltando ao original par(mar = op$mar) 5.2.2 Aspecto dos eixos op &lt;- par(no.readonly = TRUE) # POSICAO DAS LEGENDAS DOS EIXOS par(&quot;mgp&quot;) # três valores que correspondem ao número de linhas para: (1) Titulo dos Eixos; (2) valores dos eixos; (3) linha dos eixos # TAMANHO DE FONTE DOS EIXOS É RELATIVO AO VALOR DE FONTE PADRÃO par(&quot;cex&quot;) # tamanho padrão par(&quot;cex.lab&quot;) # número que multiplicado por op$cex indica o valor da fonte dos títulos dos eixos par(&quot;cex.axis&quot;) # dos valores # TAMANHO DAS BARRAS DE CADA VALOR par(&quot;tck&quot;) # geralmente não tem padrão definido pois é extraído de outros valores automaticamente, mas você pode controlar isso # DIMINUINDO A FONTE DISSO par(cex.lab = 0.8, cex.axis = 0.7) plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # note que isso muda se eu alterar o tamanho de fonte padrão par(cex) par(cex = 2, cex.lab = 0.8, cex.axis = 0.7) plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # APROXIMANDO par(mgp = c(1.5, 0.5, 0)) plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # e agora par(tck = -0.01) # note o valor negativo plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) par(tck = 0.01) # se colocar positivo plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) par(op) # restaurando valores originais plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) 5.2.3 Proporção dos eixos op &lt;- par(no.readonly = TRUE) par(&quot;pty&quot;) # valor &quot;m&quot; maximiza a area disponível ## [1] &quot;m&quot; plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # agora mantendo a proporção dos eixos (sem esticar nenhum dos dois) par(pty = &quot;s&quot;) plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # se não notou diferença, expandir o dispositivo onde está desenhando a figura 5.2.4 Múltiplas figuras na mesma tela ou página com mfrow() e mfcol() Você pode colocar diferentes gráficos na mesma tela ou na mesma página de um pdf, por exemplo. Temos duas formas de fazer isso. Os parâmetros mfrow e mfcol dividem os dispositivo em células de tamanhos idênticos. Todas as figuras terão o mesmo tamanho. A diferença entre os dois parâmetros é que mfrow() preenche o espaço por linhas, enquanto mfcol() preenche o espaço pelas colunas. par(op) par(&quot;mfrow&quot;) # o dispositivo não está divido: tem 1 linha e 1 coluna ## [1] 1 1 plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # EXEMPLO 1 # duas figuras no mesmo dispositivo par(mfrow = c(1, 2)) # dividir o dispositivo em 1 linha e duas colunas # plota a primeira figura plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # plota a segunda sem cores plot(Sepalas, Petalas, pch = sbs, bg = NULL, cex = 0.8) # EXEMPLO 2 par(mar = c(5.1, 4.1, 2.1, 2.1)) par(mfrow = c(2, 2)) # dividir o dispositivo em 2 linha e duas colunas # plota quatro figuras identificas for (f in 1:4) { plot(Sepalas, Petalas, pch = sbs, bg = NULL, cex = 0.8) # adiciona uma letra para você ver a ordem e comparar com o exemplo 3 mtext(LETTERS[f], side = 3, line = 0, adj = 0, font = 2, col = &quot;red&quot;) # esta é uma função de baixo nível que falaremos depois } # EXEMPLO 3 par(mfcol = c(2, 2)) # mesma coisa mas preenchendo por colunas (compare com a figura acima) for (f in 1:4) { plot(Sepalas, Petalas, pch = sbs, bg = NULL, cex = 0.8) mtext(LETTERS[f], side = 3, line = 0, adj = 0, font = 2, col = &quot;red&quot;) } # colocando exemplo 2 e 3 num pdf pdf(file = &quot;meuPDFmfrow.pdf&quot;, paper = &quot;a4&quot;) # EXEMPLO 2 expandido par(mfrow = c(3, 2)) # tres linhas e duas colunas for (f in 1:6) { plot(Sepalas, Petalas, pch = sbs, bg = NULL, cex = 0.8) mtext(LETTERS[f], side = 3, line = 0, adj = 0, font = 2, col = &quot;red&quot;) } # EXEMPLO 3 expandido par(mfcol = c(3, 2)) for (f in 1:6) { plot(Sepalas, Petalas, pch = sbs, bg = NULL, cex = 0.8) mtext(LETTERS[f], side = 3, line = 0, adj = 0, font = 2, col = &quot;red&quot;) } dev.off() 5.2.5 Múltiplas figuras na mesma image usando a função layout() A função layout() também permite dividir um dispositivo para múltiplas figuras, mas de uma forma muito mais complexa. ?layout # veja o help dessa função # voce precisa definir uma matriz que indica: # 1) o numero de figuras (valores da matriz) # 2) a posição das figuras (numero de linhas e colunas) # por exemplo, suponha que queremos plotar 3 figuras: # 1 preenchendo a largura da página e metade da altura # 2 outras figuras preenchendo a outra metada da altura # neste caso a figura 1 ira ocupar dois espacos mm &lt;- matrix(c(1, 1, 2, 3), nrow = 2, ncol = 2, byrow = T) mm # a figura 1 irá ocupar a posicao do numero 1 na matriz # a figura 2 irá ocupar a posicao do numero 2 nessa matriz # a figura 3 irá ocupar a posicao do numero 3 dessa matriz # a largura de cada coluna e linha é especificada pelos argumentos widths e heights e usaremos a função lcm() para especificar isso em centímetros # divide o dispositivo ml &lt;- layout(mm, widths = rep(lcm(5), ncol(mm)), heights = rep(lcm(5), nrow(mm))) # mostra a divisao feita layout.show(ml) # plota a primeira figura plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # a segunda plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) # a terceira plot(Sepalas, Petalas, pch = sbs, bg = vcl, cex = 0.8) Podemos salvar essas figuras em um pdf: pdf(file = &quot;meuPDFlayout.pdf&quot;, paper = &quot;letter&quot;) layout(mm, widths = rep(lcm(8), ncol(mm)), heights = rep(lcm(8), nrow(mm))) # plota as tres figuras fazendo uma iteracao for (f in 1:3) { plot(Sepalas, Petalas, pch = sbs, bg = NULL, cex = 0.8) mtext(LETTERS[f], side = 3, line = 0, adj = 0, font = 2, col = &quot;red&quot;) } dev.off() # fecha o pdf "],["par-graficos-p2.html", "5.3 Parâmetros gráficos, parte II - Símbolos e cores", " 5.3 Parâmetros gráficos, parte II - Símbolos e cores Você pode fazer o que quiser na produção de um gráfico no R. Isso requer conhecer bem os parâmetros gráficos que já apresentamos de forma geral anteriormente (ver seção 5.2). Aqui apresentamos alguns parâmetros de uso comum pelas funções gráficas de alto (Seção 5.4) e baixo nível (seção 5.5), que definem símbolos e cores. Você viu isso se leu o ? da função par() e entendeu o que ela faz. Em gráficos de dispersão e/ou na necessidade de colocar qualquer símbolo em um gráfico qualquer, precisamos saber como definir símbolos, suas cores e seus tamanhos. Os parâmetros gráficos que fazem isso são principalmente os seguintes: pch - define o tipo de símbolo para pontos; lty - define o tipo de símbolo para linhas; col e bg - respectivamente definem a cor de linhas e o “recheio” do ponto de símbolos, gráficos, polígonos etc; cex - define o tamanho de símbolos e texto; lwd - espessura das linhas. 5.3.1 Tipo de símbolo - pch Nós queremos símbolos, em geral, para adicionar em um gráfico os pontos referentes às nossas unidades amostrais. Portanto, esse tipo de símbolo no R é chamado de points, e já vimos a função de baixo-nível points(), que depende desse argumento ou parâmetro. O argumento pch pode ser um número3, que especifica um símbolo, ou símbolos de um único caractere [e.g. c(\"A\", \"*\",\"&amp;\", \"?\")]. # veja o definido como parâmetro global par(&quot;pch&quot;) # o que isso quer dizer? # vamos usar a função example() ?example # se quiser saber o que isso faz # quando digitar o comando abaixo, # vai precisar RESPONDER NO CONSOLE para prosseguir. example(&quot;points&quot;) # pare na terceira figura que esse exemplo gera. par(&quot;pch&quot;) # este valor corresponde ao símbolo nessa figura. # note que os símbolos de 21:25 permitem definir cor de linha e de recheiro, os demais apenas uma única cor # vamos gerar alguns exemplos com os dados de iris class(iris) ## [1] &quot;data.frame&quot; dim(iris) ## [1] 150 5 colnames(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; # com a definicao padrão de pch par(&quot;pch&quot;) ## [1] 1 Sepalas &lt;- iris$Sepal.Length Petalas &lt;- iris$Petal.Length plot(Sepalas, Petalas) # colocando todas com um único símbolo diferente plot(Sepalas, Petalas, pch = 25) # colocando cada espécie com um único símbolo # neste caso o argumento pch deve ter um vetor do número de linhas em iris, se for menor, pela regra da reciclagem, ele irá repetir os símbolo sem estar relacionado à coluna Species, que define qual linha é de qual espécie. # então se eu definir apenas três simbolos, um para cada espécie: plot(Sepalas, Petalas, pch = c(&quot;A&quot;, &quot;&amp;&quot;, &quot;+&quot;)) # eles vao aparecer misturados, isso não está de acordo com as espécies # uma forma rápida de fazer isso, tendo em vista que o pch pode ser um valor numérico, # é transformar o nome das minhas especies em números. # Eu posso fazer isso se convertendo um fator para número, pois nele as categorias estão explicitamente definidas spp &lt;- iris$Species class(spp) # já é um fator ## [1] &quot;factor&quot; # note que isso gera muitos NAs, já vimos isso antes as.numeric(as.vector(spp)) ## Warning: NAs introduced by coercion ## [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [51] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [76] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [101] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [126] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA # mas isso gera números por spp é um fator as.numeric(spp) ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 ## [112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [149] 3 3 # então se eu quero os símbolos 22,23,25 para representar minhas espécies, eu uso esses números para pegar esses valores pelos índices de um vetor: pch.das.spp &lt;- c(21, 23, 25)[as.numeric(spp)] pch.das.spp ## [1] 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 ## [26] 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 ## [51] 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 ## [76] 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 ## [101] 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 ## [126] 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 # posso usar isso como argumento em plot: plot(Sepalas, Petalas, pch = pch.das.spp) # pronto cada espécie é um símbolo diferente 5.3.2 Tamanho dos pontos - cex O argumento genérico cex especifica o tamanho dos pontos relativo ao padrão do dispositivo. Aceita um valor numérico que é multiplicado pelo valor do seu dispositivo. O padrão geral é 1, isto é, 100% do tamanho. Se colocar 0.5 teremos 50%; se 1.5, teremos 150% do tamanho padrão. # da etapa anterior pch.das.spp &lt;- c(21, 23, 25)[as.numeric(spp)] # temos nosso gráfico com símbolos plot(Sepalas, Petalas, pch = pch.das.spp) # mudando o tamanho de todos os simbolos plot(Sepalas, Petalas, pch = pch.das.spp, cex = 0.5) # para maior plot(Sepalas, Petalas, pch = pch.das.spp, cex = 1.5) # um tamanho diferente por ponto (especie) tm &lt;- c(0.5, 1, 1.5)[as.numeric(spp)] tm ## [1] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ## [19] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ## [37] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1.0 1.0 1.0 1.0 ## [55] 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 ## [73] 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 ## [91] 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ## [109] 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ## [127] 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 ## [145] 1.5 1.5 1.5 1.5 1.5 1.5 plot(Sepalas, Petalas, pch = pch.das.spp, cex = tm) 5.3.3 Linhas Os argumentos lwd e lty controlam a espessura e o tipo das linhas, respectivamente. data(&quot;AirPassengers&quot;) # veja esse conjunto de dados com ?datasets class(AirPassengers) ## [1] &quot;ts&quot; plot(AirPassengers, ylab = &quot;Número de Passageiros&quot;) # mudando o tipo de linha plot(AirPassengers, ylab = &quot;Número de Passageiros&quot;, lty = &quot;dotted&quot;) # outro tipo plot(AirPassengers, ylab = &quot;Número de Passageiros&quot;, lty = &quot;dotdash&quot;) # mudando a cor e espessura plot(AirPassengers, ylab = &quot;Número de Passageiros&quot;, lty = &quot;dashed&quot;, col = &quot;red&quot;, lwd = 2) 5.3.4 Cores de símbolos - col e bg O argumento col define cores para os símbolos. No caso de símbolos de uma única cor, utilizamos apenas este argumento. Já o argumento bg define as cores do preenchimento dos símbolos. # o que definimos antes são símbolos que permitem definir cores para preenchimento e linha: pch.das.spp &lt;- c(21, 23, 25)[as.numeric(spp)] # temos nosso gráfico com símbolos plot(Sepalas, Petalas, pch = pch.das.spp) # vamos adicionar as cores seguindo o mesmo raciocínio cores.spp &lt;- c(&quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;)[as.numeric(spp)] cores.spp ## [1] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; ## [9] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; ## [17] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; ## [25] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; ## [33] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; ## [41] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; ## [49] &quot;red&quot; &quot;red&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; ## [57] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; ## [65] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; ## [73] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; ## [81] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; ## [89] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; ## [97] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; ## [105] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; ## [113] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; ## [121] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; ## [129] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; ## [137] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; ## [145] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; plot(Sepalas, Petalas, pch = pch.das.spp, bg = cores.spp) # podemos mudar a cor da linha desses simbolos (todos para verde pela regra da reciclagem especifico uma única vez) plot(Sepalas, Petalas, pch = pch.das.spp, bg = cores.spp, col = &quot;green&quot;) # mudando simbolos nsb &lt;- c(&quot;*&quot;, &quot;#&quot;, &quot;+&quot;)[as.numeric(spp)] plot(Sepalas, Petalas, pch = nsb, bg = cores.spp) # note que apesar de bg estar especificando cores as cores nao foram adicionadas, porque colocamos no argumento de preenchimento. # Mudando: plot(Sepalas, Petalas, pch = nsb, col = cores.spp) 5.3.5 Funções que definem cores Cores podem ser definidas por palavras ou por códigos. As funções colors() ou colours() listam cores pelo nome. # lista todas as cores disponíveis pelo nome colors() # nossa tem 657 cores. Difícil, né? # reduz para as mais distintas colors(distinct = TRUE) # ainda 502 # eu posso pegar ou buscar por cores ascores &lt;- colors(distinct = TRUE) vl &lt;- grep(&quot;blue&quot;, ascores) ascores[vl] # 60 nomes que contém a palavra azul # vamos ver todas as coresem umpdf longo # vamos plotar pizzas coloridas com 10 cores cada # 4 pizzas por página ?pie # veja o help dessa função # abre um PDF pdf(&quot;cores.pdf&quot;, width = lcm(29), height = lcm(21)) # vamos dividir o dispositivo em 2 colunas e 3 linhas (e diminuir a margem) par(mfrow = c(2, 2), mar = c(3, 3, 3, 3), cex = 0.7) ln &lt;- length(ascores) ln # sao 502 cores ceiling(ln / 10) # , entao serao 51 pizzas # plota cada pizza fazendo uma iteração: idx &lt;- 0 # o objeto nullo para usar de indice na iteracao para fazer de 10 em 10 for (p in 1:ceiling(ln / 10)) { de &lt;- idx + 1 # cor do indice idx ate &lt;- idx + 10 # ate cor do indice idx+10 cls &lt;- ascores[de:ate] # cores da pizza da iteracao p pie(rep(1, 10), col = cls, labels = cls) idx &lt;- ate } dev.off() # fecha o pdf As funções rainbow() ou terrain.colors() geram gradientes de cores em um padrão definido. # 10 cores do arco-iris cls &lt;- rainbow(n = 10) pie(rep(1, 10), col = cls, labels = cls) # 12 cores do arco-iris com 50% de transparencia cls &lt;- rainbow(n = 12, alpha = 0.5) pie(rep(1, 12), col = cls, labels = cls) # 12 cores do arco-iris, limitando o espectro cls &lt;- rainbow(n = 12, start = 0.1, end = 0.9) pie(rep(1, 12), col = cls, labels = cls) # 10 cores quentes cls &lt;- heat.colors(n = 10, alpha = 1) pie(rep(1, 10), col = cls, labels = cls) # 20 cores topográficas cls &lt;- topo.colors(n = 20, alpha = 1) pie(rep(1, 20), col = cls, labels = cls) # ou melhor cls &lt;- terrain.colors(n = 20, alpha = 1) pie(rep(1, 20), col = cls, labels = cls) As funções rgb() ou hsv() geram qualquer tipo de cor para ser utilizados nos gráficos. ?rgb # veja o help dessa funcao e veja as funcoes sob See Also # podemos entender melhor fazendo o caminho inverso defs &lt;- col2rgb(&quot;yellow&quot;) # extraimos as especificacoes de amarelo (cores primárias ) pela palavra defs red 255 green 255 blue 0 # sem cor temos preto cls &lt;- rgb(red = 0, green = 0, blue = 0) # fazemos amarelo pie(1, col = cls, labels = cls) # fazemos amarelo cls &lt;- rgb(red = 255, green = 255, blue = 0, maxColorValue = 255) pie(1, col = cls, labels = cls) # tiramos verde cls &lt;- rgb(red = 255, green = 160, blue = 0, maxColorValue = 255) pie(1, col = cls, labels = cls) # tiramos verde e adicionamos azul cls &lt;- rgb(red = 255, green = 160, blue = 255, maxColorValue = 255) pie(1, col = cls, labels = cls) # tiramos azul-escuro (mais perto de 0) cls &lt;- rgb(red = 0, green = 0, blue = 150, maxColorValue = 255) pie(1, col = cls, labels = cls) # tiramos azul cls &lt;- rgb(red = 0, green = 0, blue = 255, maxColorValue = 255) pie(1, col = cls, labels = cls) Valores do argumento pch variam de 0 a 25; veja o ? da função points() para saber quais são esses símbolos↩︎ "],["graf-alto-nivel.html", "5.4 Funções gráficas de alto nível", " 5.4 Funções gráficas de alto nível Funções gráficas de alto-nível (highlevel plots) são as funções que usamos para gerar os gráficos. Além da função genérica plot(), veremos apenas alguns poucos exemplos, mas existem diversas funções gráficas de alto nível, muitas das quais dependem de pacotes específicos. Existem inúmeras outras funções de alto-nível, algumas do R-base, outras geradas por colaboradores na forma de pacotes do R. A função plot() entende algumas dessas outras funções dos pacotes automaticamente, dependendo da classe do objeto, e você sequer precisa usar o nome específico (veja o exemplo em plot.phylo(), abaixo). No ? do pacote graphics, você encontra ajuda para funções gráficas em geral: demo(&quot;graphics&quot;) # execute este demostrativo - lembre-se de interagir no console do R para as figuras ?graphics # veja o help dessa função para alguns gráficos 5.4.1 plot() - uma função genérica A função plot() é a principal para produção de gráficos porque é uma função genérica que irá gerar um gráfico dependendo da classe do objeto. Em muitos casos, não precisamos usar outras funções, porque a depender da classe do objeto, esta função automaticamente entenderá o que você precisa. ?plot # veja o help dessa função Suponha que tenhamos um vetor simples e numérico chamado vv: vv &lt;- 1:10 # Qual e a classe desse vetor? class(vv) ## [1] &quot;integer&quot; Vamos plotá-lo: plot(vv) Vamos mudar alguns argumentos da função plot(). Acrescentaremos um tipo diferente de ponto (argumento pch), uma cor vermelha para o fundo do ponto (argumento bg), um novo texto para o eixo x (argumento xlab), um novo texto para o eixo y (argumento ylab), e um título para o plot (argumento main): plot(vv, pch = 21, bg = &quot;red&quot;, xlab = &quot;índice do vetor&quot;, ylab = &quot;valor do vetor&quot;, main = &quot;Plotando um vetor&quot;) Vamos trabalhar agora com uma matriz de duas colunas: xx &lt;- 1:10 # um vetor yy &lt;- 10:1 # o mesmo vetor invertido mm &lt;- cbind(xx, yy) # junta em uma matrix # Qual a classe dessa matriz? class(mm) ## [1] &quot;matrix&quot; &quot;array&quot; Vamos utilizar a matriz de duas colunas mm diretamente como primeiro argumento da função plot(): plot(mm, xlab = &quot;Eixo X&quot;, ylab = &quot;Eixo Y&quot;, main = &quot;Plotando uma matriz de 2 colunas&quot;) Podemos também especificar separadamente os eixos x e y, utilizando os vetores xx e yy, utilizados para compor a matriz mm: # ou poderia especificar diretamente os eixos xx e yy sem usar a matriz plot(xx, yy, xlab = &quot;Eixo X&quot;, ylab = &quot;Eixo Y&quot;, main = &quot;Plotando uma matriz de 2 colunas&quot;, pch = 21, bg = &quot;purple&quot;) Se temos um conjunto de dados e queremos ver a relação entre si de todas as colunas do conjunto, podemos simplesmente usar: class(iris) # um conjunto de dados no formato data.frame ## [1] &quot;data.frame&quot; plot(iris) # o nome dos eixos está na diagonal dessa figura 5.4.2 hist() Esta importante função serve para visualizar a variação de uma variável apenas. ?hist # veja o help Vamos utilizar apenas a variável Sepal.Length do conjunto de dados iris: class(iris$Sepal.Length) # é um vetor ## [1] &quot;numeric&quot; hist(iris$Sepal.Length, xlab = &quot;Comprimento de sépala (cm)&quot;, main = &quot;Variação em Iris&quot;) Vamos diminuir os espaçamentos entre as barras e colorí-las: # diminuindo os espaçamentos entre as barras e colorindo hist(iris$Sepal.Length, xlab = &quot;Comprimento de sépala (cm)&quot;, main = &quot;Variação em Iris&quot;, breaks = 20, col = &quot;red&quot;) # note que o eixo y é a frequencia que o valor ocorre, ou seja, corresponde ao número de linhas em iris que tem valor 5.4.3 boxplot() Esta função é importante por mostrar a variação em uma variável qualquer em relação às categorias de um fator. É uma das melhores formas gráficas para mostrar a distribuição de valores de uma variável em relação às categorias. ?boxplot # vamos usar o objeto iris class(iris$Sepal.Length) # é um vetor ## [1] &quot;numeric&quot; class(iris$Species) # é um fator ## [1] &quot;factor&quot; boxplot(iris$Sepal.Length ~ iris$Species, ylab = &quot;Comprimento da sépala&quot;) # você pode fazer a mesma coisa com a função plot() porque ela é genérica que irá reconhecer que sua fórmula &#39;valores~fator&#39; pede por um boxplot plot(iris$Sepal.Length ~ iris$Species, ylab = &quot;Comprimento da sépala&quot;, xlab = &quot;&quot;) # note que especificamos aqui que o eixo x não tem título (lab) 5.4.4 barplot() Esta função gera um gráfico de barras simples. ?barplot # veja o help dessa função ?VADeaths # veja o help desse conjunto de dados class(VADeaths) ## [1] &quot;matrix&quot; &quot;array&quot; VADeaths # taxas de mortalidade/1000 habitantes no estado da Virgínia em 1940 Rural Male Rural Female Urban Male Urban Female 50-54 11.7 8.7 15.4 8.4 55-59 18.1 11.7 24.3 13.6 60-64 26.9 20.3 37.0 19.3 65-69 41.0 30.9 54.6 35.1 70-74 66.0 54.3 71.1 50.0 rownames(VADeaths) # cada linha é uma classe de idade ## [1] &quot;50-54&quot; &quot;55-59&quot; &quot;60-64&quot; &quot;65-69&quot; &quot;70-74&quot; colnames(VADeaths) # cada coluna é sexo e cidade ou rural ## [1] &quot;Rural Male&quot; &quot;Rural Female&quot; &quot;Urban Male&quot; &quot;Urban Female&quot; # com as informações padrão barplot(VADeaths) # cada cor é uma linha barplot(VADeaths, beside = TRUE) # lado a lado (cada barra é uma linha) # vamos colorir diferente, uma para cada linha rownames(VADeaths) ## [1] &quot;50-54&quot; &quot;55-59&quot; &quot;60-64&quot; &quot;65-69&quot; &quot;70-74&quot; cores &lt;- rainbow(n = nrow(VADeaths)) cores # uma cor por linha ## [1] &quot;#FF0000&quot; &quot;#CCFF00&quot; &quot;#00FF66&quot; &quot;#0066FF&quot; &quot;#CC00FF&quot; # essa é a correspondencia: cbind(rownames(VADeaths), cores) cores 50-54 #FF0000 55-59 #CCFF00 60-64 #00FF66 65-69 #0066FF 70-74 #CC00FF # plota com essas cores barplot(VADeaths, beside = TRUE, col = cores) 5.4.5 plot.phylo() O pacote Ape (Analyses of Phylogenetics and Evolution) (Paradis et al. 2020) possui uma função para desenhar uma filogenia. Caso você não tenha instalado o pacote ape ainda, faça-o assim: install.packages(&quot;ape&quot;) Depois, siga o exemplo abaixo: library(ape) # chama o pacote # uma filogenia hipotética para exemplo arv &lt;- &quot;(((A:1,B:1):2,C:3):0.5,((D:0.5,E:0.5):1,F:1.5):2);&quot; # lê essa filogenia para um objeto de classe phylo, que é uma classe para dendrogramas. phy &lt;- read.tree(text = arv) class(phy) ## [1] &quot;phylo&quot; # podemos plotar essa filogenia com plot(phy) # porque a função plot reconhece # que objetos de classe &quot;phylo&quot; são árvores # de fato ela usa a função plot.phylo() para gerar essa figura, que contém argumentos específicos para objetos dessa classe ?plot.phylo # veja o help e os argumentos # portanto posso incluir argumentos de plot.phylo() quando uso a função plot() para plotar um objeto de classe phylo plot(phy, no.margin = TRUE, tip.color = c(rep(&quot;red&quot;, 3), rep(&quot;blue&quot;, 3))) # seria o mesmo que dizer plot.phylo(phy, no.margin = TRUE, tip.color = c(rep(&quot;red&quot;, 3), rep(&quot;blue&quot;, 3))) 5.4.6 image() e countour() # existe um conjunto de dados topográficos na base do R que vamos usar como exemplo class(volcano) # é uma matriz dim(volcano) # com 87 linhas e 61 uma colnas volcano[1:5, 1:5] # os valores são altitude hist(volcano, breaks = 20) # essa é a distribuição de valores de elevacao range(volcano) # amplitude de variação # podemos usar algumas funções para visualizar um conjunto de dados que tem essa estrutura (matrix) ?image # veja o help image(volcano, col = heat.colors(12)) ?heat.colors # veja opções de gradientes continuos de cores # vamos mudar isso, cores &lt;- terrain.colors(12) # 12 categorias de cores cores # o código é uma cor em HTML ## [1] &quot;#00A600&quot; &quot;#24B300&quot; &quot;#4CBF00&quot; &quot;#7ACC00&quot; &quot;#ADD900&quot; &quot;#E6E600&quot; &quot;#E8C727&quot; ## [8] &quot;#EAB64E&quot; &quot;#ECB176&quot; &quot;#EEB99F&quot; &quot;#F0CFC8&quot; &quot;#F2F2F2&quot; image(volcano, col = cores) # notem a cratera ?contour # veja o help # outra opção é fazermos os contornos (ou curvas de nível neste caso do vulcão) contour(volcano) # vamos mudar o número de níveis para o mesmo usado para as cores contour(volcano, nlevels = 12) # vamos juntar essas figuras em uma só image(volcano, col = cores) contour(volcano, nlevels = 12, add = TRUE) # note o argumento add=TRUE que indica para a função de alto-nível # que ela não deve começar uma nova figura, # apenas adiciona à uma já criada por outra função de alto-nível # muitas funções de alto-nível tem esse argumento add, que, portanto, mimetiza o que função gráfica de baixo-nível faz 5.4.7 map() O pacote maps (Brownrigg 2018) fornece funções para desenhar mapas com divisões administrativas. A função map() é uma de alto-nível. Veremos depois como adicionar sobre esses mapas informação através de funções de baixo-nível. ?maps::map # veja o help Caso você não tenha instalado o pacote maps ainda, faça-o assim: install.packages(&quot;maps&quot;) Agora, siga o exemplo abaixo: library(maps) # instalar se não tiver instalado map() # mapa do mundo map(region = &quot;Brazil&quot;) # Brazil # dev.off() #pode precisar fechar o dispositivo se estiver avisar que a figura é muito grande dev.off() ## null device ## 1 sa &lt;- c(&quot;Brazil&quot;, &quot;Guyana&quot;, &quot;French Guiana&quot;, &quot;Suriname&quot;, &quot;Venezuela&quot;, &quot;Colombia&quot;, &quot;Ecuador&quot;, &quot;Trinidad-Tobago&quot;, &quot;Peru&quot;, &quot;Bolivia&quot;, &quot;Paraguay&quot;, &quot;Chile&quot;, &quot;Argentina&quot;, &quot;Uruguay&quot;, &quot;Panama&quot;) map(region = sa, col = &quot;red&quot;, lty = &quot;dashed&quot;) 5.4.8 xlim e ylim Esses dois parâmetros gráficos permitem ajustar o tamanho dos eixos de um gráfico, impondo limites. # CONTROLANDO UM XLIM plot(iris$Sepal.Length, iris$Sepal.Width, pch = 21, col = &quot;red&quot;) # vamos aumentar um pouco o eixo X rg &lt;- range(iris$Sepal.Length) # variacao atual rg # aumentar rg2 &lt;- rg + c(-1, +1) # adicionamos 1 unidade de cada lado rg2 plot(iris$Sepal.Length, iris$Sepal.Width, pch = 21, col = &quot;red&quot;, xlim = rg2) # LIMITANDO UM MAPA POR SUAS COORDENADAS dev.off() library(maps) # instalar se não tiver instalado map() # mapa do mundo # alguns limites em latitude e longitude lat0 &lt;- -22 lat1 &lt;- 5 long0 &lt;- -80 long1 &lt;- -30 dev.off() map(xlim = c(long0, long1), ylim = c(lat0, lat1)) Referências "],["graf-baixo-nivel.html", "5.5 Funções gráficas de baixo nível", " 5.5 Funções gráficas de baixo nível Funções de baixo nível são funções que permitem ADICIONAR elementos em um gráfico já aberto com as funções plot() ou plot.new(). Muitas vezes você pode usar uma função de alto nível para fazer a mesma coisa com o argumento add = TRUE. Vamos ver alguns exemplos mais comumente utilizados de funções de baixo-nível. 5.5.1 legend() A função legend() permite colocar uma legenda sobre um gráfico aberto por uma função de alto nível. ?legend # veja o help dessa funcao # vamos usar iris novamente Sepalas &lt;- iris$Sepal.Length Petalas &lt;- iris$Petal.Length nlevels(iris$Species) # contém três espécies ## [1] 3 levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; ascores &lt;- c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)[as.numeric(iris$Species)] # plota a figura plot(Sepalas, Petalas, pch = 21, bg = ascores, cex = 0.8) # vamos colocar uma legenda no canto direito inferior # definimos o que vai na legenda cores &lt;- c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;) texto &lt;- levels(iris$Species) legend(&quot;bottomright&quot;, legend = texto, pt.bg = cores, pch = 21) # ficou apertado né... # aumentar o espacamento, colocar mais para dentro e tirar o box, diminuir o texto, aumentar o tamanho do ponto # plota a figura plot(Sepalas, Petalas, pch = 21, bg = ascores, cex = 0.8) legend(&quot;bottomright&quot;, legend = texto, pt.bg = cores, pch = 21, y.intersp = 1.7, inset = 0.1, box.lwd = 0, cex = 0.8, pt.cex = 1.5) # podemos colocar legendas também pela coordenada plot(Sepalas, Petalas, pch = 21, bg = ascores, cex = 0.8) legend(x = 7, y = 3, legend = texto, pt.bg = cores, pch = 21, y.intersp = 1.7, inset = 0.1, box.lwd = 0, cex = 0.8, pt.cex = 1.5) # ou colocar fora da figura # neste caso, primeiro dividimos o dispositivo em tres partes e plotamos a figura em 2 partes e a legenda em 1 parte layout(matrix(c(1, 1, 2), nrow = 1, ncol = 3)) plot(Sepalas, Petalas, pch = 21, bg = ascores, cex = 0.8) # usamos a função plot.new() para mudar de parte no dispositivo cirando um plot vazio plot.new() # nao vai ver nada acontecendo # agora plotamos a legenda nesse espaço legend(&quot;left&quot;, legend = texto, pt.bg = cores, pch = 21, y.intersp = 1.7, inset = 0.1, box.lwd = 0, cex = 0.8, pt.cex = 1.5) 5.5.2 points() Esta função genérica serve para adicionar pontos, linhas, simbolos etc, segundo coordenadas x ou x+y em um gráfico aberto por uma função de alto nível. layout(1) # restaurando para 1 se fez o script acima # vamos usar um conjunto de dados de crescimento de laranja data(&quot;Orange&quot;) colnames(Orange) # número da árvore, idade, circunferencia nessa idade ## [1] &quot;Tree&quot; &quot;age&quot; &quot;circumference&quot; head(Orange) Tree age circumference 1 118 30 1 484 58 1 664 87 1 1004 115 1 1231 120 1 1372 142 unique(Orange$Tree) # tem cinco árvores ## [1] 1 2 3 4 5 ## Levels: 3 &lt; 1 &lt; 5 &lt; 2 &lt; 4 # vamos plotar idade por circunferencia # uma linha por árvore # cada linha de um tipo e cor diferente # definir tipos de linhas e cores ascores &lt;- c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;purple&quot;) linhatipos &lt;- c(&quot;solid&quot;, &quot;dashed&quot;, &quot;dotted&quot;, &quot;dotdash&quot;, &quot;longdash&quot;) # uma cor por árvore treeidx &lt;- as.numeric(Orange$Tree) cls &lt;- ascores[treeidx] cls ## [1] &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;blue&quot; &quot;yellow&quot; ## [9] &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;yellow&quot; &quot;red&quot; &quot;red&quot; ## [17] &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;red&quot; &quot;purple&quot; &quot;purple&quot; &quot;purple&quot; ## [25] &quot;purple&quot; &quot;purple&quot; &quot;purple&quot; &quot;purple&quot; &quot;green&quot; &quot;green&quot; &quot;green&quot; &quot;green&quot; ## [33] &quot;green&quot; &quot;green&quot; &quot;green&quot; # um tipo de linha por arvore tps &lt;- linhatipos[treeidx] tps ## [1] &quot;dashed&quot; &quot;dashed&quot; &quot;dashed&quot; &quot;dashed&quot; &quot;dashed&quot; &quot;dashed&quot; ## [7] &quot;dashed&quot; &quot;dotdash&quot; &quot;dotdash&quot; &quot;dotdash&quot; &quot;dotdash&quot; &quot;dotdash&quot; ## [13] &quot;dotdash&quot; &quot;dotdash&quot; &quot;solid&quot; &quot;solid&quot; &quot;solid&quot; &quot;solid&quot; ## [19] &quot;solid&quot; &quot;solid&quot; &quot;solid&quot; &quot;longdash&quot; &quot;longdash&quot; &quot;longdash&quot; ## [25] &quot;longdash&quot; &quot;longdash&quot; &quot;longdash&quot; &quot;longdash&quot; &quot;dotted&quot; &quot;dotted&quot; ## [31] &quot;dotted&quot; &quot;dotted&quot; &quot;dotted&quot; &quot;dotted&quot; &quot;dotted&quot; # fazemos uma figura plot(Orange$age, Orange$circumference, lwd = 1, type = &quot;b&quot;, col = cls, lty = tps) # note que todas as linhas sairam com primeira cor e com o primeiro tipo cls[1] ## [1] &quot;blue&quot; tps[1] ## [1] &quot;dashed&quot; # nao dá para fazer assim, porque não especificamos como os pontos se ligam # podemos no entanto colocar linha por linha # desenhamos o gráfico com uma função de alto nível com os dados, mas vazia plot(Orange$age, Orange$circumference, type = &quot;n&quot;, xlab = &quot;Idade&quot;, ylab = &quot;Circunferência&quot;) # adicionamo para cada árvore os pontos e as linhas arvs &lt;- as.numeric(levels(Orange$Tree)) pts &lt;- arvs + 20 # simbolos para pontos i &lt;- 1 for (i in 1:length(arvs)) { # para cada arvore # filtra os dados dd &lt;- Orange[Orange$Tree == arvs[i], ] # adiciona no gráfico aberto a linha e os pontos e uma vez (type=&#39;b&#39;, veja o argumento type) points(dd$age, dd$circumference, type = &quot;b&quot;, pch = pts[arvs[i]], lty = linhatipos[arvs[i]], lwd = 1, col = ascores[arvs[i]], bg = ascores[arvs[i]]) } # vamos adicionar uma legenda txt &lt;- paste(&quot;tree&quot;, arvs) legend(&quot;bottomright&quot;, inset = 0.1, box.lwd = 0, legend = txt, pch = pts[arvs], pt.bg = ascores[arvs], lty = linhatipos[arvs], col = ascores[arvs], y.intersp = 1.5) 5.5.3 text() e mtext() text() e mtext()- funções para plotar textos (&gt;= 1 caracter de comprimento) sobre uma figura de alto nível. text() plota dentro da área da figura através de coordendas, mtext() plota fora da área da figura com indicação do lado (side) e da distância da linha dos eixos (line). ?text # veja o help dessa função # vamos usar iris novamente Sepalas &lt;- iris$Sepal.Length Petalas &lt;- iris$Petal.Length nlevels(iris$Species) # contém três espécies ## [1] 3 levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; ascores &lt;- c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)[as.numeric(iris$Species)] # vamos dar um código de texto para cada especie (suas primeiras letras maiusculo) levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; spp &lt;- toupper(substr(iris$Species, 1, 2)) spp ## [1] &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; ## [16] &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; ## [31] &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; ## [46] &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;SE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; ## [61] &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; ## [76] &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; ## [91] &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VE&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; ## [106] &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; ## [121] &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; ## [136] &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; &quot;VI&quot; # plota a figura, mas ao inves de simbolos adicionamos text # poderiamos fazer isso se spp fosse apenas 1 caractere plot(Sepalas, Petalas, pch = spp, col = ascores, cex = 0.8) legend(&quot;bottomright&quot;, legend = levels(iris$Species), text.col = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), inset = 0.1, box.lwd = 0, y.intersp = 1.5) # mas note que versicolor e virginica não se diferenciam, pois pch plota apenas 1 caractere quando o simbolo for texto # podemos, no entanto, usar a funcao text para isso plot(Sepalas, Petalas, type = &quot;n&quot;) text(Sepalas, Petalas, labels = spp, col = ascores, cex = 0.8) txt &lt;- paste(&quot;Iris&quot;, levels(iris$Species)) legend(&quot;bottomright&quot;, legend = txt, text.col = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), inset = 0.1, box.lwd = 0, y.intersp = 1.5) # posso usar essa função para adicionar qualquer texto, em qualquer coordenada text(4.5, 6, labels = &quot;Exemplo Iris&quot;, adj = 0, col = &quot;yellow&quot;) # note o argumento adj que define o ajuste do texto em relacao à coordenada x y especificada (ajuste: 0 esquerda, 1 direita) # apenas o x text(x = 4.5, y = 6, labels = &quot;Exemplo Iris&quot;, adj = 1, col = &quot;black&quot;) # o x e o y do ajuste (dois valores em adj) text(x = 4.5, y = 6, labels = &quot;Exemplo Iris&quot;, adj = c(0.3, 1), col = &quot;purple&quot;) # a funcao mtext plot for da área das coordenas da figura # lado superior mtext(side = 3, text = &quot;A.&quot;, line = 1, col = &quot;red&quot;, font = 2, cex = 2) # lado superior esquerdo mtext(side = 3, text = &quot;A.&quot;, line = 1, col = &quot;red&quot;, font = 2, cex = 2, adj = 0) # lado inferior direito mtext(side = 1, text = &quot;B.&quot;, line = 1, col = &quot;red&quot;, font = 2, cex = 2, adj = 1) # mais para baixo mtext(side = 1, text = &quot;B.&quot;, line = 2.5, col = &quot;red&quot;, font = 2, cex = 2, adj = 1) # lado direito superior mtext(side = 4, text = &quot;C.&quot;, line = 1, col = &quot;red&quot;, font = 2, cex = 2, adj = 1) # lado direito no meio mtext(side = 4, text = &quot;C.&quot;, line = 1, col = &quot;red&quot;, font = 2, cex = 2, adj = 0.5) 5.5.4 axis() A função axis() adiciona eixos individualmente. É importante quando desejamos combinar dois gráficos em um só. ?axis # algumas vezes queremos adicionar eixos, ou formatar o eixo de uma forma individualizada # por exemplo, na seguinte figura, queremos colocar o nome das especies no eixo y em posicao horizontal plot(iris$Sepal.Length ~ iris$Species, horizontal = TRUE) # o argumento para isso é par(las=2) # se mudar isso eu mudo para todos os eixos par(las = 2) plot(iris$Sepal.Length ~ iris$Species, horizontal = TRUE) # mas eu quero apenas o eixo y par(las = 1) # voltamos ao padrao 1 # plotamos a figura sem esse eixo plot(iris$Sepal.Length ~ iris$Species, horizontal = TRUE, yaxt = &quot;n&quot;) # adicionamos o eixo y na horizontal axis(side = 2, las = 2) # mas ele plotou números não é isso que eu quero plot(iris$Sepal.Length ~ iris$Species, horizontal = TRUE, yaxt = &quot;n&quot;) # entao dizemos onde e o que queremos desenhar axis(side = 2, at = 1:3, labels = levels(iris$Species)) # vamos mudar o titulo do eixo da variavel dependente (y) e apagar das especies plot(iris$Sepal.Length ~ iris$Species, horizontal = TRUE, yaxt = &quot;n&quot;, ylab = &quot;Comprimento Sépalas&quot;, xlab = &quot;&quot;) # entao dizemos onde e o que queremos desenhar axis(side = 2, at = 1:3, labels = levels(iris$Species)) # também posso adicionar eixos em outras posicoes axis(side = 3) 5.5.5 abline() Esta função plota uma linha reta sobre um gráfico, ou uma linha de ajuste de uma correlação ou regressão. # linha sobre o eixo ?abline # permite colocar linha em regressoes ou linhas retas simples plot(iris$Sepal.Length, iris$Petal.Length) # um linha horizontal abline(h = 4, col = &quot;red&quot;, lwd = 2) # uma linha vertical abline(v = 6.3, col = &quot;blue&quot;, lwd = 2) # uma linha de uma regressao rg &lt;- lm(iris$Petal.Length ~ iris$Sepal.Length) # faço a regressao entre essas variaveis abline(coef(rg), col = &quot;darkgreen&quot;, lwd = 3, lty = &quot;dotted&quot;) # plot pelos coeficientes 5.5.6 arrows(), rect(), polygon() e segments() Estas funções plotam flechas, retângulos, polígonos, ou segmentos de linhas sobre sobre gráficos, respectivamente. 5.5.6.1 Flechas ?arrows # veja o help # vamos criar um histograma hist(iris$Sepal.Width, breaks = 20, col = &quot;red&quot;) # adicionar uma seta arrows(x0 = 3.6, y0 = 5, x1 = 3.6, y1 = 10, lty = &quot;solid&quot;, col = &quot;blue&quot;) # invertendo y0 e y1, diminuindo o tamanho da seta e colocando mais grosso hist(iris$Sepal.Width, breaks = 20, col = &quot;red&quot;) arrows(x0 = 3.6, y0 = 10, x1 = 3.6, y1 = 5, lty = &quot;solid&quot;, lwd = 3, col = &quot;blue&quot;, length = 0.1) 5.5.6.2 Retângulos ?rect # veja o help plot(1:10, 1:10, type = &quot;n&quot;) rect(xleft = 2, ybottom = 2, xright = 3, ytop = 4) # com preenchimento rect(xleft = 4, ybottom = 2, xright = 6, ytop = 4, density = 8, border = &quot;red&quot;, col = &quot;blue&quot;) # com preenchimento total (density tem valor negativo (um qualquer)) rect(xleft = 7, ybottom = 2, xright = 8, ytop = 4, density = -1, border = &quot;yellow&quot;, col = &quot;blue&quot;, lwd = 5) 5.5.6.3 Polígonos ?polygon # veja o help plot(1:10, 1:10, type = &quot;n&quot;) polygon(x = c(4, 7.5, 8.2, 6, 4), y = c(2, 2, 5, 8, 2), lwd = 2, col = &quot;red&quot;) plot(1:10, 1:10, type = &quot;n&quot;) polygon(x = c(4, 7.5, 8.2, 6, 4), y = c(2, 2, 5, 8, 2), lwd = 2, col = &quot;red&quot;, density = 10) 5.5.6.4 Segmentos de linhas ?segments plot(1:10, 1:10, type = &quot;n&quot;) segments(x0 = 2, y0 = 2, x1 = 4.5, y1 = 6, lwd = 2, col = &quot;red&quot;) segments(x0 = 2, y0 = 8, x1 = 7.5, y1 = 8, lwd = 2, col = &quot;blue&quot;) 5.5.7 symbols() A função symbols() é uma de alto nível, mas com a adição do argumento add=TRUE, ela pode ser utilizada para adicionar sobre gráficos já plotados símbolos que expressam quantidades. ?symbols # ver o help plot(1:10, 1:10, type = &quot;n&quot;) xx &lt;- c(3, 5, 7, 9) yy &lt;- c(3, 5, 7, 9) zz &lt;- c(0.1, 0.3, 0.4, 1) # tamanho em unidade gráfica symbols(xx, yy, circles = zz, bg = &quot;red&quot;, add = T, inches = FALSE) plot(1:10, 1:10, type = &quot;n&quot;) symbols(xx, yy, squares = zz, bg = &quot;blue&quot;, add = T, inches = FALSE) # agora mais complexo, expressando proporção plot(1:10, 1:10, type = &quot;n&quot;) # uma matrix que com tres colunas: largura do simbolo, altura do simbolo e proporcao que simbolo deve estar preenchido v1 &lt;- matrix(c(1, 1, 0.2), nrow = 1, ncol = 3) # 20% cheio # ll = rep(v1,length(xx)) symbols(xx[1], yy[1], thermometers = v1, add = T, inches = FALSE) v2 &lt;- matrix(c(1, 1, 0.8), nrow = 1, ncol = 3) # 80% cheio # ll = rep(v1,length(xx)) symbols(xx[2], yy[2], thermometers = v2, add = T, inches = FALSE) "],["funções-gráficas-interativas.html", "5.6 Funções gráficas interativas", " 5.6 Funções gráficas interativas 5.6.1 locator() Esta função extrai coordenadas de um gráfico. ?locator # veja o help # fazemos um gráfico ?trees # se quiser entender esses dados data(&quot;trees&quot;) class(trees) colnames(trees) Circunferencia &lt;- trees$Girth Altura &lt;- trees$Height plot(Circunferencia, Altura, type = &quot;p&quot;, pch = 21, bg = &quot;red&quot;) locator(n = 1) # clique na figura dentro do gráfico # veja que no console há uma lista com os valores das coordenadas x e y # pode fazer a mesma coisa já salvando as coordendas num ojbeto. Colete 2 pontos agora, traçando uma linha entre eles cds &lt;- locator(n = 2, type = &quot;l&quot;) cds # dois valores para cada coordenada # posso usar os valores obtidos, por exemplo para plotar uma flexa x0 &lt;- cds$x[1] x1 &lt;- cds$x[2] y0 &lt;- cds$y[1] y1 &lt;- cds$y[2] arrows(x0, y0, x1, y1, lwd = 2, col = &quot;red&quot;) 5.6.2 identify() Esta função identifica os pontos de um gráfico. ?identify # veja o help # fazemos um gráfico data(&quot;trees&quot;) Circunferencia &lt;- trees$Girth Altura &lt;- trees$Height # plotamos vazio plot(Circunferencia, Altura, type = &quot;n&quot;) ss &lt;- sample(1:nrow(trees), 1) # um valor de indice aleatorio # um ponto qualquer em vermelho points(Circunferencia[ss], Altura[ss], pch = 21, cex = 1.5, bg = &quot;red&quot;) # o resto dos pontos em branco points(Circunferencia[-ss], Altura[-ss], pch = 21, cex = 1.5, bg = &quot;white&quot;) # identificar pontos. Execute a funçào e selecione no ponto vermelho identify(Circunferencia, Altura, n = 1, tolerance = 1) # o numero que aparece no gráfico é o indice # portanto, deve ser igual ao valor de ss trees[ss, ] "],["sabermais-disp-grafico.html", "5.7 Para saber mais:", " 5.7 Para saber mais: (1). Vídeoaulas com conteúdos parciais deste capítulo: Dispositivos gráficos; Parâmetros gráficos, parte I; Parâmetros gráficos, parte II; Parâmetros gráficos parte II; Funções gráficas de alto nível; Funções gráficas de baixo nível, parte I; Funções gráficas de baixo nível, parte II; (2). R Gallery - página que tem exemplos de gráficos do R e os códigos correspondentes. "],["exercícios-3.html", "5.8 Exercícios", " 5.8 Exercícios Esta série de exercícios exemplificam algumas funções que serão retomadas no tutorial de AED (Capítulos 11, 12, 13 e 14). Procure exercitar o que aprenderam até aqui. O conjunto de dados alunos2018.txt será utilizado na maioria dos exercícios listados abaixo: Resolva o exercício 302.02 Histogramas (frequência). Resolva o exercício 302.07 Gráficos com trechos selecionados do data.frame/matriz. Resolva o exercício 302.04 Box-plots. Resolva o exercício 302.05 Gráficos de dispersão. Resolva o exercício 302.06 Matriz de dispersão. Resolva o exercício Editando parâmetros gráficos. "],["iter-cflux.html", "Capítulo 6 Iteração e controle de fluxo ", " Capítulo 6 Iteração e controle de fluxo "],["func-apply.html", "6.1 Funções da família apply()", " 6.1 Funções da família apply() Algumas funções da família apply() são muito úteis na manipulação de dados e descrição de dados. Essas funções são muito poderosas, porque permitem você fazer iterações de forma simples, ou seja, você pode aplicar uma função a vários objetos simultaneamente com funções dessa família. O que você faz com essas funções você também faz com as iterações que fazem uso da expressão for(){} (veja seção 6.3), mas essas funções simplificam e aceleram o processo. 6.1.1 Em uma matriz A função apply() poderia ser traduzida como: aplique uma função (FUN) a todas as linhas ou colunas (MARGIN) de uma matriz (X): ?apply # Veja o help # os argumentos dessa função são: # X = matrix # MAGRIN = 1 indica linha, 2 indica colunas # FUN = a função que você deseja aplicar # ... ARGUMENTOS DESSA FUNCAO SE FOR O CASO # TOTAIS MARGINAIS # crie uma matriz X &lt;- matrix(1:36, nrow = 4, ncol = 9) colnames(X) &lt;- paste(&quot;col&quot;, 1:ncol(X)) rownames(X) &lt;- paste(&quot;ln&quot;, 1:nrow(X)) head(X) # cabeça da matriz criada col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 ln 1 1 5 9 13 17 21 25 29 33 ln 2 2 6 10 14 18 22 26 30 34 ln 3 3 7 11 15 19 23 27 31 35 ln 4 4 8 12 16 20 24 28 32 36 # calcule para todas as linhas: # a soma dos valores apply(X, MARGIN = 1, FUN = sum) ## ln 1 ln 2 ln 3 ln 4 ## 153 162 171 180 # o valor máximo apply(X, MARGIN = 1, FUN = max) ## ln 1 ln 2 ln 3 ln 4 ## 33 34 35 36 # a média apply(X, MARGIN = 1, FUN = mean) ## ln 1 ln 2 ln 3 ln 4 ## 17 18 19 20 # o desvio padrão apply(X, MARGIN = 1, FUN = sd) ## ln 1 ln 2 ln 3 ln 4 ## 10.95445 10.95445 10.95445 10.95445 # para todas as colunas # a soma dos valores apply(X, MARGIN = 2, FUN = sum) ## col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 ## 10 26 42 58 74 90 106 122 138 # o valor máximo apply(X, MARGIN = 2, FUN = max) ## col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 ## 4 8 12 16 20 24 28 32 36 # a média apply(X, MARGIN = 2, FUN = mean) ## col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 ## 2.5 6.5 10.5 14.5 18.5 22.5 26.5 30.5 34.5 # o desvio padrão apply(X, MARGIN = 2, FUN = sd) ## col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 ## 1.290994 1.290994 1.290994 1.290994 1.290994 1.290994 1.290994 1.290994 ## col 9 ## 1.290994 As funções rowSums(), rowMeans(), colSums(), ou colMeans() são equivalentes à função apply(). Elas simplificam o uso para somas (em inglês, sum) e médias (em inglês, mean) de linhas (em inglês, rows) e colunas (em inglês, columns). Se você conhece bem a função apply(), você pode fazer o que essas funções fazem e muito mais. Portanto, ao dominar a função apply(), você acaba por não precisar se preocupar em aprender essas funções mais específicas. ?rowSums rowSums(X) # soma de cada linha ## ln 1 ln 2 ln 3 ln 4 ## 153 162 171 180 rowMeans(X) # media de cada linha ## ln 1 ln 2 ln 3 ln 4 ## 17 18 19 20 colSums(X) # soma de cada coluna ## col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 ## 10 26 42 58 74 90 106 122 138 colMeans(X) # média de cada coluna ## col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 ## 2.5 6.5 10.5 14.5 18.5 22.5 26.5 30.5 34.5 6.1.2 Em um vetor ou lista A função lapply() aplica uma função FUN para cada elemento de um vetor ou de uma lista, e retorna um objeto de classe list. # muito simples, imprime algo linha por linha ll &lt;- lapply(LETTERS, print) ## [1] &quot;A&quot; ## [1] &quot;B&quot; ## [1] &quot;C&quot; ## [1] &quot;D&quot; ## [1] &quot;E&quot; ## [1] &quot;F&quot; ## [1] &quot;G&quot; ## [1] &quot;H&quot; ## [1] &quot;I&quot; ## [1] &quot;J&quot; ## [1] &quot;K&quot; ## [1] &quot;L&quot; ## [1] &quot;M&quot; ## [1] &quot;N&quot; ## [1] &quot;O&quot; ## [1] &quot;P&quot; ## [1] &quot;Q&quot; ## [1] &quot;R&quot; ## [1] &quot;S&quot; ## [1] &quot;T&quot; ## [1] &quot;U&quot; ## [1] &quot;V&quot; ## [1] &quot;W&quot; ## [1] &quot;X&quot; ## [1] &quot;Y&quot; ## [1] &quot;Z&quot; class(ll) ## [1] &quot;list&quot; str(ll) ## List of 26 ## $ : chr &quot;A&quot; ## $ : chr &quot;B&quot; ## $ : chr &quot;C&quot; ## $ : chr &quot;D&quot; ## $ : chr &quot;E&quot; ## $ : chr &quot;F&quot; ## $ : chr &quot;G&quot; ## $ : chr &quot;H&quot; ## $ : chr &quot;I&quot; ## $ : chr &quot;J&quot; ## $ : chr &quot;K&quot; ## $ : chr &quot;L&quot; ## $ : chr &quot;M&quot; ## $ : chr &quot;N&quot; ## $ : chr &quot;O&quot; ## $ : chr &quot;P&quot; ## $ : chr &quot;Q&quot; ## $ : chr &quot;R&quot; ## $ : chr &quot;S&quot; ## $ : chr &quot;T&quot; ## $ : chr &quot;U&quot; ## $ : chr &quot;V&quot; ## $ : chr &quot;W&quot; ## $ : chr &quot;X&quot; ## $ : chr &quot;Y&quot; ## $ : chr &quot;Z&quot; # suponha três vetores de tamanhos diferentes v1 &lt;- sample(1:1000, 50) length(v1) ## [1] 50 v2 &lt;- sample(1:100, 30) length(v2) ## [1] 30 v3 &lt;- sample(1000:2000, 90) length(v3) ## [1] 90 # imagina que isso esteja numa lista ml &lt;- list(v1, v2, v3) class(ml) ## [1] &quot;list&quot; length(ml) ## [1] 3 # posso usar lapply para calcular a media desses vetores lapply(ml, mean) # note que retorna uma lista ## [[1]] ## [1] 453.38 ## ## [[2]] ## [1] 49.56667 ## ## [[3]] ## [1] 1479.911 lt &lt;- lapply(ml, mean) # podemos guardar lt &lt;- as.vector(lt, mode = &quot;numeric&quot;) # e transformar num vetor. MODE neste caso é fundamental usar lt ## [1] 453.38000 49.56667 1479.91111 6.1.3 Por categoria de um fator A função tapply() aplica uma função FUN em uma coluna numérica individualizando os resultados para cada categoria de um determinado fator. # vamos usar os dados de Iris novamente ?iris # calculando o comprimento médio de sepálas pelas categorias de um fator (especies) class(iris$Sepal.Length) # variavel numerica ## [1] &quot;numeric&quot; class(iris$Species) # fator com categorias que correspondem a especies ## [1] &quot;factor&quot; tapply(iris$Sepal.Length, iris$Species, FUN = mean) ## setosa versicolor virginica ## 5.006 5.936 6.588 # calculando o comprimento máximo por especie tapply(iris$Sepal.Length, iris$Species, FUN = max) ## setosa versicolor virginica ## 5.8 7.0 7.9 # a amplitude de variacao tapply(iris$Sepal.Length, iris$Species, FUN = range) ## $setosa ## [1] 4.3 5.8 ## ## $versicolor ## [1] 4.9 7.0 ## ## $virginica ## [1] 4.9 7.9 # note que essa funcao sempre retorna um array (que é uma lista de fato, neste caso) tm &lt;- tapply(iris$Sepal.Length, iris$Species, FUN = min) class(tm) ## [1] &quot;array&quot; names(tm) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; tm[[&quot;setosa&quot;]] # indexadores de lista ## [1] 4.3 tr &lt;- tapply(iris$Sepal.Length, iris$Species, FUN = range) class(tr) ## [1] &quot;array&quot; names(tr) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; tr[[&quot;setosa&quot;]] ## [1] 4.3 5.8 "],["condicionais.html", "6.2 Condicionais", " 6.2 Condicionais Condicionais são expressões que permitem a um programa a tomada de decisões. Vamos tratar aqui das condicionais if (), if () else {}, e ifelse () (veja a seção Para saber mais para mais informações). 6.2.1 Condicional if () A expressão if () avalia um vetor atômico (ou de índice 1) lógico e executa o que estiver entre {} se o valor do vetor for verdadeiro (TRUE). A estrutura básica de um if () é: if (condicao) { ação a ser realizada caso a condição seja VERDADEIRA } Dentro do par de parênteses, deve haver uma condição. Condições em R são feitas com operadores lógicos: ==, !=, &gt;, &lt; etc (veja a seção @ref(#vetor-operador-logico) para relembrar; veja também a seção Para saber mais pois apresenta links para vídeoaulas importantes). 6.2.1.1 Exemplo 01 perdiz_estuda_breu &lt;- TRUE perdiz_estuda_grama &lt;- FALSE perdiz_estuda_breu ## [1] TRUE perdiz_estuda_grama ## [1] FALSE if (perdiz_estuda_breu) { print(&quot;Breu pode ser Protium, Dacryodes, Trattinnickia, e é da família Burseraceae&quot;) } ## [1] &quot;Breu pode ser Protium, Dacryodes, Trattinnickia, e é da família Burseraceae&quot; if (perdiz_estuda_grama) { print(&quot;Isso não vai dar imprimir&quot;) } Reparem na condição que deve ser satisfeita dentro dos parênteses: TRUE, para efetuar a ação; se FALSE, não executa a função: if (TRUE) { print(&quot;Eu executo!&quot;) } ## [1] &quot;Eu executo!&quot; if (FALSE) { print(&quot;Eu não executo&quot;) } 6.2.2 Condicional if () com o else A condicional if () pode ser expandida para if () { } else {}: execute em {} se if () for VERDADEIRO, caso contrário (== else), execute o que estiver entre o segundo par {}. 6.2.2.1 Exemplo 01 meunumero &lt;- 77 meunumero ## [1] 77 if (meunumero == 76) { print(&quot;Meu número é o 3&quot;) } else { # meu_else &lt;- paste0(&quot;Mas pode ser o &quot;, meunumero) # print(meu_else) # 1+1 print(paste(&quot;Se eu somar o meu número &quot;, meunumero, &quot;com 3, eu vou obter &quot;, meunumero + 3)) } ## [1] &quot;Se eu somar o meu número 77 com 3, eu vou obter 80&quot; 6.2.2.2 Exemplo 02 familia &lt;- c(&quot;Burseraceae&quot;, &quot;Solanaceae&quot;, &quot;Sapindaceae&quot;, &quot;Rubiaceae&quot;) clado &lt;- c(&quot;Malvids&quot;, &quot;Lamiids&quot;, &quot;Malvids&quot;, &quot;Lamiids&quot;) apg &lt;- data.frame(familia = familia, clado = clado, stringsAsFactors = FALSE) apg familia clado Burseraceae Malvids Solanaceae Lamiids Sapindaceae Malvids Rubiaceae Lamiids str(apg) ## &#39;data.frame&#39;: 4 obs. of 2 variables: ## $ familia: chr &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; ## $ clado : chr &quot;Malvids&quot; &quot;Lamiids&quot; &quot;Malvids&quot; &quot;Lamiids&quot; dim(apg) ## [1] 4 2 malvids &lt;- c(&quot;Burseraceae&quot;, &quot;Sapindaceae&quot;) meunumero &lt;- 4 apg$familia[meunumero] ## [1] &quot;Rubiaceae&quot; apg$familia[meunumero] %in% malvids ## [1] FALSE if (apg$familia[meunumero] %in% malvids) { malv_fam &lt;- paste(malvids, collapse = &quot; e &quot;) malv_fam clado &lt;- &quot;Malvids&quot; frase &lt;- paste(malv_fam, clado, sep = &quot; pertencem ao clado das &quot;) frase print(frase) } else { paste(&quot;A família&quot;, apg$familia[meunumero], &quot;pertence ao clado das&quot;, apg$clado[meunumero]) } ## [1] &quot;A família Rubiaceae pertence ao clado das Lamiids&quot; 6.2.3 Condicional ifelse() ifelse(condicao, executa se VERDADEIRO, executa se FALSO) set.seed(333) familia ## [1] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; familias &lt;- sample(familia, 100, replace = TRUE) familias ## [1] &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; ## [6] &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; ## [11] &quot;Sapindaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; ## [16] &quot;Sapindaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; ## [21] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; ## [26] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; ## [31] &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; ## [36] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; ## [41] &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [46] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Rubiaceae&quot; &quot;Burseraceae&quot; ## [51] &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [56] &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; &quot;Solanaceae&quot; ## [61] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; ## [66] &quot;Burseraceae&quot; &quot;Rubiaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; ## [71] &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Rubiaceae&quot; ## [76] &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [81] &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [86] &quot;Rubiaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; ## [91] &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; ## [96] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; table(familias) Burseraceae Rubiaceae Sapindaceae Solanaceae 27 18 25 30 familias ## [1] &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; ## [6] &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; ## [11] &quot;Sapindaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; ## [16] &quot;Sapindaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; ## [21] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; ## [26] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; ## [31] &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; ## [36] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; ## [41] &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [46] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Rubiaceae&quot; &quot;Burseraceae&quot; ## [51] &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [56] &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; &quot;Rubiaceae&quot; &quot;Solanaceae&quot; ## [61] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; ## [66] &quot;Burseraceae&quot; &quot;Rubiaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; ## [71] &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Rubiaceae&quot; ## [76] &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [81] &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Sapindaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; ## [86] &quot;Rubiaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Rubiaceae&quot; ## [91] &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Burseraceae&quot; ## [96] &quot;Burseraceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; ifelse(familias == &quot;Burseraceae&quotifelse(familias == &quot;Sapindaceae&quot;, &quot;Sapindaceae é a família do guaraná&quot;, &quot;Não é Sapindaceae&quot;) ## [1] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [3] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [5] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [7] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [9] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [11] &quot;Sapindaceae é a família do guaraná&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [13] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [15] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [17] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [19] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [21] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [23] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [25] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [27] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [29] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [31] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [33] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [35] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [37] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [39] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [41] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [43] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [45] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [47] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [49] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [51] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [53] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [55] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [57] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [59] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [61] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [63] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [65] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [67] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [69] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [71] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [73] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [75] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [77] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [79] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [81] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [83] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [85] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; ## [87] &quot;Não é Sapindaceae&quot; &quot;Sapindaceae é a família do guaraná&quot; ## [89] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [91] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [93] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [95] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [97] &quot;Não é Sapindaceae&quot; &quot;Não é Sapindaceae&quot; ## [99] &quot;Sapindaceae é a família do guaraná&quot; &quot;Não é Sapindaceae&quot; familias[3] ## [1] &quot;Sapindaceae&quot; familias[1:10] ## [1] &quot;Solanaceae&quot; &quot;Burseraceae&quot; &quot;Sapindaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; ## [6] &quot;Rubiaceae&quot; &quot;Solanaceae&quot; &quot;Solanaceae&quot; &quot;Sapindaceae&quot; &quot;Rubiaceae&quot; ifelse(familias == &quot;Sapindaceae&quot;, &quot;Sapindaceae da ordem Sapindales&quot;, ifelse(familias == &quot;Burseraceae&quot;, &quot;Burseraceae também é da ordem Sapindales&quot;, &quot;Nenhuma dessas famílias é uma Sapindales&quot;) ) ## [1] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [2] &quot;Burseraceae também é da ordem Sapindales&quot; ## [3] &quot;Sapindaceae da ordem Sapindales&quot; ## [4] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [5] &quot;Sapindaceae da ordem Sapindales&quot; ## [6] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [7] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [8] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [9] &quot;Sapindaceae da ordem Sapindales&quot; ## [10] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [11] &quot;Sapindaceae da ordem Sapindales&quot; ## [12] &quot;Sapindaceae da ordem Sapindales&quot; ## [13] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [14] &quot;Sapindaceae da ordem Sapindales&quot; ## [15] &quot;Burseraceae também é da ordem Sapindales&quot; ## [16] &quot;Sapindaceae da ordem Sapindales&quot; ## [17] &quot;Sapindaceae da ordem Sapindales&quot; ## [18] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [19] &quot;Sapindaceae da ordem Sapindales&quot; ## [20] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [21] &quot;Burseraceae também é da ordem Sapindales&quot; ## [22] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [23] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [24] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [25] &quot;Sapindaceae da ordem Sapindales&quot; ## [26] &quot;Burseraceae também é da ordem Sapindales&quot; ## [27] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [28] &quot;Sapindaceae da ordem Sapindales&quot; ## [29] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [30] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [31] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [32] &quot;Sapindaceae da ordem Sapindales&quot; ## [33] &quot;Burseraceae também é da ordem Sapindales&quot; ## [34] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [35] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [36] &quot;Burseraceae também é da ordem Sapindales&quot; ## [37] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [38] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [39] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [40] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [41] &quot;Burseraceae também é da ordem Sapindales&quot; ## [42] &quot;Burseraceae também é da ordem Sapindales&quot; ## [43] &quot;Burseraceae também é da ordem Sapindales&quot; ## [44] &quot;Burseraceae também é da ordem Sapindales&quot; ## [45] &quot;Sapindaceae da ordem Sapindales&quot; ## [46] &quot;Burseraceae também é da ordem Sapindales&quot; ## [47] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [48] &quot;Burseraceae também é da ordem Sapindales&quot; ## [49] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [50] &quot;Burseraceae também é da ordem Sapindales&quot; ## [51] &quot;Sapindaceae da ordem Sapindales&quot; ## [52] &quot;Burseraceae também é da ordem Sapindales&quot; ## [53] &quot;Sapindaceae da ordem Sapindales&quot; ## [54] &quot;Burseraceae também é da ordem Sapindales&quot; ## [55] &quot;Sapindaceae da ordem Sapindales&quot; ## [56] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [57] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [58] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [59] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [60] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [61] &quot;Burseraceae também é da ordem Sapindales&quot; ## [62] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [63] &quot;Burseraceae também é da ordem Sapindales&quot; ## [64] &quot;Sapindaceae da ordem Sapindales&quot; ## [65] &quot;Burseraceae também é da ordem Sapindales&quot; ## [66] &quot;Burseraceae também é da ordem Sapindales&quot; ## [67] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [68] &quot;Sapindaceae da ordem Sapindales&quot; ## [69] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [70] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [71] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [72] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [73] &quot;Sapindaceae da ordem Sapindales&quot; ## [74] &quot;Burseraceae também é da ordem Sapindales&quot; ## [75] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [76] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [77] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [78] &quot;Burseraceae também é da ordem Sapindales&quot; ## [79] &quot;Burseraceae também é da ordem Sapindales&quot; ## [80] &quot;Sapindaceae da ordem Sapindales&quot; ## [81] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [82] &quot;Sapindaceae da ordem Sapindales&quot; ## [83] &quot;Sapindaceae da ordem Sapindales&quot; ## [84] &quot;Burseraceae também é da ordem Sapindales&quot; ## [85] &quot;Sapindaceae da ordem Sapindales&quot; ## [86] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [87] &quot;Burseraceae também é da ordem Sapindales&quot; ## [88] &quot;Sapindaceae da ordem Sapindales&quot; ## [89] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [90] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [91] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [92] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [93] &quot;Burseraceae também é da ordem Sapindales&quot; ## [94] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [95] &quot;Burseraceae também é da ordem Sapindales&quot; ## [96] &quot;Burseraceae também é da ordem Sapindales&quot; ## [97] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [98] &quot;Nenhuma dessas famílias é uma Sapindales&quot; ## [99] &quot;Sapindaceae da ordem Sapindales&quot; ## [100] &quot;Nenhuma dessas famílias é uma Sapindales&quot; sei_qual_ordem &lt;- ifelse(familias == &quot;Sapindaceae&quot;, &quot;Sapindaceae da ordem Sapindales&quot;, ifelse(familias == &quot;Burseraceae&quot;, &quot;Burseraceae também é da ordem Sapindales&quot;, &quot;Nenhuma dessas famílias é uma Sapindales&quot;) ) meudf &lt;- data.frame(familias, sei_qual_ordem) meudf familias sei_qual_ordem Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Rubiaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Burseraceae Burseraceae também é da ordem Sapindales Burseraceae Burseraceae também é da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales Sapindaceae Sapindaceae da ordem Sapindales Solanaceae Nenhuma dessas famílias é uma Sapindales "],["iteracoes.html", "6.3 Iterações", " 6.3 Iterações Vocês usaram várias funções da família apply, especialmente apply() e tapply(), que são funções especiais que repetem uma mesma função FUN para cada objeto de um conjunto (vetores, matrizes, valores atômicos). Essas funções utilizam portanto a lógica de iterações (em inglês, loops), ou seja, fazem a mesma ação repetidas vezes; em outras palavras, fazem LOOPs, dão voltas, realizam o mesmo percurso várias vezes, percorrem um circuito. As expressões for(){} e while(){} permitem fazer LOOPs, e LOOPs dentro de LOOPS com muita liberdade. Aprendê-las é o mesmo que aprender todas as funções da família apply juntas (apply(), tapply(), sapply(), lapply(), mapply() etc). Se você compreende os LOOPS, pode fazer o que essas funções fazem sem precisar delas (embora elas possam executar a tarefa mais rapidamente). 6.3.1 Iteração com for(){} 6.3.1.1 Exemplo 1 Um exemplo simples do que seria uma iteração com o comando for(){}: # vamos imprimir na tela as letras do objeto LETTERS for (let in 1:length(LETTERS)) { paraimprimir &lt;- paste(LETTERS[let], &quot; é a letra de índice &quot;, let) print(paraimprimir) } ## [1] &quot;A é a letra de índice 1&quot; ## [1] &quot;B é a letra de índice 2&quot; ## [1] &quot;C é a letra de índice 3&quot; ## [1] &quot;D é a letra de índice 4&quot; ## [1] &quot;E é a letra de índice 5&quot; ## [1] &quot;F é a letra de índice 6&quot; ## [1] &quot;G é a letra de índice 7&quot; ## [1] &quot;H é a letra de índice 8&quot; ## [1] &quot;I é a letra de índice 9&quot; ## [1] &quot;J é a letra de índice 10&quot; ## [1] &quot;K é a letra de índice 11&quot; ## [1] &quot;L é a letra de índice 12&quot; ## [1] &quot;M é a letra de índice 13&quot; ## [1] &quot;N é a letra de índice 14&quot; ## [1] &quot;O é a letra de índice 15&quot; ## [1] &quot;P é a letra de índice 16&quot; ## [1] &quot;Q é a letra de índice 17&quot; ## [1] &quot;R é a letra de índice 18&quot; ## [1] &quot;S é a letra de índice 19&quot; ## [1] &quot;T é a letra de índice 20&quot; ## [1] &quot;U é a letra de índice 21&quot; ## [1] &quot;V é a letra de índice 22&quot; ## [1] &quot;W é a letra de índice 23&quot; ## [1] &quot;X é a letra de índice 24&quot; ## [1] &quot;Y é a letra de índice 25&quot; ## [1] &quot;Z é a letra de índice 26&quot; Ou seja, para cada elemento do objeto let, assumindo os valores na sequência do elemento 1 ao elemento corresponden ao comprimento (== length(LETTERS)) do objeto LETTERS, execute o que está dentro de {}. 6.3.1.2 Exemplo 2 # Fazendo um loop com for(){} replicando o que a função apply() faz # criamos uma matriz vetn &lt;- rnorm(100, 30, 1) mvetn &lt;- matrix(vetn, ncol = 10, dimnames = list(paste(&quot;linha&quot;, 1:10), paste(&quot;coluna&quot;, 1:10))) head(mvetn) coluna 1 coluna 2 coluna 3 coluna 4 coluna 5 coluna 6 coluna 7 coluna 8 coluna 9 coluna 10 linha 1 29.83293 29.14018 29.23649 30.41905 30.94899 29.84389 29.97366 30.15412 29.34273 30.08479 linha 2 31.24129 31.05689 29.45685 30.92010 30.28868 30.51557 29.74122 30.46949 28.15604 30.88475 linha 3 30.29010 31.34928 29.17843 28.80200 30.94568 29.34699 29.88953 28.76698 29.47358 29.82502 linha 4 29.94628 30.14674 30.23371 28.56894 31.47962 32.13595 29.62404 28.93148 30.15042 31.61015 linha 5 30.07430 30.81179 29.26558 29.58111 29.59002 29.91044 32.09775 31.96293 27.54644 30.83061 linha 6 29.88561 28.47641 29.62197 30.23359 29.96315 28.71014 30.48448 31.47933 30.73691 31.11348 # Fazendo algo == apply(mvetn,2,mean) # cria um objeto para salvar o resultado resultado &lt;- NULL for (coluna in 1:ncol(mvetn)) { # pega a coluna cl &lt;- mvetn[, coluna] # calcula a media mcl &lt;- mean(cl) print(paste(&quot;Média da coluna&quot;, colnames(mvetn)[cl], &quot;=&quot;, round(mcl, 2))) # salva o resultado com a media do item anterior resultado &lt;- c(resultado, mcl) } ## [1] &quot;Média da coluna NA = 30.02&quot; &quot;Média da coluna NA = 30.02&quot; ## [3] &quot;Média da coluna NA = 30.02&quot; &quot;Média da coluna NA = 30.02&quot; ## [5] &quot;Média da coluna NA = 30.02&quot; &quot;Média da coluna NA = 30.02&quot; ## [7] &quot;Média da coluna NA = 30.02&quot; &quot;Média da coluna NA = 30.02&quot; ## [9] &quot;Média da coluna NA = 30.02&quot; &quot;Média da coluna NA = 30.02&quot; ## [1] &quot;Média da coluna NA = 29.77&quot; &quot;Média da coluna NA = 29.77&quot; ## [3] &quot;Média da coluna NA = 29.77&quot; &quot;Média da coluna NA = 29.77&quot; ## [5] &quot;Média da coluna NA = 29.77&quot; &quot;Média da coluna NA = 29.77&quot; ## [7] &quot;Média da coluna NA = 29.77&quot; &quot;Média da coluna NA = 29.77&quot; ## [9] &quot;Média da coluna NA = 29.77&quot; &quot;Média da coluna NA = 29.77&quot; ## [1] &quot;Média da coluna NA = 29.92&quot; &quot;Média da coluna NA = 29.92&quot; ## [3] &quot;Média da coluna NA = 29.92&quot; &quot;Média da coluna NA = 29.92&quot; ## [5] &quot;Média da coluna NA = 29.92&quot; &quot;Média da coluna NA = 29.92&quot; ## [7] &quot;Média da coluna NA = 29.92&quot; &quot;Média da coluna NA = 29.92&quot; ## [9] &quot;Média da coluna NA = 29.92&quot; &quot;Média da coluna NA = 29.92&quot; ## [1] &quot;Média da coluna NA = 29.8&quot; &quot;Média da coluna NA = 29.8&quot; ## [3] &quot;Média da coluna NA = 29.8&quot; &quot;Média da coluna NA = 29.8&quot; ## [5] &quot;Média da coluna NA = 29.8&quot; &quot;Média da coluna NA = 29.8&quot; ## [7] &quot;Média da coluna NA = 29.8&quot; &quot;Média da coluna NA = 29.8&quot; ## [9] &quot;Média da coluna NA = 29.8&quot; &quot;Média da coluna NA = 29.8&quot; ## [1] &quot;Média da coluna NA = 30.21&quot; &quot;Média da coluna NA = 30.21&quot; ## [3] &quot;Média da coluna NA = 30.21&quot; &quot;Média da coluna NA = 30.21&quot; ## [5] &quot;Média da coluna NA = 30.21&quot; &quot;Média da coluna NA = 30.21&quot; ## [7] &quot;Média da coluna NA = 30.21&quot; &quot;Média da coluna NA = 30.21&quot; ## [9] &quot;Média da coluna NA = 30.21&quot; &quot;Média da coluna NA = 30.21&quot; ## [1] &quot;Média da coluna NA = 29.85&quot; &quot;Média da coluna NA = 29.85&quot; ## [3] &quot;Média da coluna NA = 29.85&quot; &quot;Média da coluna NA = 29.85&quot; ## [5] &quot;Média da coluna NA = 29.85&quot; &quot;Média da coluna NA = 29.85&quot; ## [7] &quot;Média da coluna NA = 29.85&quot; &quot;Média da coluna NA = 29.85&quot; ## [9] &quot;Média da coluna NA = 29.85&quot; &quot;Média da coluna NA = 29.85&quot; ## [1] &quot;Média da coluna NA = 30.34&quot; &quot;Média da coluna NA = 30.34&quot; ## [3] &quot;Média da coluna NA = 30.34&quot; &quot;Média da coluna NA = 30.34&quot; ## [5] &quot;Média da coluna NA = 30.34&quot; &quot;Média da coluna NA = 30.34&quot; ## [7] &quot;Média da coluna NA = 30.34&quot; &quot;Média da coluna NA = 30.34&quot; ## [9] &quot;Média da coluna NA = 30.34&quot; &quot;Média da coluna NA = 30.34&quot; ## [1] &quot;Média da coluna NA = 30.33&quot; &quot;Média da coluna NA = 30.33&quot; ## [3] &quot;Média da coluna NA = 30.33&quot; &quot;Média da coluna NA = 30.33&quot; ## [5] &quot;Média da coluna NA = 30.33&quot; &quot;Média da coluna NA = 30.33&quot; ## [7] &quot;Média da coluna NA = 30.33&quot; &quot;Média da coluna NA = 30.33&quot; ## [9] &quot;Média da coluna NA = 30.33&quot; &quot;Média da coluna NA = 30.33&quot; ## [1] &quot;Média da coluna NA = 29.95&quot; &quot;Média da coluna NA = 29.95&quot; ## [3] &quot;Média da coluna NA = 29.95&quot; &quot;Média da coluna NA = 29.95&quot; ## [5] &quot;Média da coluna NA = 29.95&quot; &quot;Média da coluna NA = 29.95&quot; ## [7] &quot;Média da coluna NA = 29.95&quot; &quot;Média da coluna NA = 29.95&quot; ## [9] &quot;Média da coluna NA = 29.95&quot; &quot;Média da coluna NA = 29.95&quot; ## [1] &quot;Média da coluna NA = 30.69&quot; &quot;Média da coluna NA = 30.69&quot; ## [3] &quot;Média da coluna NA = 30.69&quot; &quot;Média da coluna NA = 30.69&quot; ## [5] &quot;Média da coluna NA = 30.69&quot; &quot;Média da coluna NA = 30.69&quot; ## [7] &quot;Média da coluna NA = 30.69&quot; &quot;Média da coluna NA = 30.69&quot; ## [9] &quot;Média da coluna NA = 30.69&quot; &quot;Média da coluna NA = 30.69&quot; # adicona o nome das colunas names(resultado) &lt;- colnames(mvetn) # ver o resultado resultado ## coluna 1 coluna 2 coluna 3 coluna 4 coluna 5 coluna 6 coluna 7 coluna 8 ## 30.02231 29.76714 29.91783 29.79591 30.21034 29.85470 30.33654 30.32650 ## coluna 9 coluna 10 ## 29.94533 30.69054 # identico ao apply, maior controle de como a média é aplicada resultado == apply(mvetn, 2, mean) ## coluna 1 coluna 2 coluna 3 coluna 4 coluna 5 coluna 6 coluna 7 coluna 8 ## TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## coluna 9 coluna 10 ## TRUE TRUE 6.3.1.3 Exemplo 3 Agora usando for(){} para fazer algo como o tapply(). # Fazendo algo == tapply(mvetn[,2],mvetn$classe,sum) # criamos uma matriz vetn &lt;- rnorm(100, 30, 1) mvetn &lt;- matrix(vetn, ncol = 10, dimnames = list(paste(&quot;linha&quot;, 1:10), paste(&quot;coluna&quot;, 1:10))) # transformamos num data.frame adicionando uma coluna categorica mvetn &lt;- data.frame(classe = sample(paste(&quot;categ&quot;, 1:3, sep = &quot;&quot;), size = nrow(mvetn), replace = T), mvetn) head(mvetn[, 1:5]) # cria um objeto para salvar o resultado resultado &lt;- NULL # para cada categoria for (ct in 1:length(levels(mvetn$classe))) { # pega a categoria cl &lt;- levels(mvetn$classe)[ct] # filtra os dados (vetor logico) vl &lt;- mvetn$classe == cl # calcula a soma dos dados da categoria soma &lt;- sum(mvetn[vl, 2], na.rm = T) # imprime o passo print(paste(&quot;A soma da categoria&quot;, cl, &quot; é igual a &quot;, soma)) # junta os resultados resultado &lt;- c(resultado, soma) } # atribui nomes aos elementos do vetor de somas names(resultado) &lt;- levels(mvetn$classe) # confere resultado == tapply(mvetn[, 2], mvetn$classe, sum) 6.3.1.4 Exemplo 4 Calculando somas e médias de linhas, similar ao que podemos fazer com a função apply(): somas &lt;- NULL # objeto vazio para salvar soma de cada linha medias &lt;- NULL # objeto vazio para salvar medias de cada linha for (i in 1:nrow(X)) { # para cada linha somai &lt;- sum(X[i, ]) # soma dos valores na linha i somas &lt;- c(somas, somai) # junta a somai com o resto (que estará vazio na primeira vez) mediai &lt;- mean(X[i, ]) # média dos valores na linha i medias &lt;- c(medias, mediai) # junta as medias } # como a matriz tem nomes, acrescenta esses nomes aos vetores com resultados names(medias) &lt;- rownames(X) medias ## ln 1 ln 2 ln 3 ln 4 ## 17 18 19 20 names(somas) &lt;- rownames(X) somas ## ln 1 ln 2 ln 3 ln 4 ## 153 162 171 180 6.3.2 Iteração com while(){} O comando while(){} funciona de forma parecida, mas faz algo ENQUANTO (em inglês, while) a condição em while(){} seja verdadeira. Um exemplo simples: 6.3.2.1 Exemplo 1 # cria um vetor de valores aleatorizados vet &lt;- sample(10:100) # amostra um valor do vetor até que este valor seja 10 conta &lt;- 1 valor &lt;- 0 while (valor != 10) { valor &lt;- sample(vet, 1) print(paste(&quot;o valor selecionado na iteração&quot;, conta, &quot;foi de &quot;, valor)) conta &lt;- conta + 1 } ## [1] &quot;o valor selecionado na iteração 1 foi de 81&quot; ## [1] &quot;o valor selecionado na iteração 2 foi de 23&quot; ## [1] &quot;o valor selecionado na iteração 3 foi de 30&quot; ## [1] &quot;o valor selecionado na iteração 4 foi de 32&quot; ## [1] &quot;o valor selecionado na iteração 5 foi de 39&quot; ## [1] &quot;o valor selecionado na iteração 6 foi de 74&quot; ## [1] &quot;o valor selecionado na iteração 7 foi de 88&quot; ## [1] &quot;o valor selecionado na iteração 8 foi de 16&quot; ## [1] &quot;o valor selecionado na iteração 9 foi de 60&quot; ## [1] &quot;o valor selecionado na iteração 10 foi de 61&quot; ## [1] &quot;o valor selecionado na iteração 11 foi de 62&quot; ## [1] &quot;o valor selecionado na iteração 12 foi de 74&quot; ## [1] &quot;o valor selecionado na iteração 13 foi de 10&quot; 6.3.3 Iteração com for(){} e a condicional if(){} 6.3.3.1 Exemplo 1 # cria um vetor de valores aleatorizados vet &lt;- sample(10:100, 60, replace = T) # amostra um valor do vetor até que este valor seja 10 for (v in 1:10000) { valor &lt;- sample(vet, 1) if (valor == 10) { # se o valor selecionado aleatoriamente for 10, ou seja se a expressão valor==10 for TRUE execute: # imprima isso print(paste(&quot;A primeira vez que o valor 10 foi selecionado aleatoriamente foi quando o objeto v assumiu o valor de&quot;, v)) # interrompa (quebre) o loop break # note este argumento } else { # caso contrario, valor!=10, imprime o valor selecionado e continua o loop print(paste(&quot;O valor selecionado foi &quot;, valor, &quot;no indice&quot;, v)) } } É possível que o script acima repita as 10000 vezes do for(){} sem encontrar o valor 10, até porque o 10 pode não estar em vet se não for amostrado. "],["criando-ou-modificando-funções.html", "6.4 Criando ou modificando funções", " 6.4 Criando ou modificando funções Funções são objetos que contêm um script que usa os argumentos (também objetos) para executar alguma coisa. A expressão function(){} é utilizada para criar funções. Criar funções é útil pois podem executar algo várias vezes (podendo ser de forma diferente) sem precisar reescrever o código todas às vezes. Isso nos auxilia em práticas rotineiras como, por exemplo, na manipulação de um conjunto de dados de localização geográfica de espécimes botânicos. Podemos gerar um mapa personalizado de distribuição geográfica de cada espécie criando uma função para plotar um mapa, e depois utilizamos a aplicamos a função sobre a categoria, neste caso, a variável contendo o nome da espécie. É muito útil também poder modificar uma função criada por outra pessoa, seja uma função de um determinado pacote ou uma função que você encontrou em uma página qualquer navegando pela internet. É muito simples construir uma função. Há um bloco que deve ser sempre repetido: function(meu_argumento1, meu_argumento2, ...) { # AQUI FICAM AS AÇÕES DE SUA FUNÇÃO, COMO POR EXEMPLO return(&quot;resultado da função&quot;) # } É costume sempre utilizar a função return() como último elemento da função para que algum objeto seja retornado ao usuário. ?return # veja o help 6.4.1 Exemplo I Vamos fazer a nossa versão da função mean(), que tira a média aritmética dos valores de um vetor. # Vamos fazer essa função na unha: amedia &lt;- function(x) { # x será um vetor de comprimento &gt;=1 e todos os valores devem ser numéricos, senão precisamos avisar. # essa funçao ira retornar o valor do &#39;am&#39; que definimos como nulo inicialmente am &lt;- NULL # condicao 1 c1 &lt;- is.vector(x) # condicao 2 xx &lt;- as.numeric(x) # convertemos em numérico xx &lt;- xx[!is.na(xx)] # tira o que não é número (o que não foi convertido ou está em branco) c2 &lt;- length(xx) == length(x) # os comprimentos são iguais? e tem algum valor? if (c1 &amp; length(xx) &gt; 0) { # se for um vetor e houver algum valor numérico, pode calcular a média am &lt;- sum(xx) / length(xx) if (!c2) { # se c1 for falso print(paste(length(x) - length(xx), &quot; valores do vetor não são numéricos e foram excluídos&quot;)) # avisa } } else { print(&quot;O objeto não é um vetor ou não há valores numéricos&quot;) # avisa } return(am) } Vamos agora utilizar a função: v1 &lt;- c(1, 2, 3, 4, 5, 6) amedia(v1) ## [1] 3.5 v1 &lt;- c(3, 3, 3, 3, 3, 3, 3) amedia(v1) ## [1] 3 v1 &lt;- c(3, 3, 3, 3, 3, 3, &quot;A&quot;) amedia(v1) ## Warning in amedia(v1): NAs introduced by coercion ## [1] &quot;1 valores do vetor não são numéricos e foram excluídos&quot; ## [1] 3 v1 &lt;- LETTERS amedia(v1) ## Warning in amedia(v1): NAs introduced by coercion ## [1] &quot;O objeto não é um vetor ou não há valores numéricos&quot; ## NULL 6.4.2 Exemplo II Os loops por meio da expressão for(){} e a condicional if são muito úteis dentro de funções. Sua função pode, por exemplo, ser construida para que um argumento possa assumir diferentes valores e, a depender do valor, executar uma coisa diferente. Como exemplo, vamos criar uma função que contem o script do exemplo de if: # CRIA uma funcao com os seguintes argumentos: # vet = um vetor de valores # busca.valor = um valor para busca em vet # nrun = numero de vezes da iteracao minhafuncao &lt;- function(vet, busca.valor, nrun) { # cria um loop do número de vezes (note o argumento nrun abaixo) for (v in 1:nrun) { # pega um valor aleatorio # amostra o indice aleatoriamente idx &lt;- sample(1:length(vet), 1) valor &lt;- vet[idx] # se o valor amostrado for igual ao valor procurado para if (valor == busca.valor) { # se o valor selecionado aleatoriamente for 10, ou seja se a expressão valor==10 for TRUE execute: # imprima isso # print(paste(&quot;A primeira vez que o valor 10 foi selecionado aleatoriamente foi quando o objeto v assumiu o valor de&quot;,v)) # interrompa (quebre) o loop break # note este argumento } else { # caso contrario, valor!=10, imprime o valor selecionado e continua o loop # print(paste(&quot;O valor selecionado foi &quot;,valor,&quot;no indice&quot;,v)) } } # o valor do objeto v será o último valor assumido na execucao do for(){}, se tiver encontrado será menor que nrun, caso contrario será ==nrun # se encontrou retorna o indice do valor (que é o último valor assumido por idx) # caso o último valor seja == ao valor buscado, ou que o ultimo v é menor que o especificado em nrun, retorna o indice do valor no vetor vet if (v &lt; nrun | valor == busca.valor) { print(paste(&quot;Encontrei o valor&quot;, busca.valor, &quot;no indice, &quot;, idx, &quot;do vetor indicado&quot;)) return(idx) } else { # caso contrário returna NA print(paste(&quot;Não encontrei o valor&quot;, busca.valor, &quot;no vetor indicado&quot;)) return(NA) } } Vamos utilizar a função recém-criada: umvetor &lt;- sample(10:100, 60, replace = T) minhafuncao(vet = umvetor, busca.valor = 22, nrun = 1000) ## [1] &quot;Não encontrei o valor 22 no vetor indicado&quot; ## [1] NA retornou.isso &lt;- minhafuncao(vet = umvetor, busca.valor = 22, nrun = 1000) ## [1] &quot;Não encontrei o valor 22 no vetor indicado&quot; # e usar de novo com outros valores umvetor &lt;- sample(200:300, 50, replace = T) sort(table(umvetor), decreasing = T)[1:10] 255 210 219 228 260 261 264 269 201 202 3 2 2 2 2 2 2 2 1 1 minhafuncao(vet = umvetor, busca.valor = 250, nrun = 10000) ## [1] &quot;Encontrei o valor 250 no indice, 36 do vetor indicado&quot; ## [1] 36 retornou.isso &lt;- minhafuncao(vet = umvetor, busca.valor = 250, nrun = 10000) ## [1] &quot;Encontrei o valor 250 no indice, 36 do vetor indicado&quot; "],["sabermais-condic.html", "6.5 Para saber mais:", " 6.5 Para saber mais: Acesse vídeoaulas com conteúdo parcial deste capítulo clicando no tópicos abaixo: Vetores e Operadores Lógicos; Condicionais no R Auxílio do R - executem a expressão ?Control no R e vejam a explicação sobre condicionais. "],["sumar-dados.html", "Capítulo 7 Sumarização de dados ", " Capítulo 7 Sumarização de dados "],["tabela-dinamica.html", "7.1 Tabelas dinâmicas", " 7.1 Tabelas dinâmicas A função tapply() calcula alguma funcão sobre um vetor numérico para cada categoria de um fator. Já a função aggregate() faz o mesmo, mas permite múltiplos fatores e sempre retorna um data.frame. Vamos usar dados de parcelas em caixetais, formações dominadas por Tabebuia cassinoides (Lam.) D.C. (Bignoniaceae), espécie comum da Mata Atlântica nos estados de São Paulo, Minas Gerais, Rio de Janeiro e Espírito Santo. Baixe o arquivo para seu computador e instale-o na sua pasta de trabalho antes de seguir com os comandos abaixo. caixeta &lt;- read.table(&quot;caixeta.csv&quot;, sep = &quot;,&quot;, header = T) names(caixeta) ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; ## tapply: resumo de uma variavel numerica, separada por niveis de um ou mais fatores ?tapply # veja o help dessa função # altura máxima de cada especie tapply(caixeta$h, INDEX = caixeta$especie, FUN = max) ## Alchornea triplinervia Andira fraxinifolia bombacaceae ## 140 90 150 ## Cabralea canjerana Callophyllum brasiliensis Calophyllum brasiliensis ## 150 200 160 ## Cecropia sp Coussapoa macrocarpa Coussapoa micropoda ## 70 100 110 ## Cryptocaria moschata Cyathea sp Eugenia oblongata ## 140 30 100 ## eugenia3 fabaceae1 Ficus sp ## 110 70 130 ## Gomidesia sp Ilex durosa Ilex sp ## 110 130 90 ## indet.1 indet.2 indet.3 ## 170 80 80 ## Inga sp Jacaranda puberula jussara ## 110 50 160 ## Matayba sp Mela 1 Mela 2 ## 130 90 50 ## Myrcia sulfiflora Myrtaceae 3 myrtaceae1 ## 170 40 160 ## myrtaceae2 myrtaceae4 Pera glabrata ## 30 140 100 ## Persea sp Pisonia sp Psidium sp ## 130 110 120 ## Simplocos sp Solanum sp1 Solanum sp2 ## 90 60 70 ## Syagrus romanzoffianus Tabebuia 1 Tabebuia cassinoides ## 70 60 480 ## Tibouchina nutticeps ## 50 # circunferencia media por localidade tapply(caixeta$cap, INDEX = caixeta$local, FUN = mean) ## chauas jureia retiro ## 293.6385 404.4813 236.5972 ## &quot;Tabelas dinamicas&quot;: funcao aggregate ## Criar data.frame com altura media dos fustes por especie e por local ?aggregate # veja o help dessa função names(caixeta) ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; # circunferencia máxima por especie ob1 &lt;- aggregate(caixeta$cap, by = list(especie = caixeta$especie), FUN = max) class(ob1) # obtenho um data frame ## [1] &quot;data.frame&quot; head(ob1) especie x Alchornea triplinervia 840 Andira fraxinifolia 340 bombacaceae 380 Cabralea canjerana 720 Callophyllum brasiliensis 1130 Calophyllum brasiliensis 2100 # neste caso também poderia fazer assim ob2 &lt;- tapply(caixeta$h, caixeta$especie, max) class(ob2) # mas neste caso nos temos um array (um vetor unidimensional) ## [1] &quot;array&quot; ob2[1:10] ## Alchornea triplinervia Andira fraxinifolia bombacaceae ## 140 90 150 ## Cabralea canjerana Callophyllum brasiliensis Calophyllum brasiliensis ## 150 200 160 ## Cecropia sp Coussapoa macrocarpa Coussapoa micropoda ## 70 100 110 ## Cryptocaria moschata ## 140 # mas se eu quiser por localidade e por especie, preciso usar aggregate caixeta.alt &lt;- aggregate(caixeta$h, by = list(local = caixeta$local, especie = caixeta$especie), FUN = max) head(caixeta.alt) local especie x jureia Alchornea triplinervia 140 retiro Alchornea triplinervia 100 jureia Andira fraxinifolia 90 jureia bombacaceae 150 jureia Cabralea canjerana 150 chauas Callophyllum brasiliensis 200 ## Vamos calcular a area basal (soma da area de todo os fustes) ## calculando a area basal de cada fuste, considerando o fuste um círculo perfeito, poderíamos usar: caixeta$ab &lt;- caixeta$cap^2 / 4 * pi ## e agora criamos a planilha, com aggregate, somando as areas basais dos fustes caixeta.2 &lt;- aggregate(caixeta$ab, by = list(local = caixeta$local, parcela = caixeta$parcela, especie = caixeta$especie), FUN = sum) class(caixeta.2) ## [1] &quot;data.frame&quot; head(caixeta.2) local parcela especie x retiro 1 Alchornea triplinervia 53092.92 jureia 2 Alchornea triplinervia 554176.94 retiro 2 Alchornea triplinervia 90949.11 retiro 3 Alchornea triplinervia 230121.66 jureia 4 Alchornea triplinervia 292246.66 jureia 5 Alchornea triplinervia 273397.10 "],["tabelas-de-contagem.html", "7.2 Tabelas de contagem", " 7.2 Tabelas de contagem Vamos usar utilizar os mesmos dados de caixetas utilizados na seção 7.1. A função table() permite contar valores em fatores e vetores. caixeta &lt;- read.table(&quot;caixeta.csv&quot;, sep = &quot;,&quot;, header = T) names(caixeta) ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; ## [8] &quot;ab&quot; # tem a coluna especie # podemos resumir quantos individuos tem de cada espécie (considerando que cada linha é um individuo) table(caixeta$especie) Var1 Freq Alchornea triplinervia 15 Andira fraxinifolia 4 bombacaceae 1 Cabralea canjerana 4 Callophyllum brasiliensis 7 Calophyllum brasiliensis 4 Cecropia sp 1 Coussapoa macrocarpa 3 Coussapoa micropoda 9 Cryptocaria moschata 2 Cyathea sp 2 Eugenia oblongata 2 eugenia3 1 fabaceae1 1 Ficus sp 2 Gomidesia sp 1 Ilex durosa 8 Ilex sp 2 indet.1 1 indet.2 1 indet.3 1 Inga sp 4 Jacaranda puberula 2 jussara 37 Matayba sp 1 Mela 1 63 Mela 2 2 Myrcia sulfiflora 96 Myrtaceae 3 3 myrtaceae1 4 myrtaceae2 1 myrtaceae4 1 Pera glabrata 1 Persea sp 3 Pisonia sp 2 Psidium sp 20 Simplocos sp 2 Solanum sp1 1 Solanum sp2 1 Syagrus romanzoffianus 1 Tabebuia 1 10 Tabebuia cassinoides 698 Tibouchina nutticeps 2 # mostra as tres especies mais abundantes sort(table(caixeta$especie), decreasing = T)[1:3] Tabebuia cassinoides Myrcia sulfiflora Mela 1 698 96 63 # quantos individuos por localidade? table(caixeta$local) chauas jureia retiro 426 241 360 # especie por localidade tb &lt;- table(caixeta$especie, caixeta$local) head(tb, 3) # mostra as tres primeiras linhas chauas jureia retiro Alchornea triplinervia 0 3 12 Andira fraxinifolia 0 4 0 bombacaceae 0 1 0 # tabela de presenca e ausencia de especie por localidade tb &lt;- table(caixeta$especie, caixeta$local) # quem tem mais de 0 individuos está presente # portanto, substituo por 1 tb[tb &gt; 0] &lt;- 1 head(tb) chauas jureia retiro Alchornea triplinervia 0 1 1 Andira fraxinifolia 0 1 0 bombacaceae 0 1 0 Cabralea canjerana 0 1 0 Callophyllum brasiliensis 1 0 0 Calophyllum brasiliensis 0 1 0 # sendo assim, posso ver o numero de especie por localidade aplicando a suma das linha que tem 1 para cada coluna apply(tb, 2, sum) ## chauas jureia retiro ## 13 22 13 "],["lógica-da-junção-de-tabelas.html", "7.3 Lógica da junção de tabelas", " 7.3 Lógica da junção de tabelas Unir tabelas é uma prática corriqueira com bases de dados. É comum termos dados relacionados em tabelas diferentes, recurso que minimiza a entrada de redundância e portanto de erros nos nossos dados. É frequente também a necessidade de ter esses dados reunidos em uma só tabela. Para unir tabelas, é necessário que duas tabelas diferentes possuam uma coluna em comum, a quem vamos chamar de identificador. Vamos criar aqui uma situação artificial com os dados iris, mas imagine uma situação mais complexa com muitos dados. # uma tabela com os nomes das especies spp &lt;- unique(data.frame( GENUS = &quot;Iris&quot;, SPECIES = iris$Species, stringsAsFactors = F )) spp$fullname &lt;- paste(spp$GENUS, spp$SPECIES) spp GENUS SPECIES fullname 1 Iris setosa Iris setosa 51 Iris versicolor Iris versicolor 101 Iris virginica Iris virginica Vamos adicionar uns dados ao objeto spp. Para isso, utilizaremos o pacote taxize (Chamberlain et al. 2020) para buscar nomes de espécies na rede. Para fazer uso da função tp_search(), é necessário ter uma chave API, que nada mais é que uma senha para que você possa acessar serviços na rede sem a necessidade de um navegador. Nós utilizamos uma chave obtida junto ao Tropicos.org, base de dados do Jardim Botânico do Missouri (Missouri Botanical Garden). O pacote taxize oferece uma função chamada use_tropicos() que abre o navegador na página de solicitação da chave API. Você pode executar o comando, preencher o formulário e aguardar por sua chave: use_tropicos() Para este exemplo, guardamos nossa chave API em um objeto chamado tropicos_key que, por motivos óbvios, não mostraremos aqui o que ele guarda: # install.packages(&quot;taxize&quot;) library(&quot;taxize&quot;) # instale se nao tiver sppinfo &lt;- sapply(spp$fullname, tp_search, key = tropicos_key, type = &quot;exact&quot;) O resultado de nossa pesquisa foi estocado no objeto sppinfo. Vamos pegar as colunas obtidas para todos os nomes: keys &lt;- table(unlist(lapply(sppinfo, names))) keys &lt;- names(keys[keys == length(sppinfo)]) keys ## [1] &quot;author&quot; &quot;displaydate&quot; ## [3] &quot;displayreference&quot; &quot;family&quot; ## [5] &quot;nameid&quot; &quot;nomenclaturestatusname&quot; ## [7] &quot;rankabbreviation&quot; &quot;scientificname&quot; ## [9] &quot;scientificnamewithauthors&quot; &quot;totalrows&quot; Juntemos agora tudo em um único data.frame: sppinfo &lt;- as.data.frame(do.call(mapply, c(FUN = c, lapply(sppinfo, `[`, keys))), stringsAsFactors = F) sppinfo author displaydate displayreference family nameid nomenclaturestatusname rankabbreviation scientificname scientificnamewithauthors totalrows Iris setosa Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 Iris versicolor1 L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 Iris versicolor2 Thunb. 1784 Fl. Jap. 34 Iridaceae 100206951 Illegitimate sp. Iris versicolor Iris versicolor Thunb. 2 Iris virginica L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 Vamos excluir os nomes ilegítimos: sppinfo &lt;- sppinfo[-grep(&quot;illeg&quot;, sppinfo$nomenclaturestatusname, ignore.case = T), ] sppinfo author displaydate displayreference family nameid nomenclaturestatusname rankabbreviation scientificname scientificnamewithauthors totalrows Iris setosa Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 Iris versicolor1 L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 Iris virginica L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 Vamos agora criar um identificador compartilhado entre as tabelas: sppinfo$Species &lt;- gsub(&quot;Iris &quot;, &quot;&quot;, sppinfo$scientificname) Vamos bagunçar a ordem dos dados em sppinfo para mostrar como se procede a junção de tabelas: set.seed(4857) sppinfo &lt;- sppinfo[sample(1:3), ] rownames(sppinfo) &lt;- sppinfo$Species Agora temos dois conjuntos de dados que em comum possuem a coluna Species, mas apresentam linhas diferentes: sppinfo author displaydate displayreference family nameid nomenclaturestatusname rankabbreviation scientificname scientificnamewithauthors totalrows Species versicolor L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor virginica L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica setosa Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa head(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa Suponhamos que você queira adicionar à tabela iris uma coluna com informação que está na tabela sppinfo. Podemos pensar em duas maneiras de executar esta ação. 7.3.1 Maneira 1 - função match() Pegaremos as linhas da tabela sppinfo com correspondência a cada linha da tabela iris. Para isso, devemos ter o índice da tabela sppinfo segundo o valor da coluna Species, que é o identificador em comum entre as duas tabelas: idxinfo &lt;- match(iris$Species, sppinfo$Species) Guardamos esta correspondência no vetor idxinfo, que possui o mesmo comprimento que o número de linhas que iris e contem o número das linhas (os índices!) da tabela sppinfo: # assim, seguindo indexacao numerica eu posso pegar informacoes da tabela sppinfo e colocar na tabela iris iris$speciesComAutor &lt;- sppinfo$scientificnamewithauthors[idxinfo] head(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species speciesComAutor 5.1 3.5 1.4 0.2 setosa Iris setosa Pall. ex Link 4.9 3.0 1.4 0.2 setosa Iris setosa Pall. ex Link 4.7 3.2 1.3 0.2 setosa Iris setosa Pall. ex Link 4.6 3.1 1.5 0.2 setosa Iris setosa Pall. ex Link 5.0 3.6 1.4 0.2 setosa Iris setosa Pall. ex Link 5.4 3.9 1.7 0.4 setosa Iris setosa Pall. ex Link Agora, vamos unir as duas tabelas: novoiris &lt;- cbind(iris, sppinfo[idxinfo, ]) head(novoiris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species speciesComAutor author displaydate displayreference family nameid nomenclaturestatusname rankabbreviation scientificname scientificnamewithauthors totalrows Species setosa 5.1 3.5 1.4 0.2 setosa Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.1 4.9 3.0 1.4 0.2 setosa Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.2 4.7 3.2 1.3 0.2 setosa Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.3 4.6 3.1 1.5 0.2 setosa Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.4 5.0 3.6 1.4 0.2 setosa Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.5 5.4 3.9 1.7 0.4 setosa Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa 7.3.2 Maneira 2 - índices nominais A tabela sppinfo contem nomes de linhas que correspondem aos valores que estão na coluna iris$Species. Portanto, para fazer a mesma coisa que fizemos na maneira 1, nós poderíamos simplesmente filtrar através dos nomes das linhas da tabela sppinfo: iris$speciesComAutor &lt;- sppinfo[iris$Species, ]$scientificnamewithauthors # juntando as duas tabelas completas novoiris &lt;- cbind(iris, sppinfo[iris$Species, ]) novoiris Sepal.Length Sepal.Width Petal.Length Petal.Width Species speciesComAutor author displaydate displayreference family nameid nomenclaturestatusname rankabbreviation scientificname scientificnamewithauthors totalrows Species versicolor 5.1 3.5 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.1 4.9 3.0 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.2 4.7 3.2 1.3 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.3 4.6 3.1 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.4 5.0 3.6 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.5 5.4 3.9 1.7 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.6 4.6 3.4 1.4 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.7 5.0 3.4 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.8 4.4 2.9 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.9 4.9 3.1 1.5 0.1 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.10 5.4 3.7 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.11 4.8 3.4 1.6 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.12 4.8 3.0 1.4 0.1 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.13 4.3 3.0 1.1 0.1 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.14 5.8 4.0 1.2 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.15 5.7 4.4 1.5 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.16 5.4 3.9 1.3 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.17 5.1 3.5 1.4 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.18 5.7 3.8 1.7 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.19 5.1 3.8 1.5 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.20 5.4 3.4 1.7 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.21 5.1 3.7 1.5 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.22 4.6 3.6 1.0 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.23 5.1 3.3 1.7 0.5 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.24 4.8 3.4 1.9 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.25 5.0 3.0 1.6 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.26 5.0 3.4 1.6 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.27 5.2 3.5 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.28 5.2 3.4 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.29 4.7 3.2 1.6 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.30 4.8 3.1 1.6 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.31 5.4 3.4 1.5 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.32 5.2 4.1 1.5 0.1 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.33 5.5 4.2 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.34 4.9 3.1 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.35 5.0 3.2 1.2 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.36 5.5 3.5 1.3 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.37 4.9 3.6 1.4 0.1 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.38 4.4 3.0 1.3 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.39 5.1 3.4 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.40 5.0 3.5 1.3 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.41 4.5 2.3 1.3 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.42 4.4 3.2 1.3 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.43 5.0 3.5 1.6 0.6 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.44 5.1 3.8 1.9 0.4 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.45 4.8 3.0 1.4 0.3 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.46 5.1 3.8 1.6 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.47 4.6 3.2 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.48 5.3 3.7 1.5 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor versicolor.49 5.0 3.3 1.4 0.2 setosa Iris versicolor L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600268 No opinion sp. Iris versicolor Iris versicolor L. 2 versicolor virginica 7.0 3.2 4.7 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.1 6.4 3.2 4.5 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.2 6.9 3.1 4.9 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.3 5.5 2.3 4.0 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.4 6.5 2.8 4.6 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.5 5.7 2.8 4.5 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.6 6.3 3.3 4.7 1.6 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.7 4.9 2.4 3.3 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.8 6.6 2.9 4.6 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.9 5.2 2.7 3.9 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.10 5.0 2.0 3.5 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.11 5.9 3.0 4.2 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.12 6.0 2.2 4.0 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.13 6.1 2.9 4.7 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.14 5.6 2.9 3.6 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.15 6.7 3.1 4.4 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.16 5.6 3.0 4.5 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.17 5.8 2.7 4.1 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.18 6.2 2.2 4.5 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.19 5.6 2.5 3.9 1.1 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.20 5.9 3.2 4.8 1.8 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.21 6.1 2.8 4.0 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.22 6.3 2.5 4.9 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.23 6.1 2.8 4.7 1.2 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.24 6.4 2.9 4.3 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.25 6.6 3.0 4.4 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.26 6.8 2.8 4.8 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.27 6.7 3.0 5.0 1.7 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.28 6.0 2.9 4.5 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.29 5.7 2.6 3.5 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.30 5.5 2.4 3.8 1.1 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.31 5.5 2.4 3.7 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.32 5.8 2.7 3.9 1.2 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.33 6.0 2.7 5.1 1.6 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.34 5.4 3.0 4.5 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.35 6.0 3.4 4.5 1.6 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.36 6.7 3.1 4.7 1.5 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.37 6.3 2.3 4.4 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.38 5.6 3.0 4.1 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.39 5.5 2.5 4.0 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.40 5.5 2.6 4.4 1.2 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.41 6.1 3.0 4.6 1.4 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.42 5.8 2.6 4.0 1.2 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.43 5.0 2.3 3.3 1.0 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.44 5.6 2.7 4.2 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.45 5.7 3.0 4.2 1.2 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.46 5.7 2.9 4.2 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.47 6.2 2.9 4.3 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.48 5.1 2.5 3.0 1.1 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica virginica.49 5.7 2.8 4.1 1.3 versicolor Iris virginica L. L. 1753 Sp. Pl. 1: 39 Iridaceae 16600544 No opinion sp. Iris virginica Iris virginica L. 1 virginica setosa 6.3 3.3 6.0 2.5 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.1 5.8 2.7 5.1 1.9 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.2 7.1 3.0 5.9 2.1 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.3 6.3 2.9 5.6 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.4 6.5 3.0 5.8 2.2 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.5 7.6 3.0 6.6 2.1 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.6 4.9 2.5 4.5 1.7 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.7 7.3 2.9 6.3 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.8 6.7 2.5 5.8 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.9 7.2 3.6 6.1 2.5 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.10 6.5 3.2 5.1 2.0 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.11 6.4 2.7 5.3 1.9 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.12 6.8 3.0 5.5 2.1 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.13 5.7 2.5 5.0 2.0 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.14 5.8 2.8 5.1 2.4 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.15 6.4 3.2 5.3 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.16 6.5 3.0 5.5 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.17 7.7 3.8 6.7 2.2 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.18 7.7 2.6 6.9 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.19 6.0 2.2 5.0 1.5 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.20 6.9 3.2 5.7 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.21 5.6 2.8 4.9 2.0 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.22 7.7 2.8 6.7 2.0 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.23 6.3 2.7 4.9 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.24 6.7 3.3 5.7 2.1 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.25 7.2 3.2 6.0 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.26 6.2 2.8 4.8 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.27 6.1 3.0 4.9 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.28 6.4 2.8 5.6 2.1 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.29 7.2 3.0 5.8 1.6 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.30 7.4 2.8 6.1 1.9 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.31 7.9 3.8 6.4 2.0 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.32 6.4 2.8 5.6 2.2 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.33 6.3 2.8 5.1 1.5 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.34 6.1 2.6 5.6 1.4 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.35 7.7 3.0 6.1 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.36 6.3 3.4 5.6 2.4 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.37 6.4 3.1 5.5 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.38 6.0 3.0 4.8 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.39 6.9 3.1 5.4 2.1 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.40 6.7 3.1 5.6 2.4 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.41 6.9 3.1 5.1 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.42 5.8 2.7 5.1 1.9 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.43 6.8 3.2 5.9 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.44 6.7 3.3 5.7 2.5 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.45 6.7 3.0 5.2 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.46 6.3 2.5 5.0 1.9 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.47 6.5 3.0 5.2 2.0 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.48 6.2 3.4 5.4 2.3 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa setosa.49 5.9 3.0 5.1 1.8 virginica Iris setosa Pall. ex Link Pall. ex Link 1820 Jahrb. Gewächsk. 1(3): 71 Iridaceae 16600262 No opinion sp. Iris setosa Iris setosa Pall. ex Link 1 setosa Referências "],["junção-de-tabelas-utilizando-funções.html", "7.4 Junção de tabelas utilizando funções4", " 7.4 Junção de tabelas utilizando funções4 O pacote base do R fornece uma função que executa essa ação, chamada merge(). Porém, há alguns tipos de junções não podem ser executados com esta função, o que nos levará ao uso de vetores lógicos em conjunto com a função interaction(). Daremos exemplos com essas duas novas maneiras. 7.4.1 Dados para nossa prática Utilizaremos três tabelas para esta prática: O data.frame tab1 possui nomes de famílias, gêneros e epítetos específicos de algumas angiospermas: familia &lt;- c(&quot;Burseraceae&quot;, &quot;Solanaceae&quot;, &quot;Sapindaceae&quot;, &quot;Rubiaceae&quot;, &quot;Lauraceae&quot;) generos &lt;- c(&quot;Protium&quot;, &quot;Trattinnickia&quot;, &quot;Dacryodes&quot;, &quot;Duckeodendron&quot;, &quot;Markea&quot;, &quot;Solanum&quot;, &quot;Allophylastrum&quot;, &quot;Cupania&quot;, &quot;Thinouia&quot;, &quot;Psychotria&quot;, &quot;Duroia&quot;, &quot;Cinchona&quot;, &quot;Ocotea&quot;, &quot;Licaria&quot;, &quot;Rhodostemonodaphne&quot;, &quot;Anisophyllea&quot;, &quot;Freziera&quot;) epitetos &lt;- c(&quot;aracouchini&quot;, &quot;burserifolia&quot;, &quot;edilsonii&quot;, &quot;cestroides&quot;, &quot;ulei&quot;, &quot;cyathophorum&quot;, &quot;frutescens&quot;, &quot;rubiginosa&quot;, &quot;myriantha&quot;, &quot;viridis&quot;, &quot;eriopila&quot;, &quot;amazonica&quot;, &quot;delicata&quot;, &quot;aureosericea&quot;, &quot;recurva&quot;, &quot;manausensis&quot;, &quot;carinata&quot;) tab1 &lt;- data.frame(familia = c(rep(familia, each = 3), &quot;Anisophylleaceae&quot;, &quot;Pentaphylacaceae&quot;), genero = generos, epiteto = epitetos, stringsAsFactors = FALSE) Tabela 7.1: Tabela 1 familia genero epiteto Burseraceae Protium aracouchini Burseraceae Trattinnickia burserifolia Burseraceae Dacryodes edilsonii Solanaceae Duckeodendron cestroides Solanaceae Markea ulei Solanaceae Solanum cyathophorum Sapindaceae Allophylastrum frutescens Sapindaceae Cupania rubiginosa Sapindaceae Thinouia myriantha Rubiaceae Psychotria viridis Rubiaceae Duroia eriopila Rubiaceae Cinchona amazonica Lauraceae Ocotea delicata Lauraceae Licaria aureosericea Lauraceae Rhodostemonodaphne recurva Anisophylleaceae Anisophyllea manausensis Pentaphylacaceae Freziera carinata O data.frame tab2 contem um conjunto pequeno com alguns nomes de famílias, gêneros, e o nome de seus respectivos clados acima dos nomes de ordens segundo o APG (2016): familia2 &lt;- c(&quot;Burseraceae&quot;, &quot;Solanaceae&quot;, &quot;Sapindaceae&quot;, &quot;Rubiaceae&quot;, &quot;Annonaceae&quot;) generos2 &lt;- c(&quot;Protium&quot;, &quot;Duckeodendron&quot;, &quot;Thinouia&quot;, &quot;Psychotria&quot;, &quot;Guatteria&quot;) clado &lt;- c(&quot;Malvids&quot;, &quot;Lamiids&quot;, &quot;Malvids&quot;, &quot;Lamiids&quot;, &quot;Magnoliids&quot;) tab2 &lt;- data.frame(familia = familia2, genero = generos2, clado = clado, stringsAsFactors = FALSE) Tabela 7.2: Tabela 2 familia genero clado Burseraceae Protium Malvids Solanaceae Duckeodendron Lamiids Sapindaceae Thinouia Malvids Rubiaceae Psychotria Lamiids Annonaceae Guatteria Magnoliids O data.frame tab3 corresponde à tabela 2, tab2, sem as famílias Solanaceae e Rubiaceae: tab3 &lt;- subset(tab1, familia %in% c(&quot;Burseraceae&quot;, &quot;Sapindaceae&quot;)) Tabela 7.3: Tabela 3 familia genero epiteto 1 Burseraceae Protium aracouchini 2 Burseraceae Trattinnickia burserifolia 3 Burseraceae Dacryodes edilsonii 7 Sapindaceae Allophylastrum frutescens 8 Sapindaceae Cupania rubiginosa 9 Sapindaceae Thinouia myriantha 7.4.2 Maneira 3 - função merge() O básico para entender a função merge() é saber que existem dois argumentos, x e y, que correspondem aos data.frames de entrada. Quando unimos tabelas, existem junções que adicionam variáveis, e junções que filtram variáveis. Vamos ver abaixo 4 tipos da primeira ( junção interna, junção à esquerda, junção à direita, junção total), e dois tipos desta última ( semijunção e antijunção). 7.4.2.1 Junção interna Ao juntarmos tabelas x e y, temos todas as linhas de x em que há valores em comum com y, e todas as colunas de x e y. Se houver múltiplas correspondências entre x e y, todas as combinações retornam. Fonte: www.sqlfromhell.com Em nosso exemplo, vamos unir as tabelas 1 e 2. Ambas possuem em comum os identificadores familia e genero. Para facilitar o entendimento, vamos verificar primeiro cada tabela com cores para checar as correspondências entre x e y nas variáveis em comum: Tabela 7.4: Tabela 1 familia genero epiteto Burseraceae Protium aracouchini Burseraceae Trattinnickia burserifolia Burseraceae Dacryodes edilsonii Solanaceae Duckeodendron cestroides Solanaceae Markea ulei Solanaceae Solanum cyathophorum Sapindaceae Allophylastrum frutescens Sapindaceae Cupania rubiginosa Sapindaceae Thinouia myriantha Rubiaceae Psychotria viridis Rubiaceae Duroia eriopila Rubiaceae Cinchona amazonica Lauraceae Ocotea delicata Lauraceae Licaria aureosericea Lauraceae Rhodostemonodaphne recurva Anisophylleaceae Anisophyllea manausensis Pentaphylacaceae Freziera carinata Tabela 7.5: Tabela 2 familia genero clado Burseraceae Protium Malvids Solanaceae Duckeodendron Lamiids Sapindaceae Thinouia Malvids Rubiaceae Psychotria Lamiids Annonaceae Guatteria Magnoliids Reparem que os valores em que há correspondência entre x e y estão coloridos de amarelo; para os em que não há correspondência, estão coloridos de vermelho. Agora, executemos a junção das duas tabelas: merge(x = tab1, y = tab2) familia genero epiteto clado Burseraceae Protium aracouchini Malvids Rubiaceae Psychotria viridis Lamiids Sapindaceae Thinouia myriantha Malvids Solanaceae Duckeodendron cestroides Lamiids Vejam que houve a incorporação dos valores da coluna epiteto, presente apenas na tabela 2, em que há correspondência entre as tabelas 1 e 2. É importante notar que as famílias Lauraceae, Anisophylleaceae, e Pentaphylacaceae ficaram de fora, pois não são encontradas na tabela y, isto é, a tabela 2, assim como seus respectivos gêneros e epítetos associados a estes. Gêneros presentes na tabela 1 de famílias em comum entre ambas as tabelas também não foram incorporados nessa junção, pois nãp encontram correspondência na tabela 2: Dacryodes, Trattinnickia, Markea, Solanum, Allophylastrum, Cupania, Duroia, Cinchona. Revejam o conceito de junção interna para entender o porquê desse acontecimento. 7.4.2.2 Junção à esquerda Ao juntarmos tabelas x e y, temos todas as linhas de x, e todas as colunas de x e y. Linhas em x sem correspência em y terão valores NA adicionados nas novas colunas. Se houver múltiplas correspondências entre x e y, todas as combinações retornam. Fonte: www.sqlfromhell.com Continuaremos utilizando as tabelas 1 e 2. Como mostrado anteriormente, ambas possuem em comum os identificadores familia e genero. Chequemos novamente as cores das correspondências dentro de cada identificador, coloridas em amarelo: Tabela 7.6: Tabela 1 familia genero epiteto Burseraceae Protium aracouchini Burseraceae Trattinnickia burserifolia Burseraceae Dacryodes edilsonii Solanaceae Duckeodendron cestroides Solanaceae Markea ulei Solanaceae Solanum cyathophorum Sapindaceae Allophylastrum frutescens Sapindaceae Cupania rubiginosa Sapindaceae Thinouia myriantha Rubiaceae Psychotria viridis Rubiaceae Duroia eriopila Rubiaceae Cinchona amazonica Lauraceae Ocotea delicata Lauraceae Licaria aureosericea Lauraceae Rhodostemonodaphne recurva Anisophylleaceae Anisophyllea manausensis Pentaphylacaceae Freziera carinata Tabela 7.7: Tabela 2 familia genero clado Burseraceae Protium Malvids Solanaceae Duckeodendron Lamiids Sapindaceae Thinouia Malvids Rubiaceae Psychotria Lamiids Annonaceae Guatteria Magnoliids Em uma junção à esquerda, todas as linhas de x retornam após a junção. Para executar este tipo de junção, acrescentaremos um novo argumento, all.x = TRUE, indicando que manteremos todas as linhas de x, isto é, o data.frame à esquerda, que é a tabela 1. merge(x = tab1, y = tab2, all.x = TRUE) familia genero epiteto clado Anisophylleaceae Anisophyllea manausensis NA Burseraceae Dacryodes edilsonii NA Burseraceae Protium aracouchini Malvids Burseraceae Trattinnickia burserifolia NA Lauraceae Licaria aureosericea NA Lauraceae Ocotea delicata NA Lauraceae Rhodostemonodaphne recurva NA Pentaphylacaceae Freziera carinata NA Rubiaceae Cinchona amazonica NA Rubiaceae Duroia eriopila NA Rubiaceae Psychotria viridis Lamiids Sapindaceae Allophylastrum frutescens NA Sapindaceae Cupania rubiginosa NA Sapindaceae Thinouia myriantha Malvids Solanaceae Duckeodendron cestroides Lamiids Solanaceae Markea ulei NA Solanaceae Solanum cyathophorum NA Agora, temos uma nova situação. Para os valores de x sem correspondência em y, valores NA são acrescentados. Reparem na coluna clado e vejam que isso ocorreu apenas nesta variável. Por exemplo, vejam a família Anisophylleaceae. Ela ocorre apenas na tabela 1 e, portanto, não possui nenhum valor de cladoa ssociado a ela, pois esta variável ocorre apenas na tabela 2. Com a junção das tabelas, essa variável é retida, porém sem a existência de um valor para a família, é inserido então o valor NA. Temos também o caso de Annonaceae, presente na tabela 2. A família não é recuperada na junção interna, pois ela não existe na tabela 1 dentro da variável familia e, portanto, não apresenta correspondência com nenhum dado da tabela 1. Revejam o conceito de junção à esquerda para entender o porquê desse acontecimento. 7.4.2.3 Junção à direita Ao juntarmos tabelas x e y, temos todas as linhas de y, e todas as colunas de x e y.Linhas em y sem correspência em x terão valores NA adicionados nas novas colunas. Se houver múltiplas correspondências entre x e y, todas as combinações retornam. Fonte: www.sqlfromhell.com De maneira oposta à junção à esquerda, na junção à direita são mantidas todas as linhas de y. Desta vez, o argumento a ser utilizado é all.y = TRUE. Antes de executar a junção, vamos checar novamente as variáveis em comum e correspondências entre as tabelas x e y: Tabela 7.8: Tabela 1 familia genero epiteto Burseraceae Protium aracouchini Burseraceae Trattinnickia burserifolia Burseraceae Dacryodes edilsonii Solanaceae Duckeodendron cestroides Solanaceae Markea ulei Solanaceae Solanum cyathophorum Sapindaceae Allophylastrum frutescens Sapindaceae Cupania rubiginosa Sapindaceae Thinouia myriantha Rubiaceae Psychotria viridis Rubiaceae Duroia eriopila Rubiaceae Cinchona amazonica Lauraceae Ocotea delicata Lauraceae Licaria aureosericea Lauraceae Rhodostemonodaphne recurva Anisophylleaceae Anisophyllea manausensis Pentaphylacaceae Freziera carinata Tabela 7.9: Tabela 2 familia genero clado Burseraceae Protium Malvids Solanaceae Duckeodendron Lamiids Sapindaceae Thinouia Malvids Rubiaceae Psychotria Lamiids Annonaceae Guatteria Magnoliids Agora executaremos a junção com o comando abaixo. Não deixem de reparar no uso do argumento all.y = TRUE, pois ele é o responsável por agora manter todas as linhas da tabela 2 (== y): merge(x = tab1, y = tab2, all.y = TRUE) familia genero epiteto clado Annonaceae Guatteria NA Magnoliids Burseraceae Protium aracouchini Malvids Rubiaceae Psychotria viridis Lamiids Sapindaceae Thinouia myriantha Malvids Solanaceae Duckeodendron cestroides Lamiids Notem que agora todos os dados da tabela 2 foram mantidos. Houve a inserção de um valor NA para a família Annonaceae na variável epiteto, pois esta variável não está presente na tabela 2. Revejam o conceito de junção à direita para entender o porquê desse acontecimento. 7.4.2.4 Junção total Ao juntarmos tabelas x e y, temos todas as linhas e colunas de x e y. Onde não houver valores correspondentes, valores NA serão colocados nesses lugares. Fonte: www.sqlfromhell.com Em uma junção total, uniremos todas as linha de x e y utilizando o argumento all = TRUE. merge(x = tab1, y = tab2, all = TRUE) familia genero epiteto clado Anisophylleaceae Anisophyllea manausensis NA Annonaceae Guatteria NA Magnoliids Burseraceae Dacryodes edilsonii NA Burseraceae Protium aracouchini Malvids Burseraceae Trattinnickia burserifolia NA Lauraceae Licaria aureosericea NA Lauraceae Ocotea delicata NA Lauraceae Rhodostemonodaphne recurva NA Pentaphylacaceae Freziera carinata NA Rubiaceae Cinchona amazonica NA Rubiaceae Duroia eriopila NA Rubiaceae Psychotria viridis Lamiids Sapindaceae Allophylastrum frutescens NA Sapindaceae Cupania rubiginosa NA Sapindaceae Thinouia myriantha Malvids Solanaceae Duckeodendron cestroides Lamiids Solanaceae Markea ulei NA Solanaceae Solanum cyathophorum NA Reparem que valores NA são colocados nos valores da tabela 2 referentes à coluna epiteto, ausente na tabela 1. O mesmo se passa com valores da coluna clado, presente na tabela 2 e ausente na tabela 1. Revejam o conceito de junção total para entender o porquê desse acontecimento. 7.4.2.5 Semijunção Ao juntarmos tabelas x e y, temos todas as linhas de x onde houver valores correspondentes em y, mantendo apenas colunas de x. É parecida com a junção interna, porém difere desta por nunca duplicar valores de x, retornando sempre apenas valores de x que houver uma correspondência em y. Fonte: www.sqlfromhell.com A semijunção é muito similar à junção interna, diferindo desta por não incorporar as colunas de y, pois apenas utiliza esta tabela para filtrar os dados de x, constituindo-se então em um tipo de junção que filtra variáveis. Neste exemplo, utilizaremos as tabelas 1 e 3. Ambas compartilham as colunas familia e genero. Vamos checar primeiramente cada tabela e ver o que é compartilhado entre cada uma: Tabela 7.10: Tabela 1 familia genero epiteto Burseraceae Protium aracouchini Burseraceae Trattinnickia burserifolia Burseraceae Dacryodes edilsonii Solanaceae Duckeodendron cestroides Solanaceae Markea ulei Solanaceae Solanum cyathophorum Sapindaceae Allophylastrum frutescens Sapindaceae Cupania rubiginosa Sapindaceae Thinouia myriantha Rubiaceae Psychotria viridis Rubiaceae Duroia eriopila Rubiaceae Cinchona amazonica Lauraceae Ocotea delicata Lauraceae Licaria aureosericea Lauraceae Rhodostemonodaphne recurva Anisophylleaceae Anisophyllea manausensis Pentaphylacaceae Freziera carinata Tabela 7.11: Tabela 3 familia genero epiteto 1 Burseraceae Protium aracouchini 2 Burseraceae Trattinnickia burserifolia 3 Burseraceae Dacryodes edilsonii 7 Sapindaceae Allophylastrum frutescens 8 Sapindaceae Cupania rubiginosa 9 Sapindaceae Thinouia myriantha 7.4.2.5.1 Maneira 4 - vetores lógicos e a função interaction() Para executar uma semijunção com o pacote base do R, devemos fazer uso de vetores lógicos e da função interaction(), pois a função merge() não fornece uma maneira de se obter o que desejamos. Vamos então à prática5. As colunas compartilhadas por ambas as tabelas serão nossas chaves: chaves &lt;- c(&quot;familia&quot;, &quot;genero&quot;) Partimos então para filtrar na tabela 1 a combinação de linhas para esse conjunto de colunas utilizando a função interaction() do pacote base do R: interaction(tab1[, chaves]) ## [1] Burseraceae.Protium Burseraceae.Trattinnickia ## [3] Burseraceae.Dacryodes Solanaceae.Duckeodendron ## [5] Solanaceae.Markea Solanaceae.Solanum ## [7] Sapindaceae.Allophylastrum Sapindaceae.Cupania ## [9] Sapindaceae.Thinouia Rubiaceae.Psychotria ## [11] Rubiaceae.Duroia Rubiaceae.Cinchona ## [13] Lauraceae.Ocotea Lauraceae.Licaria ## [15] Lauraceae.Rhodostemonodaphne Anisophylleaceae.Anisophyllea ## [17] Pentaphylacaceae.Freziera ## 119 Levels: Anisophylleaceae.Allophylastrum ... Solanaceae.Trattinnickia Essa função computa um vetor de fatores que representa a interação das colunas fornecidas na tabela 1. Se fizermos isso com a tabela 3, poderemos saber quais combinações ocorrem em ambas as tabelas. interaction(tab3[, chaves]) ## [1] Burseraceae.Protium Burseraceae.Trattinnickia ## [3] Burseraceae.Dacryodes Sapindaceae.Allophylastrum ## [5] Sapindaceae.Cupania Sapindaceae.Thinouia ## 12 Levels: Burseraceae.Allophylastrum ... Sapindaceae.Trattinnickia Agora utilizamos a mesma função interaction e o operador %in% para retornar um vetor lógico que utilizaremos para filtrar os valores da tabela 1 com correspondência na tabela 3. linhas &lt;- interaction(tab1[, chaves]) %in% interaction(tab3[, chaves]) linhas ## [1] TRUE TRUE TRUE FALSE FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE tab1[linhas, ] familia genero epiteto 1 Burseraceae Protium aracouchini 2 Burseraceae Trattinnickia burserifolia 3 Burseraceae Dacryodes edilsonii 7 Sapindaceae Allophylastrum frutescens 8 Sapindaceae Cupania rubiginosa 9 Sapindaceae Thinouia myriantha 7.4.2.6 Antijunção Retorna todas as linhas de x em que não há correspondência em y, mantendo apenas colunas de x. Fonte: www.sqlfromhell.com Uma antijunção é ligeiramente diferente de uma semijunção pois ela retorna todas as linhas de x que não aparecem em y. Portanto, podemos utilizar o inverso de nosso vetor lógico linhas e utilizar este inverso para filtrar as linhas da tabela 1 e ter nossa tabela antijunção entre x e y: antilinhas &lt;- !linhas tab1[antilinhas, ] familia genero epiteto 4 Solanaceae Duckeodendron cestroides 5 Solanaceae Markea ulei 6 Solanaceae Solanum cyathophorum 10 Rubiaceae Psychotria viridis 11 Rubiaceae Duroia eriopila 12 Rubiaceae Cinchona amazonica 13 Lauraceae Ocotea delicata 14 Lauraceae Licaria aureosericea 15 Lauraceae Rhodostemonodaphne recurva 16 Anisophylleaceae Anisophyllea manausensis 17 Pentaphylacaceae Freziera carinata Referências "],["para-saber-mais.html", "7.5 Para saber mais", " 7.5 Para saber mais Join in R; Tudo sobre Joins (merge) em R; Join com dplyr; Entendendo o JOIN do SQL (ou Junções) - Obtive as imagens aqui apresentadas desta página. Há uma boa explicação com SQL como pano de fundo para operações de junções de tabela. "],["exercícios-4.html", "7.6 Exercícios", " 7.6 Exercícios Resolva o exercício 104.01 Sintetizando dados. Resolva o exercício 103.05 Classes de Objetos. Resolva o exercício 103.04 Lendo e salvando seus dados. Resolva o exercício 103.06 Acrescentando dados. Resolva o exercício 103.8 De vetor a data.frame ordenado. "],["manip-txt-arq-pasta.html", "Capítulo 8 Manipulação de textos, arquivos e pastas ", " Capítulo 8 Manipulação de textos, arquivos e pastas "],["funções-para-manipulação-e-busca-de-textos.html", "8.1 Funções para manipulação e busca de textos", " 8.1 Funções para manipulação e busca de textos 8.1.1 Colar ou concatenar textos A função paste() concatena textos. ?paste # veja o help dessa funcao Vamos criar dois vetores de texto, txt e txt2, para, em seguida, concatená-los com esta função: # um vetor de texto txt &lt;- c(&quot;banana&quot;, &quot;maça&quot;, &quot;pera&quot;) # outro vetor txt2 &lt;- LETTERS[1:3] # concatenamos os textos par a par paste(txt, txt2) ## [1] &quot;banana A&quot; &quot;maça B&quot; &quot;pera C&quot; # mudamos o separador paste(txt, txt2, sep = &quot;-&quot;) ## [1] &quot;banana-A&quot; &quot;maça-B&quot; &quot;pera-C&quot; Podemos também unir os elementos contidos em um vetor em um único elemento, separados por algum símbolo. Basta usar o argumento collapse e indicar qual será o elemento que unirá os elementos contidos em um vetor: # imagine que queremos juntar os elementos de um vetor # num único texto, separados por &quot;;&quot; paste(txt, collapse = &quot;;&quot;) ## [1] &quot;banana;maça;pera&quot; paste(txt, collapse = &quot;/&quot;) ## [1] &quot;banana/maça/pera&quot; paste(txt, collapse = &quot; e &quot;) ## [1] &quot;banana e maça e pera&quot; paste(txt, collapse = &quot; mais &quot;) ## [1] &quot;banana mais maça mais pera&quot; 8.1.2 Quebrar ou desconcatenar textos A função strsplit() quebra um vetor de texto segundo um separador determinado pelo argumento split, e retorna uma lista como resultado. ?strsplit txt &lt;- &quot;Este é um texto com várias palavras&quot; strsplit(txt, split = &quot; &quot;) ## [[1]] ## [1] &quot;Este&quot; &quot;é&quot; &quot;um&quot; &quot;texto&quot; &quot;com&quot; &quot;várias&quot; &quot;palavras&quot; Note que o resultado da ação é um objeto de classe lista: class(strsplit(txt, split = &quot; &quot;)) ## [1] &quot;list&quot; Então, para pegar o resultado da ação da função strsplit(), devemos usar o que aprendemos em indexação de listas. Para indexar listas, devemos usar duplo colchetes [[n]], em que n é o número do elemento que desejamos reter. Vejamos abaixo que retemos o resultado de strsplit() no vetor txt em um objeto pl: pl &lt;- strsplit(txt, split = &quot; &quot;) pl ## [[1]] ## [1] &quot;Este&quot; &quot;é&quot; &quot;um&quot; &quot;texto&quot; &quot;com&quot; &quot;várias&quot; &quot;palavras&quot; Para pegar o tamanho do objeto pl, usamos length(pl) que nos dá o resultado de 1. Por isso, se desejamos reter essa ação como um vetor de texto, nosso n é 1, logo, [[1]]: pl &lt;- strsplit(txt, split = &quot; &quot;)[[1]] pl ## [1] &quot;Este&quot; &quot;é&quot; &quot;um&quot; &quot;texto&quot; &quot;com&quot; &quot;várias&quot; &quot;palavras&quot; Agora o objeto pl é um vetor de texto e de tamanho corresponde ao número de palavras contidas no vetor: class(pl) ## [1] &quot;character&quot; length(pl) # numero de palavras no texto ## [1] 7 8.1.2.1 Um exemplo prático Suponha que você tenha uma tabela em que o nome da espécie esteja em uma única coluna e você queira separar o gênero do epíteto. Podemos usar a função strsplit() para resolver essa situação. Vejamos: # um dado qualquer spp &lt;- c(&quot;Ocotea guianensis&quot;, &quot;Ocotea longifolia&quot;, &quot;Licaria tenuicarpa&quot;) dap &lt;- c(10, 20, 30) dd &lt;- data.frame(ESPECIE = spp, DAP = dap, stringsAsFactors = F) dd ESPECIE DAP Ocotea guianensis 10 Ocotea longifolia 20 Licaria tenuicarpa 30 Vamos criar uma função para receber um vetor de texto e quebrá-lo segundo o separador sep = \" \", isto é, vai quebrar a palavra onde houver um espaço \" \". # criamos um funcao peganome &lt;- function(x, qual = 1, sep = &quot; &quot;) { # pega o texto e quebra segundo o separador informado xx &lt;- strsplit(x, split = sep)[[1]] # retorna o valor return(xx[qual]) } Com a função criada acima, peganome(), vamos utilizar a função lapply() para aplicar esta função sobre cada elemento do vetor dd$ESPECIE: # usamos essa funcao com o lapply para pegar o genero lapply(dd$ESPECIE, peganome, qual = 1) ## [[1]] ## [1] &quot;Ocotea&quot; ## ## [[2]] ## [1] &quot;Ocotea&quot; ## ## [[3]] ## [1] &quot;Licaria&quot; Repare que o resultado da ação é uma lista, pois lapply() sempre retorna uma lista! Podemos converter esta lista em um vetor usando o procedimento abaixo: # como é uma lista transformamos num vetor gg &lt;- as.vector(lapply(X = dd$ESPECIE, FUN = peganome, qual = 1), mode = &quot;character&quot;) gg ## [1] &quot;Ocotea&quot; &quot;Ocotea&quot; &quot;Licaria&quot; Podemos também gerar um vetor de texto simplesmente utilizando a função vapply() para aplicar a função peganome() em cada elemento de dd$ESPECIE, informando à função vapply() que esperamos como retorno um vetor de texto de tamanho 1 (FUN.VALUE = as.character(1)). O resultado é o mesmo obtido no objeto gg: vapply(X = dd$ESPECIE, FUN = peganome, FUN.VALUE = as.character(1), qual = 1) ## Ocotea guianensis Ocotea longifolia Licaria tenuicarpa ## &quot;Ocotea&quot; &quot;Ocotea&quot; &quot;Licaria&quot; Agora que temos o nome do gênero separado do epíteto, vamos guardar o nome do gênero estocado em gg no data.frame dd: # ADICIONAMOS NO OBJETO ORIGINAL dd$GENERO &lt;- gg dd ESPECIE DAP GENERO Ocotea guianensis 10 Ocotea Ocotea longifolia 20 Ocotea Licaria tenuicarpa 30 Licaria Agora vamos pegar o epíteto da espécie, mudando o argumento qual da função peganome(): # usamos essa funcao com o lapply para pegar o epiteto spp &lt;- as.vector(lapply(dd$ESPECIE, peganome, qual = 2), mode = &quot;character&quot;) spp ## [1] &quot;guianensis&quot; &quot;longifolia&quot; &quot;tenuicarpa&quot; Repetimos então o procedimento de guardar o epíteto spp em nosso data.frame dd: # adiciona dd$SPP &lt;- spp # mostra dd ESPECIE DAP GENERO SPP Ocotea guianensis 10 Ocotea guianensis Ocotea longifolia 20 Ocotea longifolia Licaria tenuicarpa 30 Licaria tenuicarpa str(dd) ## &#39;data.frame&#39;: 3 obs. of 4 variables: ## $ ESPECIE: chr &quot;Ocotea guianensis&quot; &quot;Ocotea longifolia&quot; &quot;Licaria tenuicarpa&quot; ## $ DAP : num 10 20 30 ## $ GENERO : chr &quot;Ocotea&quot; &quot;Ocotea&quot; &quot;Licaria&quot; ## $ SPP : chr &quot;guianensis&quot; &quot;longifolia&quot; &quot;tenuicarpa&quot; 8.1.3 Altera caixa do texto As funções toupper() e tolower() mudam a caixa do texto, isto é, convertem o texto para totalmente maiúsculas ou minúsculas, respectivamente. txt &lt;- &quot;Um texto QUALQUER&quot; # transforma para caixa baixa tolower(txt) ## [1] &quot;um texto qualquer&quot; # caixa alta toupper(txt) ## [1] &quot;UM TEXTO QUALQUER&quot; # apenas a primeira letra em maiusculo # temos que construir nossa funcao para isso mudatexto &lt;- function(x) { xx &lt;- strsplit(x, split = &quot;&quot;)[[1]] xx &lt;- tolower(xx) xx[1] &lt;- toupper(xx[1]) xx &lt;- paste(xx, collapse = &quot;&quot;) return(xx) } txt ## [1] &quot;Um texto QUALQUER&quot; mudatexto(txt) ## [1] &quot;Um texto qualquer&quot; 8.1.4 Remove espaços em branco A função trimws() remove espaços em branco no início e final do texto. Repare que isso ocorre no objeto txt2 criado abaixo: txt2 &lt;- &quot; Outro texto com espacos em branco no inicio e fim &quot; Podemos removê-los usando a função trimws() e informando para o argumento which em qual(is) posição(ões) queremos remover os espaços em branco. Vejamos: # Remove dos dois lados trimws(txt2, which = &quot;both&quot;) ## [1] &quot;Outro texto com espacos em branco no inicio e fim&quot; # remove do lado direito trimws(txt2, which = &quot;right&quot;) ## [1] &quot; Outro texto com espacos em branco no inicio e fim&quot; # Remove do lado esquerdo trimws(txt2, which = &quot;left&quot;) ## [1] &quot;Outro texto com espacos em branco no inicio e fim &quot; 8.1.5 Substitui ou pega parte de texto A função gsub() busca padrões de um texto para substituí-los por outro em um vetor de caracteres. Já a função substr() extrai ou substitui pedaços de um texto em um vetor de caracteres. Por fim, a função nchar() conta o número de caracteres contidos em um vetor de caracteres. # substitui palavras ou parte de palavras txt &lt;- &quot;Um texto que contém muita COISA&quot; gsub(&quot;m&quot;, &quot;M&quot;, txt) ## [1] &quot;UM texto que contéM Muita COISA&quot; gsub(&quot;que&quot;, &quot;o qual&quot;, txt) ## [1] &quot;Um texto o qual contém muita COISA&quot; # pega uma parte do texto substr(txt, 1, 10) ## [1] &quot;Um texto q&quot; substr(txt, 11, 20) ## [1] &quot;ue contém &quot; # qual o numero de caracteres num texto nchar(txt) ## [1] 31 substr(txt, nchar(txt) - 10, nchar(txt)) # dez ultimos caracteres ## [1] &quot;muita COISA&quot; 8.1.6 Expressões Regulares Expressões regulares são modelos lógicos para buscar caracteres em textos. É uma ferramenta muito poderosa usada em computação. Não é fácil entender e usar expressões regulares, mas é muito poderoso e importante conhecer os recursos. Aqui apresentamos apenas um exemplo muito simples do uso de expressões regulares. txt &lt;- &quot;Um texto com varios numeros 1 2 9 no meio e 5 7 8 20 3456&quot; txt ## [1] &quot;Um texto com varios numeros 1 2 9 no meio e 5 7 8 20 3456&quot; # imagine que eu queira apagar todos os números desse texto gsub(&quot;[0-9]&quot;, &quot;&quot;, txt) # paga números de 0 a 9 ## [1] &quot;Um texto com varios numeros no meio e &quot; # todas as letras minusculas gsub(&quot;[a-z]&quot;, &quot;&quot;, txt) ## [1] &quot;U 1 2 9 5 7 8 20 3456&quot; # todas as letras gsub(&quot;[a-z|A-Z]&quot;, &quot;&quot;, txt) ## [1] &quot; 1 2 9 5 7 8 20 3456&quot; # todas as minúculas e numeros gsub(&quot;[a-z|0-9]&quot;, &quot;&quot;, txt) ## [1] &quot;U &quot; Entender expressões regulares (regular expressions) é muito importante porque é fonte frequente de erros quando escrevemos códigos. Algumas funções que buscam por padrões interpretam expressões regulares para buscar por padrões em objetos de texto. Por exemplo, gsub() e grep() são duas funções parecidas, que buscam por um padrão (argumento pattern) em textos. Enquanto gsub() busca e permite substituir o padrão por outro texto, grep() retorna o índice do elemento que contém o padrão de interesse. O argumento pattern, citado anteriormente, pode ser um texto simples ou uma expressão regular, então é importante que você entenda um pouco sobre isso. Expressões regulares podem ser bem complexas e até existem sites que lhe permitem entender e gerar uma expressão regular para uma busca especifica (veja abaixo na seção Para saber mais). 8.1.7 Remove Acentos Remover acentos e padronizar textos podem ser importantes quando estamos comparando dados. Por exemplo, quando queremos verificar se os nomes que aparecem em uma coluna estão padronizados, devemos checar se há duplicidade de palavras devido à presença de um acento em uma palavra e ausência em outra (e.g., odores “cítrico” e “citrico” são computados como duas palavras diferentes). Não há uma função específica, mas como tudo pode ser feito no R, uma solução é mostrada aqui. txt &lt;- &quot;Palavrão ou bobalhão têm acentos&quot; # convertemos quebrando acentos xx &lt;- iconv(txt, to = &quot;ASCII//TRANSLIT&quot;) xx ## [1] &quot;Palavrao ou bobalhao tem acentos&quot; # apagamos os acentos sozinhos xx &lt;- gsub(&quot;[~|^|~|\\&quot;|&#39;|`]&quot;, &quot;&quot;, xx) xx ## [1] &quot;Palavrao ou bobalhao tem acentos&quot; # podemos colocar isso numa funcao removeacentos &lt;- function(x) { xx &lt;- iconv(x, to = &quot;ASCII//TRANSLIT&quot;) xx &lt;- gsub(&quot;[~|^|~|\\&quot;|&#39;|`]&quot;, &quot;&quot;, xx) return(xx) } # usando a funcao criada removeacentos(txt) ## [1] &quot;Palavrao ou bobalhao tem acentos&quot; txt2 &lt;- &quot;macarrão também tem acentos, né?&quot; removeacentos(txt2) ## [1] &quot;macarrao tambem tem acentos, ne?&quot; 8.1.8 Metacaracteres Metacaracteres são caracteres que em uma expressão regular apresentam um significado especial e por isso não são interpretados como tal. Alguns metacaracteres são: . encontra qualquer coisa que exista; + encontra o item que precede esse metacaractere uma ou mais vezes; * encontra o item que precede esse metacaractere zero ou mais vezes; ^ encontra qualquer espaço vazio no início da linha. Quando usado numa expressão de classe de caractere (veja abaixo), encontra qualquer caractere exceto aqueles que seguem esse metacaractere; \\$ encontra qualquer espaço vazio no final da linha; | operador que significa OU e é utilizado em buscas do tipo busque isso OU aquilo; ( e ) para agrupamentos; [ e ] definem classes de caracteres em expressões regulares (veja abaixo na seção Classes de caracteres). Suponha que você importe ao R um conjunto de dados de uma planilha usando, por exemplo, a função read.table(), e que os nomes das colunas no original tinham muitos espaços em branco. Como o R não aceita espaços em branco, ele substitui espaços por pontos ao utilizar esta função, então os nomes das colunas do data.frame dos dados terão muitos pontos, algumas vezes em sequência. Suponha também que isso acontece toda vez que você importa dados ao R e já está cansado desse comportamento e você quer colocar no seu script um comando que elimina esses pontos, de forma a não se preocupar com isso no editor de planilhas onde estão os seus dados. # vamos criar um data.frame que simule esta situação Número.....da.......árvore &lt;- c(1, 10, 15) Diâmetro..cm. &lt;- c(10, 15, 20) Altura.....m.... &lt;- c(15, 20, 39) dados &lt;- data.frame(Número.....da.......árvore, Diâmetro..cm., Altura.....m....) class(dados) ## [1] &quot;data.frame&quot; dim(dados) ## [1] 3 3 colnames(dados) ## [1] &quot;Número.....da.......árvore&quot; &quot;Diâmetro..cm.&quot; ## [3] &quot;Altura.....m....&quot; # nome de colunas, que também neste caso pode ser obtido com names(dados) ## [1] &quot;Número.....da.......árvore&quot; &quot;Diâmetro..cm.&quot; ## [3] &quot;Altura.....m....&quot; nn &lt;- names(dados) # então digamos que eu queira substituir pontos multiplos por apenas 1 ponto. como eu quero manter 1 ponto eu poderia repetir várias vezes um substituicao de dois pontos por um ponto: gsub(pattern = &quot;..&quot;, replacement = &quot;.&quot;, nn) ## [1] &quot;.............&quot; &quot;.......&quot; &quot;........&quot; # estranho né? tudo virou ponto # isso é porque . é um metacaractere e o R não interpreta isso como ponto. Ponto significa pega &#39;pega qualquer caractere&#39; numa expressão regular # pelo fato de ponto ser um metacaractere, precisamos indicar que queremos o caractere ponto e não o metacaractere. Você faz isso usando uma ou duas barras invertidas (backslash) gsub(pattern = &quot;\\\\.\\\\.&quot;, replacement = &quot;.&quot;, nn) ## [1] &quot;Número...da....árvore&quot; &quot;Diâmetro.cm.&quot; &quot;Altura...m..&quot; # diminuiu o número de pontos, mas preciso fazer isso várias vezes para ficar com um único ponto nn2 &lt;- gsub(pattern = &quot;\\\\.\\\\.&quot;, replacement = &quot;.&quot;, nn) nn2 &lt;- gsub(pattern = &quot;\\\\.\\\\.&quot;, replacement = &quot;.&quot;, nn2) nn2 ## [1] &quot;Número..da..árvore&quot; &quot;Diâmetro.cm.&quot; &quot;Altura..m.&quot; nn2 &lt;- gsub(pattern = &quot;\\\\.\\\\.&quot;, replacement = &quot;.&quot;, nn2) nn2 ## [1] &quot;Número.da.árvore&quot; &quot;Diâmetro.cm.&quot; &quot;Altura.m.&quot; # pronto consegui # note que isso fica restrito a quantos pontos tem nos meus dados, e portanto, não é um método genérico ou eficiente em termos de programação, por o número que vezes que isso deve ser feito irá variar dependendo do conjunto de dados. # seria mais fácil adicionar um metacaractere (+) e fazer isso uma única vez, sem necessidade de repetição: nn ## [1] &quot;Número.....da.......árvore&quot; &quot;Diâmetro..cm.&quot; ## [3] &quot;Altura.....m....&quot; nn2 &lt;- gsub(pattern = &quot;\\\\.+&quot;, replacement = &quot;.&quot;, nn) nn2 ## [1] &quot;Número.da.árvore&quot; &quot;Diâmetro.cm.&quot; &quot;Altura.m.&quot; # procurar por qualquer letra+ txt &lt;- &quot;qualqueeeeeer palavra&quot; gsub(&quot;e+&quot;, &quot;E&quot;, txt) ## [1] &quot;qualquEr palavra&quot; # da mesma forma se eu quiser buscar pelo caractere + ao invés de usar o metacaractere, preciso usar a barra invertida: txt &lt;- c(&quot;um texto com simbolo +&quot;, &quot;sem o simbolo&quot;) gsub(&quot;+&quot;, &quot;MAIS&quot;, txt) # nao funciona ## [1] &quot;MAISuMAISmMAIS MAIStMAISeMAISxMAIStMAISoMAIS MAIScMAISoMAISmMAIS MAISsMAISiMAISmMAISbMAISoMAISlMAISoMAIS MAIS+MAIS&quot; ## [2] &quot;MAISsMAISeMAISmMAIS MAISoMAIS MAISsMAISiMAISmMAISbMAISoMAISlMAISoMAIS&quot; gsub(&quot;\\\\+&quot;, &quot;MAIS&quot;, txt) # funciona ## [1] &quot;um texto com simbolo MAIS&quot; &quot;sem o simbolo&quot; 8.1.9 Classes de caracteres Algumas classes de caracteres podem ser utilizadas em buscas com expressões regulares: [0-9] - busca números no vetor de caracteres; [a-z] - busca apenas caracteres minúsculos no vetor de caracteres; [A-Z] - busca apenas caracteres maiúsculos no vetor de caracteres; [a-zA-Z] - busca caracteres do alfabeto no vetor de caracteres; [^a-zA-Z] - busca não alfabéticos no vetor de caracteres; [a-zA-Z0-9] - busca elementos alfa-numéricos no vetor de caracteres; [ \\t\\n\\r\\f\\v] - busca espaçamentos no vetor de caracteres. Espaçamentos podem ser quebras de linha, tabulações etc; []$*+.?[^{|(#%&amp;~_/⇔✬!,:;❵\\\")}@-] - busca caracteres de pontuação no vetor de caracteres. Perceb-se que estas classes permitem fazer buscas complexas. Suponha que você precisa substituir todos os valores que não contenham letras ou números por NA: # suponha um vetor de palavras (nomes de cores neste exemplo) vt &lt;- colors() # vejamos os 30 primeiros valores head(vt, 30) ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; ## [5] &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;aquamarine&quot; ## [9] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; ## [17] &quot;azure4&quot; &quot;beige&quot; &quot;bisque&quot; &quot;bisque1&quot; ## [21] &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; ## [29] &quot;blue3&quot; &quot;blue4&quot; # podemos mostrar os valores que contém branco: grep(&quot;white&quot;, vt, value = TRUE) ## [1] &quot;white&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; ## [5] &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;floralwhite&quot; &quot;ghostwhite&quot; ## [9] &quot;navajowhite&quot; &quot;navajowhite1&quot; &quot;navajowhite2&quot; &quot;navajowhite3&quot; ## [13] &quot;navajowhite4&quot; &quot;whitesmoke&quot; # se eu coloco white numa expressao regular # vejamos os 30 primeiros valores grep(&quot;[white]&quot;, vt, value = TRUE)[1:30] ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; ## [5] &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;aquamarine&quot; ## [9] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; ## [17] &quot;azure4&quot; &quot;beige&quot; &quot;bisque&quot; &quot;bisque1&quot; ## [21] &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; &quot;blanchedalmond&quot; ## [25] &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; &quot;blue3&quot; ## [29] &quot;blue4&quot; &quot;blueviolet&quot; # neste caso significa pegue qualquer elemento que contenha uma das letras indicadas: w, h, i, t ou e. Por isso a lista aumentou # pega só cores que tenham número # vejamos os 30 primeiros valores grep(&quot;[0-9]&quot;, vt, value = TRUE)[1:30] ## [1] &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; ## [5] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [9] &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; &quot;azure4&quot; ## [13] &quot;bisque1&quot; &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; ## [17] &quot;blue1&quot; &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [21] &quot;brown1&quot; &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [25] &quot;burlywood1&quot; &quot;burlywood2&quot; &quot;burlywood3&quot; &quot;burlywood4&quot; ## [29] &quot;cadetblue1&quot; &quot;cadetblue2&quot; # neste caso é o mesmo que nao-alfabeticos # vejamos os 30 primeiros valores grep(&quot;[^a-zA-Z]&quot;, vt, value = TRUE)[1:30] ## [1] &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; ## [5] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [9] &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; &quot;azure4&quot; ## [13] &quot;bisque1&quot; &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; ## [17] &quot;blue1&quot; &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [21] &quot;brown1&quot; &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [25] &quot;burlywood1&quot; &quot;burlywood2&quot; &quot;burlywood3&quot; &quot;burlywood4&quot; ## [29] &quot;cadetblue1&quot; &quot;cadetblue2&quot; # que tenham caracteres maiusculos grep(&quot;[A-Z]&quot;, vt, value = TRUE) # nao tem nenhum neste vetor ## character(0) # minusculos # vejamos os 30 primeiros valores grep(&quot;[a-z]&quot;, vt, value = TRUE)[1:30] ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; ## [5] &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; &quot;antiquewhite4&quot; &quot;aquamarine&quot; ## [9] &quot;aquamarine1&quot; &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; &quot;azure3&quot; ## [17] &quot;azure4&quot; &quot;beige&quot; &quot;bisque&quot; &quot;bisque1&quot; ## [21] &quot;bisque2&quot; &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; &quot;blue2&quot; ## [29] &quot;blue3&quot; &quot;blue4&quot; 8.1.10 Barra invertida \\ O uso da barra invertida \\ (em inglês, backslash) indica ao R que a expressão regular espera lidar com tabulações, quebra de linhas e outros símbolos especiais. Isso é fundamental se você quer incluir/buscar num texto por aspas, parênteses, colchetes, barras, metacaracteres, etc. ?Quotes # leia atentamente esse help # criar um texto com aspas Se você tentar executar o comando abaixo, perceberá que ele não funciona, porque as aspas são utilizadas para abrir e fechar textos. txt = &quot;Um texto que tem &quot;aspas&quot; no meio&quot; Porém, podemos combinar aspas simples e duplas para fazer isso: txt &lt;- &#39;Um texto que tem &quot;aspas&quot; no meio&#39; txt ## [1] &quot;Um texto que tem \\&quot;aspas\\&quot; no meio&quot; # veja que o R adicionou uma \\ antes das aspas do texto, criando um escape character, que indica ao R que não interprete aquilo como abertura ou fechamento de textos # entao eu posso fazer isso txt &lt;- &quot;Um texto que tem \\&quot;aspas\\&quot; &quot; txt ## [1] &quot;Um texto que tem \\&quot;aspas\\&quot; &quot; # também funciona # isso é importante quando buscamos valores txt &lt;- c(&quot;com \\&quot;aspas\\&quot;&quot;, &quot;outro objeto&quot;) grep(&quot;\\&quot;&quot;, txt) # qual elemento tem aspas ## [1] 1 txt[grep(&quot;\\&quot;&quot;, txt)] ## [1] &quot;com \\&quot;aspas\\&quot;&quot; # barras txt &lt;- c(&quot;com \\\\ barras&quot;, &quot;sem barras&quot;) txt ## [1] &quot;com \\\\ barras&quot; &quot;sem barras&quot; grep(&quot;\\\\\\\\&quot;, txt) # isso é mais complicado, veja o número de barras que preciso para buscar por 1 barra num texto, porque barra desse jeito é o código que ele usa para buscar por códigos, então complica né? ## [1] 1 # parentesis txt &lt;- c(&quot;sem parenteses&quot;, &quot;com ()&quot;) grep(&quot;(&quot;, txt) # isso não funciona por parentesis é usado para abrir e fechar funcoes, o R se atrapalha grep(&quot;\\\\(&quot;, txt) # assim funciona grep(&quot;\\\\)&quot;, txt) "],["manipulação-de-pastas-e-arquivos.html", "8.2 Manipulação de pastas e arquivos", " 8.2 Manipulação de pastas e arquivos As funções abaixo auxiliam a checagem de arquivos dentro de pastas, possibilitam a criação de pastas, e a cópia de arquivos dentro do sistema. Dominar essas funções e algumas outras correlatas são importantíssimas, por exemplo, no ramo da bioinformática. No dia a dia, dominá-las também possibilitará que muito tempo seja poupado em atividades maçantes, como copiar ou mover muitos arquivos de uma pasta a outra. Vamos analisar o uso das funções dir(), dir.create() e file.copy() (vejam a seção Para saber mais para mais informações). Não esqueçam de checar o ? de cada função (e.g., ?dir) para auxiliar no entendimento do funcionamento de cada uma das funções. # meu caminho caminho &lt;- &quot;~/Documents/DOC/PROJETO_DOC/R/pkgs/BOT89-introR/tutorial/&quot; # lista todos os arquivos no caminho que sejam pdfs arqs &lt;- dir(caminho, pattern = &quot;.pdf&quot;) # renomeia os arquivos adicionando a data no final do nome # cria funcao para gerar novos nomes novonome &lt;- function(x) { # separa as palavras xx &lt;- strsplit(x, &quot;.pdf&quot;)[[1]] # cola a data xx1 &lt;- paste(xx, Sys.Date(), sep = &quot;_&quot;) # junta novamente tudo xx &lt;- paste(xx1, &quot;.pdf&quot;, sep = &quot;&quot;) # retorna o novo nome return(xx) } # agora copia cada arquivo para uma subpasta em caminho novapasta &lt;- paste(caminho, &quot;/pdfs&quot;, sep = &quot;&quot;) dir.create(novapasta) # salva os arquivos com mesmo nome na nova pasta # cria uma funcao para isso salvaarq &lt;- function(arq, origem, destino) { from &lt;- paste(origem, &quot;/&quot;, arq, sep = &quot;&quot;) to &lt;- paste(destino, &quot;/&quot;, novonome(arq), sep = &quot;&quot;) file.copy(from, to) } # aplica a funcao a todos os arquivos sapply(arqs, salvaarq, origem = caminho, destino = novapasta) # pronto os arquivos devem ter sido copiados dir(novapasta) "],["sabermais-manip-txt-arqs-fld.html", "8.3 Para saber mais:", " 8.3 Para saber mais: RegExr is an online tool to learn, build, &amp; test Regular Expressions (RegEx / RegExp) - Página que ajuda o usuário a construir uma expressão regular. Vídeoaulas - temos vídeosaulas disponíveis, gravadas com o material desta aula. Acesse-as nos links abaixo: parte I; parte II; Manipulação de pastas e arquivos. Pacote fs - Um pacote que agrupa funções para manipulações de arquivos e pastas, e que apresenta algumas melhoras sobre o conjunto de funções do pacote base do R. Além disso, há alguns tutoriais disponíveis. "],["amost-aleat.html", "Capítulo 9 Amostragens aleatórias ", " Capítulo 9 Amostragens aleatórias "],["funções-para-gerar-permutações-e-simular-dados.html", "9.1 Funções para gerar permutações e simular dados", " 9.1 Funções para gerar permutações e simular dados A função sample() aleatoriza valores em um vetor, com ou sem repetição, ou amostra um certo número de valores aleatoriamente de um vetor de valores. # ALEATORIZANDO DADOS SEM AMOSTRAGEM ?sample # suponha um vetor de numeros v1 &lt;- 1:20 v1 # os numeros sao sequenciais ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # se quiser embaralhar aleatoriamente sample(v1) ## [1] 19 12 14 4 2 15 20 6 17 10 8 3 1 16 18 5 11 7 13 9 sample(v1) # cada vez será diferente ## [1] 16 8 2 14 4 6 13 15 17 18 3 1 12 9 20 19 7 11 10 5 sample(v1) # diferente de novo ## [1] 19 17 8 4 5 11 2 13 18 15 9 16 10 12 14 3 7 6 1 20 # no exemplo acima, os numeros sao apenas embaralhados table(v1) # cada valor só aparece uma vez 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 table(sample(v1)) # aqui tambem 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 # se eu quiser amostras com repeticao table(sample(v1, replace = TRUE)) 1 2 3 4 5 6 7 8 9 10 13 15 17 18 20 1 1 1 1 1 3 2 1 1 1 1 1 1 2 2 # ele repetiu alguns valores aleatoriamente table(sample(v1, replace = TRUE)) # vai ser diferente toda vez que voce executa 1 2 4 5 6 9 12 14 16 17 18 20 3 2 1 1 2 2 1 1 1 2 2 2 # mas o comprimento é sempre o mesmo length(v1) ## [1] 20 length(sample(v1)) ## [1] 20 length(sample(v1, replace = T)) ## [1] 20 # agora com textos table(LETTERS) A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 table(sample(LETTERS, replace = T)) A B D E F G I J K M Q R S X Y Z 1 1 2 1 1 1 1 1 2 1 1 5 3 1 1 3 Amostraremos N valores de um vetor qualquer: # agora amostra um número qualquer de valores de um vetor qualquer: umvetor &lt;- seq(from = 0, to = 1000, by = 0.1) length(umvetor) ## [1] 10001 head(umvetor, 10) # primeiros 10 elementos ## [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 # agora amostra 100 valores desse vetor que tem 9991 valores umaamostra &lt;- sample(umvetor, size = 100, replace = T) # entao isso deve ser verdadeiro length(umaamostra) == 100 ## [1] TRUE # primeiros 10 valores amostrados head(umaamostra, 10) ## [1] 144.8 886.8 993.6 200.0 746.7 904.8 688.3 848.2 97.6 732.1 # histograma da amostra hist(umaamostra, col = &quot;red&quot;) # note que a distribuição é uniforme, qualquer valor tem a mesma chance de ser amostrado # faco outra vez e adiciono outraamostra &lt;- sample(umvetor, size = 100, replace = T) # adiciono ao histograma anterior hist(outraamostra, density = 10, add = T, col = &quot;black&quot;) # cada vez é diferente a sequencia de valores amostrados "],["distribuições-aleatórias.html", "9.2 Distribuições aleatórias", " 9.2 Distribuições aleatórias O R disponibiliza um conjunto um conjunto de funções para gerar densidade, distribuição cumulativa, quantis e geração aleatória de variáveis com diferentes distribuições de probabilidade (veja a seção Para saber mais para mais informações). Aqui vamos conhecer as funções que geram variáveis aleatórias para duas distribuições probabilísticas: Distribuição normal; Distribuição log-normal. # veja no R o help para as funções para as diferentes distribuições disponíveis no R. ?Distributions 9.2.1 Distribuição Normal Segundo as companhias aéreas dos EUA, a largura dos quadris dos homens norte-americanos segue uma curva normal, com média de 14.4 polegadas, e desvio-padrão de 1 polegada. 9.2.1.1 rnorm() Esta função permite gerar essa distribuição de valores aleatórios que seguem uma distribuição normal se soubermos a média e o desvio padrão. ?rnorm # veja o help da função amedia &lt;- 14.4 osd &lt;- 1 # vamos gerar 1000 valores aleatórios com essa distribuição quadris &lt;- rnorm(n = 1000, mean = amedia, sd = osd) # visualizando essa distribuição de valores hist(quadris) # ou visualizando a densidade probabilística dessa distribuição hist(quadris, probability = T) # a linha da densidade lines(stats::density(quadris), col = &quot;red&quot;, lwd = 2) 9.2.1.2 pnorm() Esta função permite responder à pergunta: Qual percentual de pessoas não cabe em um assento de 15 polegadas? # veja o help dessa função ?pnorm # qual o percentil/quantil da distribuição que é maior que 15 polegadas # quem não cabe no assento? qMaior15in &lt;- pnorm(q = 15, mean = 14.4, sd = 1, lower.tail = F) # note o argumento lower.tail=F (você quer apenas o percentil que está acima desse valor) # ca. de 27% qMaior15in ## [1] 0.2742531 print(paste(round(qMaior15in * 100, 0), &quot;% dos americanos não cabem em um assento de 15 polegadas&quot;, sep = &quot;&quot;)) ## [1] &quot;27% dos americanos não cabem em um assento de 15 polegadas&quot; # vamos visualizar isso x &lt;- sort(quadris) # ordenamos os quadris y &lt;- dnorm(x, mean = amedia, sd = 1) # calculamos a densidade probabilística desses valores plot(x, y, type = &quot;l&quot;, lwd = 2, col = &quot;black&quot;, ylab = &quot;Densidade Probabilística&quot;, xlab = &quot;Quadris de americanos (inches)&quot;) # plotamos isso e temos nossa curva normal # agora fazemos o mesmo para os quadris que satisfazem a condicao abline(v = 15, lwd = 2, col = &quot;blue&quot;) # o quadril da pergunta xx &lt;- sort(quadris[quadris &gt;= 15]) yy &lt;- dnorm(xx, mean = amedia, sd = 1) # adicionamos isso na forma de um polígono # coordenadas X do polígono (note que adicionei valores para poder fechar o polígono) xxp &lt;- c(15, xx, max(xx), 15) # e adiciono também no eixo y yyp &lt;- c(0, yy, 0, 0) # desenho o polígono correspondente polygon(xxp, yyp, col = &quot;red&quot;) ## a area desse polígono representa esse quantil # (i.e. a porcentagem da população que tem quadril &gt;= 15) 9.2.1.3 qnorm() Esta função permite responder à pergunta: Qual largura de assento garante que 95% da população caberá? # agora fazemos o inverso da função pnorm, ao inves de informar o quantil, # informamos o percentil qnorm(p = 0.95, mean = 14.4, sd = 1) ## [1] 16.04485 # este é o tamanho do assento que inclui 95% dos valores # numa distribuição normal com essa média e esse desvio padrão tamanho95 &lt;- qnorm(p = 0.95, mean = 14.4, sd = 1) # graficando isso? hist(quadris, prob = T) # limite de tamanho abline(v = tamanho95, col = &quot;blue&quot;, lwd = 2, lty = &quot;dashed&quot;) # plota valores que estao dentro dessa distribuicao hist(quadris[quadris &lt; tamanho95], prob = T, add = T, col = &quot;red&quot;) 9.2.1.4 dnorm() A função dnorm() gera a densidade probabilística para um conjunto de valores, tendo em vista uma distribuição normal de mesma média e mesmo desvio padrão. Podemos responder à pergunta: Qual a densidade probabilística para um valor de quadril de 12 polegadas? Ou seja, qual a probabilidade de amostrar na população uma pessoa com quadril de 12 polegadas? dq12 &lt;- dnorm(x = 12, mean = 14.4, sd = 1) dq12 ## [1] 0.02239453 # mostra na figura # plota a densidade probabilística hist(quadris, prob = T) # coloca a linha lines(stats::density(quadris), col = &quot;red&quot;, lwd = 2) # adicona um ponto que mostra a probabilidade do valor points(x = 12, y = dq12, pch = 21, bg = &quot;blue&quot;) segments(0, dq12, 12, dq12, lty = &quot;dotted&quot;, col = &quot;blue&quot;, lwd = 2) axis(side = 2, at = dq12, labels = paste(round(dq12 * 100, 0), &quot;%&quot;, sep = &quot;&quot;), line = NULL, las = 2, col = &quot;blue&quot;) "],["sabermais-distribuicoes.html", "9.3 Para saber mais:", " 9.3 Para saber mais: Probability distributions. "],["exercícios-5.html", "9.4 Exercícios", " 9.4 Exercícios Resolva o exercício 103.7 Cara ou coroa. Resolva o exercício 103.9 Lembrando matrizes e listas. "],["extr-dados.html", "Capítulo 10 Extraindo dados de colunas descritivas", " Capítulo 10 Extraindo dados de colunas descritivas Na compilação de dados de especímenes botânicos, informações sobre a planta e o habitat estão em geral anotadas na forma de textos (notas), num formato pouco útil para entender os atributos dos organismos. Os scripts aqui relacionados mostram exemplos de como extrair informações dessas colunas descritivas, categorizando informações de habito, fertilidade, textura do solo, habitat, dap, altura. "],["dados-categóricos.html", "10.1 Dados categóricos", " 10.1 Dados categóricos A lógica básica é simples. Para cada tipo de informação (variável), buscaremos por um conjunto de palavras e suas variantes, e substituiermos todas elas por uma única palavra, criando estados de variação (categorias). É importante pensar na ordem em que a busca é feita, pois em algumas notas descritivas duas palavras podem ser encontradas e você quer apenas uma delas. Por exemplo, na busca por hábito você deveria buscar a palavra epífita antes da palavra árvore, porque se a coleta for de uma planta epífita, a palavra árvore pode aparecer como hospedeiro. Não precisa se preocupar com acentos nem se a palavra está em caixa alta ou baixa. Criaremos uma função para ignorar isso nas comparações. 10.1.1 Passo 01 - Lista de referência Você cria uma lista de referencia (veja a seção 10.2 para exemplos de listas de referência) para cada variável que quer buscar, composta de vetores com palavras ou parte de palavras a serem buscadas. Cada vetor tem um nome, que é a palavra que define a categoria (estados de variação da variável). A construção dessa lista deve ser baseada nas palavras que existem nos seus dados. As listas de referência abaixo contêm alguns conjuntos de palavras que você pode ajustar para seu uso. Vamos tomar como exemplo a variável hábito. Teremos duas categorias que desejamos separar: arvoreta e árvore. Vamos primeiro criar uma lista de referência usando a construção obj[[nome.da.categoria]] = c(palavras.a.buscar). referencias &lt;- list() referencias[[&quot;arvoreta&quot;]] &lt;- c(&quot;arvoreta&quot;, &quot;treelet&quot;, &quot;arvore pequena&quot;, &quot;arbolito&quot;, &quot;small tree&quot;) referencias[[&quot;árvore&quot;]] &lt;- c(&quot;arvore&quot;, &quot;tree&quot;, &quot;rvore&quot;, &quot;arvo&quot;, &quot;arbol&quot;, &quot;avore&quot;) referencias ## $arvoreta ## [1] &quot;arvoreta&quot; &quot;treelet&quot; &quot;arvore pequena&quot; &quot;arbolito&quot; ## [5] &quot;small tree&quot; ## ## $árvore ## [1] &quot;arvore&quot; &quot;tree&quot; &quot;rvore&quot; &quot;arvo&quot; &quot;arbol&quot; &quot;avore&quot; Vejam que em nossa lista de referência referencias incluímos primeiramente arvoreta e depois árvore, porque árvore faz parte da palavra arvoreta, e nós desejamos diferenciar as duas categorias. Note que erros de grafia e palavras em diferentes idiomas podem ser inseridos nesses vetores como palavras a serem buscadas. 10.1.2 Passo 02 - Funções que fazem a busca Primeiro criaremos uma função removeacentos(), que pega um texto ou vetor de textos e remove acentos. Isso é útil porque é frequente a mesma palavra aparecer com e sem acentos, por isso é melhor ignorar acentos nas comparações. removeacentos &lt;- function(x) { # remove acentos xx &lt;- iconv(x, to = &quot;ASCII//TRANSLIT&quot;) xx &lt;- gsub(&quot;[~|^|~|\\&quot;|&#39;|`]&quot;, &quot;&quot;, xx) return(xx) } E uma segunda função pegavalor()que usa a lista de referência para extrair os dados de um texto. Nesta função, o argumento x é um vetor de classe character de comprimento igual a 1 contendo o texto original a ser explorado. O segundo argumento da função, referencias, é uma lista de comprimento maior ou igual a 1 referente as categorias a serem buscadas no elemento x: pegavalor &lt;- function(x, referencias) { acategoria &lt;- NA # objeto onde armazena a categoria caso encontre em x x &lt;- x[!is.na(x)] # elimina elementos NA em x x &lt;- removeacentos(x) if (length(x) == 1 &amp; is.character(x)[1]) { # se x ainda for um texto for (t in 1:length(referencias)) { # se ainda não encontrou procura em outra referencia if (is.na(acategoria)) { words &lt;- referencias[[t]] # pega as palavras a serem buscadas words &lt;- words[!is.na(words)] # limpa caso haja NAs hab &lt;- names(referencias)[t] # pega a categoria correspondente if (!is.null(hab) &amp; !is.na(hab) &amp; length(words) &gt;= 1) { words &lt;- removeacentos(words) found &lt;- 0 # para cada palavra chave busca em x e se encontrar anota for (g in 1:length(words)) { gp &lt;- grep(words[g], x, ignore.case = T) if (length(gp) &gt; 0) { found &lt;- found + 1 } } # se encontrou, atribui if (found &gt; 0) { acategoria &lt;- hab } } } } } # retorna o resultado return(acategoria) } 10.1.3 Passo 03 - Usando a função Vamos utilizar dados de exemplo para testar a função. Baixe o arquivo presente neste endereço (https://github.com/LABOTAM/IntroR/blob/main/dados/pegados_dados_exemplo.csv). Ele apresenta uma coluna com notas de exsicatas para ilustrar nosso exemplo. # voce já deve ter os seguinte objetos: pegavalor(), removeacentos(), referencias # le o arquivo de exemplo dados &lt;- read.table(file = &quot;pegados_dados_exemplo.csv&quot;, sep = &quot;\\t&quot;, as.is = TRUE, na.strings = c(&quot;NA&quot;, &quot;NULL&quot;, &quot;&quot;), header = TRUE) txt.org &lt;- dados$NOTAS_ORIGINAL # coluna com dados de notas (cada linha é um registro) head(txt.org) ## [1] &quot;; HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes. árvore de 12m; frutos imaturos verdes;HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes.&quot; ## [2] &quot;; Hábito: Árvore; Cor da flor: ; Cor do fruto: verdes árvore de 8 m de altura, frutos verdes. árvore de 8m altura, frutos verdes.;Árvore de 8 m de altura, frutos verdes.&quot; ## [3] &quot;; Hábito: Árvore; Cor da flor: brancas (botoes brancos); Cor do fruto: árvore de 10 m de altura, botoes e flores brancos. árvore de 10 m de altura, botões e flores brancos. árvore de 10m de altura, botoes e flores brancos.;Árvore de 10 m de altura, botões e flores brancos.&quot; ## [4] &quot;?muena?, 15m, fls. Yellow&quot; ## [5] &quot;[BARCODE = *MIRR 00705*]Tall terra firme forest with trees to 35m; Transecto de tatu, c. 4km from station.&amp;nf;&amp;nf;Tree, 20cm dbh.&amp;nf;Vegetative ecological voucher.&quot; ## [6] &quot;10m x 15cm DAP. Frutos imaturos verdes. 10m x 15cm dap. frutos imaturos verdes. ; de árvore de 10m x 15 cm dap, frutos imaturos verdes&quot; habito &lt;- sapply(txt.org, pegavalor, referencias = referencias) table(habito) # o que estiver NA significa que ele não encontrou as palavras em referencias. árvore arvoreta 542 113 # adiciona com uma nova coluna em dados dados$HABITO &lt;- habito "],["listas-ref.html", "10.2 Listas de referência", " 10.2 Listas de referência As listas de referência abaixo podem ser úteis e você pode acrescentar termos de busca a cada categoria. A ordem das categorias na lista deve ser pensada de forma que minimize erros. Por exemplo, é importante primeiro encontrar liana herbacea e apenas depois definir liana lenhosa porque muitas vezes aparece apenas a palavra ‘liana’ que se refere a plantas lenhosas quando não diferenciada. O formato básico é: lista[[“categoria a definir”]] = c(vetor com as palavras a serem encontradas que indiquem a categoria) 10.2.1 Hábito da planta habito.refs &lt;- list() habito.refs[[&quot;liana herbácea&quot;]] &lt;- c(&quot;erva trepadeira&quot;, &quot;trepadeira&quot;, &quot;liana herbácea&quot;, &quot;liana herbacea&quot;, &quot;erva liana&quot;, &quot;rastejante&quot;, &quot;vine&quot;, &quot;scandent vine&quot;, &quot;erva liana&quot;) habito.refs[[&quot;liana lenhosa&quot;]] &lt;- c(&quot;cipó&quot;, &quot;liana&quot;, &quot;liana sublenhosa&quot;, &quot;liana lenhosa&quot;) habito.refs[[&quot;hemiepífita&quot;]] &lt;- c(&quot;hemiepifita&quot;, &quot;hemi-epifita&quot;, &quot;hemiepiphyte&quot;, &quot;hemi-epiphyte&quot;) habito.refs[[&quot;epífita&quot;]] &lt;- c(&quot;epífita&quot;, &quot;epiphyte&quot;) habito.refs[[&quot;arvoreta&quot;]] &lt;- c(&quot;arvoreta&quot;, &quot;treelet&quot;, &quot;Trellet&quot;, &quot;arvore pequena&quot;, &quot;arbolito&quot;, &quot;small tree&quot;) habito.refs[[&quot;árvore&quot;]] &lt;- c(&quot;m de altura&quot;, &quot;DAP:&quot;, &quot;arvore&quot;, &quot;tree&quot;, &quot;rvore&quot;, &quot;arvo&quot;, &quot;arbol&quot;, &quot;arbre&quot;, &quot;Arbor&quot;, &quot;Arv.&quot;, &quot; DAP&quot;, &quot;DBH &quot;, &quot; DBH&quot;, &quot;DAP &quot;, &quot;D.A.P. &quot;, &quot;Árovore&quot;, &quot;Arborea&quot;, &quot;Ávore&quot;, &quot;ÁRVIRE&quot;, &quot;Arbóreo&quot;, &quot;Tronco &quot;, &quot; PAP &quot;, &quot;Rrv.&quot;) habito.refs[[&quot;arbusto&quot;]] &lt;- c(&quot;arbust&quot;, &quot;shrub&quot;, &quot;scrub&quot;, &quot;subarbust&quot;, &quot;arbust&quot;, &quot;Shruv&quot;) habito.refs[[&quot;hemiparasita&quot;]] &lt;- c(&quot;hemiparasit&quot;, &quot;hemi-parasit&quot;) habito.refs[[&quot;saprófita&quot;]] &lt;- c(&quot;saprofit&quot;, &quot;saprophy&quot;) habito.refs[[&quot;parasita&quot;]] &lt;- c(&quot;parasit&quot;) habito.refs[[&quot;erva aquática&quot;]] &lt;- c(&quot;erva aquática&quot;, &quot;erva aquatica&quot;, &quot;Macrófita aquática&quot;, &quot;macrofit&quot;, &quot;macrophy&quot;, &quot;aquatic herb&quot;) habito.refs[[&quot;erva&quot;]] &lt;- c(&quot;erva&quot;, &quot;herbace&quot;, &quot;terrestre&quot;, &quot;herbacia&quot;, &quot;herb&quot;) 10.2.2 Estado de fertilidade da amostra fertilidade.refs &lt;- list() fertilidade.refs[[&quot;flores&quot;]] &lt;- c(&quot; flor&quot;, &quot; petal&quot;, &quot; flôr&quot;, &quot; pétala&quot;, &quot; estigma&quot;, &quot; sépal&quot;, &quot; sepal&quot;, &quot; bract&quot;, &quot; flower&quot;, &quot; bráctea&quot;, &quot;sicônio&quot;, &quot;siconio&quot;, &quot; estgimas&quot;, &quot; espadice&quot;, &quot; espádice&quot;, &quot; ovário&quot;, &quot;ovario&quot;, &quot; tépala&quot;, &quot; antera&quot;, &quot; estame&quot;, &quot;tepala&quot;, &quot;Pétal&quot;, &quot;Tépal&quot;, &quot;Sépal&quot;, &quot;espata&quot;, &quot;corolla&quot;, &quot;anthers&quot;) fertilidade.refs[[&quot;botões&quot;]] &lt;- c(&quot; botão&quot;, &quot; botões&quot;, &quot; botao&quot;, &quot; botao&quot;, &quot; bud&quot;) fertilidade.refs[[&quot;frutos&quot;]] &lt;- c(&quot; fruto&quot;, &quot; fruit&quot;, &quot;futo&quot;, &quot;f ruto&quot;, &quot;frutescencia&quot;, &quot;frutescenc&quot;, &quot;frutescênc&quot;, &quot; legume&quot;, &quot; semente&quot;, &quot; cupula&quot;, &quot; cúpula&quot;) fertilidade.refs[[&quot;estéril&quot;]] &lt;- c(&quot;Estéril&quot;, &quot;Sterile&quot;) 10.2.3 Classes de hábitat habitat.refs &lt;- list() habitat.refs[[&quot;Floresta ciliar&quot;]] &lt;- c(&quot;Riverbank&quot;, &quot;beria de rio&quot;, &quot;beira de rio&quot;, &quot;berra de rio&quot;, &quot; ciliar&quot;, &quot;galeria&quot;, &quot;Gallery forest&quot;, &quot;margem alta do igarap&quot;) habitat.refs[[&quot;Floresta de igapó&quot;]] &lt;- c(&quot;igapo&quot;, &quot;margin of black water igarapé&quot;) habitat.refs[[&quot;Floresta Inundável&quot;]] &lt;- c(&quot;varzea&quot;, &quot;flooded forest&quot;, &quot;floresta indundavel&quot;, &quot;periodicamente inundavel&quot;) habitat.refs[[&quot;Campinarana&quot;]] &lt;- c(&quot;campinarana&quot;, &quot;varillal&quot;, &quot;chamisal&quot;, &quot;wallaba&quot;, &quot;curuni&quot;, &quot;sandy soil&quot;, &quot;Solo arenoso, dossel&quot;) habitat.refs[[&quot;Campina&quot;]] &lt;- c(&quot;campina&quot;, &quot;campinarana gramíneo lenhosa&quot;, &quot;savannis areno&quot;) habitat.refs[[&quot;Aquático&quot;]] &lt;- c(&quot;aquatic&quot;) habitat.refs[[&quot;Vegetação secundária&quot;]] &lt;- c(&quot;Mata secundária&quot;, &quot;Secondary forest&quot;, &quot;capoeira&quot;, &quot;Disturbed margin of road&quot;, &quot;mata perturbada&quot;, &quot;mata pertubada&quot;, &quot;rea alterada&quot;, &quot;beira de mata&quot;, &quot;beira de estrada&quot;, &quot;beira da estrada&quot;, &quot;antropizada&quot;, &quot;floresta secundária&quot;, &quot;vegetação secundária&quot;) habitat.refs[[&quot;Floresta de Baixio&quot;]] &lt;- c(&quot;Nomflooded moist forest&quot;, &quot;baixio&quot;, &quot;area encharcada&quot;, &quot;encharcado&quot;, &quot;Non-flooded moist forest&quot;, &quot;Solo argiloso sujeito a inundação tempor&quot;) habitat.refs[[&quot;Floresta de Vertente&quot;]] &lt;- c(&quot;vertente&quot;, &quot;encosta&quot;, &quot;slope&quot;, &quot;Solo areno-argiloso&quot;) habitat.refs[[&quot;Floresta de Platô&quot;]] &lt;- c(&quot;plato&quot;, &quot;plateau&quot;) habitat.refs[[&quot;Floresta de Terra Firme&quot;]] &lt;- c(&quot;Solo argiloso. Dossel&quot;, &quot;Solo argiloso, dossel&quot;, &quot;Mata de solo argiloso&quot;, &quot;Upland hillside forest&quot;, &quot;Upland forest&quot;, &quot;Primary forest&quot;, &quot;terra firme&quot;, &quot;terra alta&quot;, &quot;Terreno firme&quot;, &quot;Floresta&quot;, &quot;Mata primaria&quot;, &quot;Mata de terra&quot;, &quot;Terreno argiloso&quot;, &quot;Mature forest&quot;) habitat.refs[[&quot;Cerradão&quot;]] &lt;- c(&quot;cerradao&quot;) habitat.refs[[&quot;Cerrado&quot;]] &lt;- c(&quot;cerrado&quot;, &quot;savanna&quot;, &quot;savana&quot;) habitat.refs[[&quot;Campo rupestre&quot;]] &lt;- c(&quot;Campo rupestre&quot;) 10.2.4 Textura do solo solo.refs &lt;- list() solo.refs[[&quot;pedregoso&quot;]] &lt;- c(&quot;pedregos&quot;, &quot;pedral&quot;, &quot;rock&quot;) solo.refs[[&quot;areno-argiloso&quot;]] &lt;- c(&quot;areno-argilos&quot;, &quot;areno argilos&quot;, &quot;arenoso-argiloso&quot;, &quot;arenoso argiloso&quot;, &quot;argilo-arenoso&quot;, &quot;argilo arenoso&quot;, &quot;areno-arcill&quot;) solo.refs[[&quot;argiloso&quot;]] &lt;- c(&quot;argilos&quot;, &quot;agilos&quot;, &quot;clay&quot;, &quot;clayish&quot;, &quot; loam&quot;, &quot; arcill&quot;) solo.refs[[&quot;arenoso&quot;]] &lt;- c(&quot;arenoso&quot;, &quot;aenoso&quot;, &quot;areia branca&quot;, &quot;sand&quot;, &quot;arrenoso&quot;) solo.refs[[&quot;siltoso&quot;]] &lt;- c(&quot; silte&quot;, &quot; silt&quot;) 10.2.5 Exsudato exsudato.refs &lt;- list() exsudato.refs[[&quot;látex&quot;]] &lt;- c(&quot;latex&quot;, &quot;látex&quot;) exsudato.refs[[&quot;resina&quot;]] &lt;- c(&quot;resina&quot;) exsudato.refs[[&quot;seiva&quot;]] &lt;- c(&quot;seiva&quot;, &quot; sap &quot;) exsudato.refs[[&quot;exsudato&quot;]] &lt;- c(&quot;exsudato&quot;, &quot;exsudação&quot;, &quot;exsudate&quot;) "],["extraindo-altura-e-dap.html", "10.3 Extraindo altura e dap", " 10.3 Extraindo altura e dap Funções para extrair altura e diâmetro à altura do peito (DAP) de colunas descritivas. 10.3.1 Altura pegaaltura &lt;- function(x) { x &lt;- gsub(&quot;\\\\+/-&quot;, &quot;&quot;, x) x &lt;- gsub(&quot; &quot;, &quot; &quot;, x) x &lt;- gsub(&quot; &quot;, &quot; &quot;, x) # print(x) pt1 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m x&quot; pt2 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m x&quot; pt3 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m\\\\. x&quot; pt4 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m de altura&quot; pt5 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m\\\\. de altura&quot; pt6 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m d ealtura&quot; pt7 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m de alto&quot; pt8 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m de alto&quot; pt9 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m alto&quot; pt10 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m de altura&quot; pt11 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m tall&quot; pt12 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m tall&quot; pt13 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m\\\\. tall&quot; pt14 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] m\\\\. Tall&quot; pt15 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]m\\\\. tall&quot; pt16 &lt;- &quot;Tree, [-+]?[0-9]*[,.]?[0-9]m&quot; pt17 &lt;- &quot;Tree, [-+]?[0-9]*[,.]?[0-9] m&quot; pt18 &lt;- &quot;Tree [-+]?[0-9]*[,.]?[0-9] m&quot; pt19 &lt;- &quot;Tree [-+]?[0-9]*[,.]?[0-9]m&quot; pt20 &lt;- &quot;to [-+]?[0-9]*v?[0-9] m&quot; pt21 &lt;- &quot;Tree [0-9]*-[0-9]*m&quot; pt22 &lt;- &quot;de [-+]?[0-9]*[,.]?[0-9] m&quot; pt23 &lt;- &quot;de [-+]?[0-9]*v?[0-9]m&quot; pt24 &lt;- &quot;de [0-9]*-[0-9]* m&quot; pt25 &lt;- &quot;Tree [0-9]*-[0-9]* m&quot; pt26 &lt;- &quot;de [0-9]*-[0-9]*m&quot; pt27 &lt;- &quot;alt. [-+]?[0-9]*[,.]?[0-9] m&quot; pt28 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] feet high&quot; pt29 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] ft. high&quot; pt30 &lt;- &quot;rvore [-+]?[0-9]*[,.]?[0-9]m&quot; pt31 &lt;- &quot;rvore [-+]?[0-9]*[,.]?[0-9] m&quot; pt32 &lt;- &quot;rvore, [-+]?[0-9]*[,.]?[0-9] m&quot; pt33 &lt;- &quot;rvore, [-+]?[0-9]*[,.]?[0-9]m&quot; pt34 &lt;- &quot;rbusto [-+]?[0-9]*[,.]?[0-9]m&quot; pt35 &lt;- &quot;rbusto [-+]?[0-9]*[,.]?[0-9] m&quot; pt36 &lt;- &quot;rbusto, [-+]?[0-9]*[,.]?[0-9] m&quot; pt37 &lt;- &quot;rbusto, [-+]?[0-9]*[,.].?[0-9]m&quot; pt38 &lt;- &quot;rvore +/- [-+]?[0-9]*[,.].?[0-9]m&quot; pt39 &lt;- &quot;rvore ca. [-+]?[0-9]*[,.].?[0-9]m&quot; pt40 &lt;- &quot;de [-+]?[0-9]*[,.].?[0-9] de altura&quot; pt41 &lt;- &quot;altura [-+]?[0-9]*[,.].?[0-9]m&quot; pt42 &lt;- &quot;altura [-+]?[0-9]*[,.].?[0-9] m&quot; pt43 &lt;- &quot;of [-+]?[0-9]*[,.].?[0-9]m&quot; pt44 &lt;- &quot;to [-+]?[0-9]*[,.].?[0-9]m&quot; pt45 &lt;- &quot;Treelet [-+]?[0-9]*[,.].?[0-9]m&quot; pt46 &lt;- &quot;rvore [-+]?[0-9]*[,.].?[0-9] m&quot; pt47 &lt;- &quot;rvore, [-+]?[0-9]*[,.].?[0-9] m&quot; pt48 &lt;- &quot;rvoreta, [-+]?[0-9]*[,.].?[0-9] m&quot; pt49 &lt;- &quot;Fuste= [-+]?[0-9]*[,.].?[0-9] m&quot; pt50 &lt;- &quot;Fuste= [-+]?[0-9]*[,.].?[0-9]m&quot; pt51 &lt;- &quot;com [-+]?[0-9]*[,.].?[0-9] m. alt.&quot; pt52 &lt;- &quot;Height: [-+]?[0-9]*[,.].?[0-9] m&quot; pt53 &lt;- &quot;Arbol [-+]?[0-9]*[,.].?[0-9]m&quot; pt54 &lt;- &quot;Treelet, [-+]?[0-9]*[,.].?[0-9]m&quot; pt55 &lt;- &quot;altura = [-+]?[0-9]*[,.].?[0-9]m&quot; pt56 &lt;- &quot;Fuste = [-+]?[0-9]*[,.].?[0-9]m&quot; pt57 &lt;- &quot;Fuste = [-+]?[0-9]*[,.].?[0-9] m&quot; altura &lt;- NA for (p in 1:57) { pt &lt;- get(paste(&quot;pt&quot;, p, sep = &quot;&quot;)) gp &lt;- grep(pt, x, ignore.case = F) if (length(gp) &gt; 0 &amp; is.na(altura)) { # print(p) rmm &lt;- strsplit(x, pt)[[1]] rmm &lt;- rmm[rmm != &quot;&quot; &amp; rmm != &quot;.&quot; &amp; !is.na(rmm)] xx &lt;- x if (length(rmm) &gt; 0) { for (r in length(rmm):1) { xx &lt;- gsub(rmm[r], &quot;&quot;, xx, fixed = T, useBytes = T) } } xx &lt;- trimws(gsub(&quot;[A-Z]|\\\\(|\\\\)|:|=&quot;, &quot;&quot;, xx, ignore.case = T), which = &quot;both&quot;) xx &lt;- gsub(&quot;,&quot;, &quot;.&quot;, xx) tt &lt;- grep(&quot;-&quot;, xx) if (length(tt) &gt; 0) { xxx &lt;- strsplit(xx, &quot;-&quot;)[[1]] xxx &lt;- xxx[xxx != &quot;&quot;] xxx &lt;- gsub(&quot; \\\\.&quot;, &quot;&quot;, xxx) xx &lt;- mean(as.numeric(trimws(xxx, which = &quot;both&quot;)), na.rm = T) } else { xx &lt;- strsplit(xx, &quot; &quot;)[[1]] xx &lt;- trimws(xx, which = &quot;both&quot;) xx &lt;- xx[xx != &quot;.&quot;] xx &lt;- xx[1] } xx &lt;- as.numeric(xx) if (!is.na(xx) &amp;&amp; xx &gt; 0) { altura &lt;- xx } else { altura &lt;- NA } } } return(altura) } 10.3.2 DAP pegadap &lt;- function(x) { x &lt;- gsub(&quot;\\\\+/-&quot;, &quot;&quot;, x) x &lt;- gsub(&quot; &quot;, &quot; &quot;, x) x &lt;- gsub(&quot; &quot;, &quot; &quot;, x) # print(x) pt1 &lt;- &quot;x [-+]?[0-9]*[,.]?[0-9] cm de circ&quot; pt2 &lt;- &quot;x [-+]?[0-9]*[,.]?[0-9] cm de di&quot; pt3 &lt;- &quot;x [-+]?[0-9]*[,.]?[0-9]cm de di&quot; pt4 &lt;- &quot;x [-+]?[0-9]*[,.]?[0-9]cm di&quot; pt5 &lt;- &quot;m x [-+]?[0-9]*[,.]?[0-9] cm DAP&quot; pt6 &lt;- &quot;m x [-+]?[0-9]*[,.]?[0-9] cm&quot; pt7 &lt;- &quot;de [-+]?[0-9]*[,.]?[0-9] m de DAP&quot; pt8 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] cm de DAP&quot; pt9 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] cm (DAP)&quot; pt10 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] cm dbh&quot; pt11 &lt;- &quot;DAP [-+]?[0-9]*[,.]?[0-9] cm&quot; pt12 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] cm D.A.P.&quot; pt13 &lt;- &quot;D.A.P. = [-+]?[0-9]*[,.]?[0-9] cm&quot; pt14 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]cm de di&quot; pt15 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]cm dap&quot; pt16 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]cm. dia&quot; pt17 &lt;- &quot;dbh. [-+]?[0-9]*[,.]?[0-9]cm&quot; pt18 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9]cm. in dia&quot; pt19 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] cm de di&quot; pt20 &lt;- &quot;[-+]?[0-9]*[,.]?[0-9] cm (DAP)&quot; pt21 &lt;- &quot;DBH [-+]?[0-9]*[,.]?[0-9] cm&quot; # x=&quot;Árvore de 13m de altura x 11cm de diâmetro do fuste.&quot; altura &lt;- NA for (p in 1:21) { pt &lt;- get(paste(&quot;pt&quot;, p, sep = &quot;&quot;)) gp &lt;- grep(pt, x, ignore.case = F) if (length(gp) == 1 &amp; is.na(altura)) { # print(p) rmm &lt;- strsplit(x, pt)[[1]] rmm &lt;- rmm[rmm != &quot;&quot; &amp; rmm != &quot;.&quot; &amp; !is.na(rmm)] xx &lt;- x if (length(rmm) == 1) { for (r in length(rmm):1) { xx &lt;- gsub(rmm[r], &quot;&quot;, xx, fixed = T, useBytes = T) } } else { if (length(rmm) == 2) { n1 &lt;- nchar(rmm[1]) n2 &lt;- nchar(rmm[2]) n0 &lt;- nchar(x) ns &lt;- n1 + 1 nt &lt;- n0 - n2 xx &lt;- substr(x, ns, nt) } else { if (length(rmm) &gt; 2) { xx &lt;- NA } } } if (!is.na(xx)) { xx &lt;- trimws(gsub(&quot;[A-Z]|\\\\(|\\\\)|:|=&quot;, &quot;&quot;, xx, ignore.case = T), which = &quot;both&quot;) xx &lt;- gsub(&quot;,&quot;, &quot;.&quot;, xx) tt &lt;- grep(&quot;-&quot;, xx) if (length(tt) &gt; 0) { xxx &lt;- strsplit(xx, &quot;-&quot;)[[1]] xxx &lt;- xxx[xxx != &quot;&quot;] xxx &lt;- gsub(&quot; \\\\.&quot;, &quot;&quot;, xxx) xx &lt;- mean(as.numeric(trimws(xxx, which = &quot;both&quot;)), na.rm = T) } else { xx &lt;- strsplit(xx, &quot; &quot;)[[1]] xx &lt;- trimws(xx, which = &quot;both&quot;) xx &lt;- xx[xx != &quot;.&quot; &amp; xx != &quot;&quot; &amp; xx != &quot;...&quot;] xx &lt;- xx[1] if (substr(xx, nchar(xx), nchar(xx)) == &quot;.&quot;) { xx &lt;- substr(xx, 1, nchar(xx) - 1) } } xx &lt;- as.numeric(xx) if (xx &gt; 0) { altura &lt;- xx } } } } return(altura) } "],["usando-essas-funções.html", "10.4 Usando essas funções", " 10.4 Usando essas funções Vamos utilizar o conjunto dados carregado acima para utilizar as funções que criamos anteriormente: txt.org &lt;- as.vector(dados$NOTAS) # sua coluna com dados descritivos 10.4.1 Obtendo valores de altura # aplica a funcao alts &lt;- sapply(txt.org, pegaaltura) ## Warning in FUN(X[[i]], ...): NAs introduced by coercion ## Warning in mean(as.numeric(trimws(xxx, which = &quot;both&quot;)), na.rm = T): NAs ## introduced by coercion ## Warning in mean(as.numeric(trimws(xxx, which = &quot;both&quot;)), na.rm = T): NAs ## introduced by coercion ## Warning in FUN(X[[i]], ...): NAs introduced by coercion ## Warning in FUN(X[[i]], ...): NAs introduced by coercion ## Warning in mean(as.numeric(trimws(xxx, which = &quot;both&quot;)), na.rm = T): NAs ## introduced by coercion ## Warning in mean(as.numeric(trimws(xxx, which = &quot;both&quot;)), na.rm = T): NAs ## introduced by coercion head(alts) ## ; HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes. árvore de 12m; frutos imaturos verdes;HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes. ## 12 ## ; Hábito: Árvore; Cor da flor: ; Cor do fruto: verdes árvore de 8 m de altura, frutos verdes. árvore de 8m altura, frutos verdes.;Árvore de 8 m de altura, frutos verdes. ## 8 ## ; Hábito: Árvore; Cor da flor: brancas (botoes brancos); Cor do fruto: árvore de 10 m de altura, botoes e flores brancos. árvore de 10 m de altura, botões e flores brancos. árvore de 10m de altura, botoes e flores brancos.;Árvore de 10 m de altura, botões e flores brancos. ## 10 ## ?muena?, 15m, fls. Yellow ## NA ## [BARCODE = *MIRR 00705*]Tall terra firme forest with trees to 35m; Transecto de tatu, c. 4km from station.&amp;nf;&amp;nf;Tree, 20cm dbh.&amp;nf;Vegetative ecological voucher. ## NA ## 10m x 15cm DAP. Frutos imaturos verdes. 10m x 15cm dap. frutos imaturos verdes. ; de árvore de 10m x 15 cm dap, frutos imaturos verdes ## 10 names(alts) &lt;- NULL # quais valores viraram NA (ou seja, não encontrou um valor de altura) txt.org[is.na(alts)] ## [1] &quot;?muena?, 15m, fls. Yellow&quot; ## [2] &quot;[BARCODE = *MIRR 00705*]Tall terra firme forest with trees to 35m; Transecto de tatu, c. 4km from station.&amp;nf;&amp;nf;Tree, 20cm dbh.&amp;nf;Vegetative ecological voucher.&quot; ## [3] &quot;1st specimen: Tree, flowers cream. 2nd specimen: Shrub 20 ft. tall; flowers cream-colored.&quot; ## [4] &quot;3m tree. Flowers tan color&quot; ## [5] &quot;6 in. diam, 30 ft high. Phenology of specimen: Fruit.&quot; ## [6] &quot;7.7 cm DAP&quot; ## [7] &quot;8 m tree; flowers yellowish.&quot; ## [8] &quot;Altura 13m, PAP 63cm, caule interno branco, externo róseo.&quot; ## [9] &quot;Ambiente: Floresta perenifolia. Habito: Árvore menor que 5m&quot; ## [10] &quot;Ambiente: Mata Atlântica. Habito: Árvore, 7-8m.&quot; ## [11] &quot;Ambiente: Mata Estacional Semidecidual com Mata ciliar. Habito: Árvore, ca 14m. floresta estacional semidecidual com mata ciliar.;Ambiente: Mata Estacional Semidecidual com Mata ciliar. Habito: Árvore, ca 14m.&quot; ## [12] &quot;Ambiente: Mata higrofila, úmida. Habito: Árvore maior que 5m e menor 20m&quot; ## [13] &quot;Ambiente: Mata junto a plantaçao de coco. Habito: Arvoreta, 3m. arvoreta. 3. metros. flores cremes.; solo silico-argiloso ; ha&quot; ## [14] &quot;Ambiente: Mata Ombrófila Densa Montana. Habito: Arvoreta, ca. 4m.&quot; ## [15] &quot;Ambiente: Mata. Borda com canavial. Habito: Árvore, ca. 6m.&quot; ## [16] &quot;Ambiente: Mata. Borda da mata. Habito: Árvore, 10 a 12m.&quot; ## [17] &quot;Ambiente: Mata. Habito: Árvore, ca 15m. árvore ca. 15 m alt. folahs com indumento castanho. flores creme-amareladas.;Árvore ca. 15 m alt. Folahs com indumento castanho. Flores creme-amareladas.&quot; ## [18] &quot;Ambiente: Mata. Habito: Árvore, ca. 9m&quot; ## [19] &quot;Ambiente: Mata. Habito: Árvore, DAP 37,2cm.&quot; ## [20] &quot;Ambiente: Mata. Habito: Árvorezinha, 7m.&quot; ## [21] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, 5 a 6m.&quot; ## [22] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, c.a 9m.&quot; ## [23] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, ca. 4 a 5m.&quot; ## [24] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, ca. 6,5m.&quot; ## [25] &quot;Ambiente: Mata. No interior da mata. Habito: Árvore, 8 a 10m.&quot; ## [26] &quot;Arbol 7 m, DAP=8 cm, simpódico, aceites etéreos en las hojas. Frutos verde-amarillentos.&quot; ## [27] &quot;Arbol 8 m, DAP: 11.1 cm, madera aromática, estéril.&quot; ## [28] &quot;Arbol de aproximadamente 10 m alto. Frutos verdes en el exterior, morados internamente y algo carnosos. El cáliz verde.&quot; ## [29] &quot;Arbol, 20 metres de altura. Frutos drupas verdes, dentro de capsula negra +/- leñosa.&quot; ## [30] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 1,5m, fuste 10m, cap fuste 49cm, diâmetro copa 10m. Botao branco, flor creme, fruto branca, seiva incolor, descamaçao ausente.&quot; ## [31] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 12m, fuste 6m, cap fuste 55,92cm, diâmetro copa 5m. Fruto maduro roxo, fruto imaturo verde, seiva incolor, descamaçao ausente.&quot; ## [32] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 13m, fuste 9m, cap fuste 56,55cm, diâmetro copa 4m. Botao verde claro, flor branca, seiva incolor, descamaçao em ripas. mata de tabuleiro.&quot; ## [33] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 10m, cap fuste 85cm, diâmetro copa 5m. Botao branco, flor branca, seiva incolor, descamaçao ausente. mata de tabuleiro.;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 10m, cap fuste 85cm, diâmetro copa 5m. Botao branco, flor branca, seiva incolor, descamaçao ausente.&quot; ## [34] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 6m, cap fuste 98,96cm, diâmetro copa 12m. Botao verde claro, flor amarela, seiva amarela, descamaçao em placas.&quot; ## [35] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 8m, cap fuste 125,66cm, diâmetro copa 13m. Botao branco, flor creme, seiva incolor, descamaçao ausente.&quot; ## [36] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 16m, fuste 7m, cap fuste 131,95vm, diâmetro copa 8m. Botao creme, seiva incolor, descamaçao em placas.&quot; ## [37] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 4m, fuste 2m, cap fuste 31,42cm, diâmetro copa 5m. Botao branco, flor creme, seiva incolor, descamaçao em placas. mata de tabuleiro.;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 4m, fuste 2m, cap fuste 31,42cm, diâmetro copa 5m. Botao branco, flor creme, seiva incolor, descamaçao em placas.&quot; ## [38] &quot;Arbóreo. Inflorescencia patente, botoes verdes.; DESC: Arbóreo. Inflorescencia patente, botoes verdes.&quot; ## [39] &quot;arbre, 11 m, 9 cm DBH. fr. vert r points blancs, clair r lapex, plus foncé r la base, claice vert accres., entourant 2/3 du fr., f. discolores, velues dessous, poils dorés. récolte photographiée in situ.; Foret ombrophile submontagna&quot; ## [40] &quot;arbre, 8 m, 10 cm DBH; fleur trimcres, 3+3 tép. jaunes recouverts de duvet roux, 3+3+3 étamines spatuléesm arquées, r 4 clapets; récolte photographiée in situ; échantillon séché r lair chaud; Foret ombrophile submontagnarde de pente&quot; ## [41] &quot;Arbustivo, fruto verde e preto; Costeiro&quot; ## [42] &quot;Arbusto ca. 1 m alt.; caule amarronzado; frutos verdes.&quot; ## [43] &quot;Arbusto ca. 1,50m alt.; caule amarronzado; frutos imaturos verdes.&quot; ## [44] &quot;Arbusto ca. 1,5m alt e 1cm de diâmetro. Caule acinzentado. Folhas coriáceas. Flores em botoes esverdeados. Frutos imaturos verdes, na maturaçao enegrecidos. Com cálice persistente alaranjado. Madeira boa para móveis. Lenha e carvao arbusto ca. 1,5m alt. e 1 cm de diâmetro; caule acinzentado; folhas coriáceas; flores em botoes esverdeados; frutos imaturos verdes, na maturaçao enegrecidos; com cálice persistente alaranjado, madeira boa para móveis; lenha e carvao&quot; ## [45] &quot;Arbusto ca. 2 m alt.; inflorescencia em botoes amarronzados; frutos imaturos verdes&quot; ## [46] &quot;Arbusto ca. 2 m alt.; ramos marrom-escuro; folhas adaxialmente verde brilhante e abaxialmente verde claro; flores amareladas.&quot; ## [47] &quot;Arbusto ca. 2 m. Botoes ferrugíneos.HABITAT:Mata Atlântica.;&quot; ## [48] &quot;Arbusto ca. 3 m alt.; flores alvacentas.&quot; ## [49] &quot;Arbusto ca. 3,0m, frutos imaturos. Subst. arenosos.; Cerrado (Típico). coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;&quot; ## [50] &quot;Arbusto ca. 3.0 m. alt. Folhas verdes concolores. Flores em botoes amarelados&quot; ## [51] &quot;Arbusto cerca de 1,30 m.&quot; ## [52] &quot;Arbusto ramoso; ramos acinzentados; folhas coriáceas, abaxialmente verde mais claro; frutos verdes.&quot; ## [53] &quot;Arbusto, flor branca esverdeada&quot; ## [54] &quot;Arbusto, folhas simples alternas. Flores pequenas, pouco vistosas.&quot; ## [55] &quot;Arbusto, ocasional, ca. 1,60m, caule verde-amarronzado, folha levemente papirácea, adaxialmente verde brilhante, infloresc. jovem verde-alvascenta; Restinga&quot; ## [56] &quot;Arbusto; flores amarelas; femea. arbusto; flores amarelas; fêmea.&quot; ## [57] &quot;Arbusto; ramos amarronzados; folhas coriáceas, adaxialmente verde-escuro brilhante e abaxialmente verde-claro; flores amareladas.&quot; ## [58] &quot;Área de influencia direta (canteiro).&quot; ## [59] &quot;Área de influencia indireta.&quot; ## [60] &quot;Árvore&quot; ## [61] &quot;ÁRVORE .&quot; ## [62] &quot;Árvore 15m, frutos pequenos um pouco ovais, caule cor de kaki escuro, mata t.f.; DESC: Árvore 15m, frutos pequenos um pouco ovais, caule cor de kaki escuro, mata t.f.&quot; ## [63] &quot;Árvore até 11m, frutos verdes.&quot; ## [64] &quot;Árvore até 20 m alt. Flores brancas.&quot; ## [65] &quot;Árvore c/ca. 4 m alt.; Botoes creme; Fruto com cálice persistente.HABITAT:Mata degradada;&quot; ## [66] &quot;Árvore ca 5 m. Inflorescencia em botoes.&quot; ## [67] &quot;Arvore ca 5m de alt, botoes florais ferruginosos, arvore ca 5m de alt, botões florais ferruginosos, árvore ca. 5 m alt.; botoes florais ferruginosos. margem da floresta, árvores de grande porte e emaranhado de arbustos. árvore de aproximadamente 5,00m de altura; botoes florais ferruginosos. margem da floresta, árvores de grande porte e emaranhado de arbustos.&amp;nf;floresta ombrófila aberta. 15m de altitude.; desc: árvore de aproximadamente 5,00m de altura; botoes florais fe árvore de aproximadamente 5m de altura. botoes florais ferruginosos. árvore de aproximadamente 5m de altura. botões florais ferruginosos. floresta ombrófita aberta&quot; ## [68] &quot;Árvore ca. 10 m de alt., flores alvo-amareladas&quot; ## [69] &quot;Árvore ca. 11m, com frutos verdes.&quot; ## [70] &quot;Árvore ca. 12 m alt.; frutos imaturos verdes.&quot; ## [71] &quot;Árvore ca. 15 m alt., copada; folhas e lenho aromáticos; folhas coriáceas; flores amarronzadas. Voucher para estudo fitoquímicos.&quot; ## [72] &quot;Árvore ca. 15 m alt.; flores amareladas. arvore ca. 15m alt.; flores amareladas.&quot; ## [73] &quot;Árvore ca. 18m; folhas discolores verdes; coriáceas; frutos imaturos verdes. árvore. 8. metros. folhas discolores verdes, coriáceas frutos imaturos verdes. ; de;Árvore ca. 18m; folhas discolores verdes; coriáceas; frutos imaturos verdes.&quot; ## [74] &quot;Arvore ca. 4 m. altura. Frutos imaturos verdes com receptáculo avermelhado&quot; ## [75] &quot;Árvore ca. 5.0 m, frutos imaturos.; Campo Cerrado. Substrato areno-pedregoso. coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;;Árvore ca. 5.0 m, frutos imaturos.; Campo Cerrado. Substrato areno-pedregoso.&quot; ## [76] &quot;Árvore ca. 6 m alt.; caule marrom; folhas levemente papiráceas; frutos imaturos verdes. orla da mata&quot; ## [77] &quot;Árvore ca. 6 m alt.; folhas brilhantes na face superior, flores alvas.&quot; ## [78] &quot;Árvore ca. 6m, flores creme.&quot; ## [79] &quot;Árvore ca. 7, 0 m, botoes florais esverdeadas. Subst. areno-pedregoso.; Cerrado (Típico). coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;&quot; ## [80] &quot;Árvore ca. 7m, frutos pretos em forma de sino&quot; ## [81] &quot;Árvore ca. 8 m alt. e 52 cm CAP; tronco castanho com bastante lenticelas bem desenvolvidas e odor característico ao ser cortado; folhas levemente discolor, face adaxial verde lustroso, glabra e abaxial levemente pilosa e de cor opaca;&quot; ## [82] &quot;Árvore ca. 8 m alt.; folhas coriáceas; frutos imaturos.&quot; ## [83] &quot;Árvore ca. 8 m alt.; frutos em desenvolvimento. Indivíduo 75. coordenadas do material: 3°01-22,7s; 49°58-24,5w, indivíduo 75 (na ident. de pedro l. r. moraes consta que pode ser glomerata)&quot; ## [84] &quot;Árvore ca. 8 m alt.; frutos imaturos verdes. árvore. 8. metros. frutos imaturos verdes.; mata subperenifolia ; ha&quot; ## [85] &quot;Árvore ca. 8 m, com inflorescencia de coloraçao amarela-esverdeada. árvore ca. 8 m, com inflorescência de coloração amarela-esverdeada. árvore ca. 8m, com inflorescencia de coloraçao amarela-esverdeada.;Árvore ca. 8 m, com inflorescencia de coloraçao amarela-esverdeada.&quot; ## [86] &quot;Árvore ca. de 5,0m de alt. folhas discolores, ramos castanhos, botoes verdes e flores cremes. Mata Atlântica.&quot; ## [87] &quot;Árvore com ± 8 m alt. Flores branco-amareladas, com leve perfume agradável.&quot; ## [88] &quot;Árvore com 10 a 12 m de alt. Folhas rígidas coriáceas. Flores de coloraçao creme.&quot; ## [89] &quot;Árvore com 15m. Inflorescencia verde.&quot; ## [90] &quot;Árvore com 5 a 6 metros de altura; Ramos lenticelados, folhas coriáceas, frutos com cúpulas envolvendo parcialmente o fruto.; Borda da mata ; HA árvore, ca.5m; ramo lenticelado; folha coriácea; fruto envolvido parcialmente pela cúpula.&quot; ## [91] &quot;Árvore com 5 metros de altura; flor branca muito perfumada.&quot; ## [92] &quot;Árvore com 8 a 10 m de alt. Ramos cilíndricos tomentosos, folhas coriáceas. Flores de coloraçao creme.&quot; ## [93] &quot;Árvore com 8,0 metros de altura; inflorescencia esverdeada.&quot; ## [94] &quot;ÁRVORE COM 8M DE ALTURA, DIÂMETRO DA COPA 6M; FANERÓFITA. FOLHA ESPATIFORME; FLOR PEQUENA, EM CACHO, COR CREME. ODOR AGRADÁVEL.&quot; ## [95] &quot;Árvore com até 14 m; ramos aromáticos; inflorescencia alvacenta.&quot; ## [96] &quot;Árvore com ca. 6,5m alt.; Inflorescencia em panículas cremes tomentosas; presença de domácias no pecíolo da folha. árvore com ca. 6,5m alt.; inflorescência em panículas cremes tomentosas; presença de domácias no pecíolo da folha. árvore de aprox. 6,5 m alt. inflorescencia em panículas cremes tomentosas. presença de domácias no peciolo da folha.&quot; ## [97] &quot;Árvore com ca. 7m de altur; eixo floral verde-creme; cálice, corola e androceu creme-amarelados. Anteras quando maduras marrons; estigma preto; flores e folhas aromáticas.&quot; ## [98] &quot;Árvore com ca. de 4,0m. Frutos esverdeados quando imaturos.&quot; ## [99] &quot;Árvore com ca. de 5 a 6 metros de altura; caule escuro; folhas coriáceas discolor; inflorescencia com flores de tépalas eretas, de coloraçao creme. árvore com ca. de 5 a 6 metros de altura; caule escuro; folhas coriáceas discolor; inflorescência com flores de tépalas eretas, de coloração creme.&quot; ## [100] &quot;Árvore com cerca de 4 a 5 m de alt. Caule acinzentado, com muitas lenticelas. Folhas coriáceas. Frutos imaturos parcialmente incluso na cúpula. árvore com cerca de 4 a 5 metros de altura; caule acinzentado, com muitas lenticelas; folhas coriáceas; frutos imaturos parcialmente incluso na cúpula&quot; ## [101] &quot;Árvore com flores amarelas, botoes amarelo-esverdeados. árvore com flores amarelas; botoes amarelo-esverdeado.&quot; ## [102] &quot;Árvore com folhas e botoes florais. árvore com folhas e botões florais.;Árvore com folhas e botões florais.&quot; ## [103] &quot;Árvore com frutos maduros.; DESC: Árvore com frutos maduros.&quot; ## [104] &quot;Árvore com fuste tortuoso, com aproximadamente 5m alt., por 10cm de diâmetro. Flores diminutas, sem perfume, cálice amarelo-pardo, corola amarela. Madeireira.&quot; ## [105] &quot;árvore com mais ou menos 15m de alt.&quot; ## [106] &quot;ÁRVORE DE 10 M DE ALT., E 40 CM DE DIÂM, RESQUICIO DA MATA PRIMITIVA&quot; ## [107] &quot;Árvore de 12 - 15 m, frutos ainda jovens.&quot; ## [108] &quot;ARVORE DE 3-4 MTR., FL. ALVA.&quot; ## [109] &quot;Árvore de 31,0 cm de circunferencia. árvore de 31,0 cm de circunferência.;Árvore de 31,0 cm de circunferência.&quot; ## [110] &quot;Árvore de 37,0 cm de circunferencia. árvore de 37,0 cm de circunferência.;Árvore de 37,0 cm de circunferencia.&quot; ## [111] &quot;ÁRVORE DE 8M DE ALTURA.&quot; ## [112] &quot;Árvore de apróx. 8 m de alt. Copa plana.&quot; ## [113] &quot;Árvore de aproximadamente 6 metros de altura. Copa ampla. ; DE&quot; ## [114] &quot;Árvore de aproximadamente 6,5m folhas simples, subcrassas. Exudado incolor pegajoso e cheiro amargoso. Material estéril. Parcela 31, indivíduo 1533. localizado em solo areno argiloso-pedregoso. habitat:terrestre no interior da mata. exudado incolor pegajoso e cheiro amargoso. parcela 31. ind. 1533.; árvore de + ou - 6,5 m. folhas simples, subcrassas. material estéril.; floresta estacional (mata d; ha&quot; ## [115] &quot;árvore de até 5m de alt., flor alva&quot; ## [116] &quot;Árvore de até 60 m. fl. alvacenta.&quot; ## [117] &quot;ÁRVORE DE CA. 8 M DE ALT., FOLHA SIMPLES, INTEIRA, SOLTANDO-SE COM FACILIDADE&quot; ## [118] &quot;Árvore de frequencia relativa baixa com flores alvas e frutos ausentes.&quot; ## [119] &quot;Árvore de grande porte, flores alvo-esbranquiçadas, sem perfume, pequenas.&quot; ## [120] &quot;Árvore de grande porte, flores pequenas e amarelo com pouco perfume. árvore de grande porte; flores pequenas, de cor amarela com pouco perfume.&quot; ## [121] &quot;Árvore de grande porte, sem látex ou resina. Flor alva ou marrom, sem perfume. árvore de grande porte. sem látex ou resina. flor alva ou marrom, sem perfume. árvore de grande porte. sem latex ou resina. flor alva ou marron, sem perfume.&quot; ## [122] &quot;Árvore de grande porte. Flores amarelas pouco perfumadas, pequenas. árvore de grande porte. flores amarelas, pouco perfumadas, pequenas. folhas simples com nervura salientes na face ventral.&quot; ## [123] &quot;Árvore de grande porte. Flores mais ou menos roxas.&quot; ## [124] &quot;Árvore de grande porte. Flores pequenas de cor alva-esverdeada.&quot; ## [125] &quot;Árvore de mais ou menos 8 metros de altura.&quot; ## [126] &quot;Árvore de pequeno porte. Inflorescencia terminal com pequenas flores esverdeadas.; Solo arenoso encharcado.&quot; ## [127] &quot;Árvore de porte regular.&quot; ## [128] &quot;Árvore em moita.&quot; ## [129] &quot;Árvore flor amarela&quot; ## [130] &quot;Árvore frondosa, isolada no pasto. Flores creme.&quot; ## [131] &quot;Árvore grande . Ref no O Genero Ocotea Aulb, no Nordeste do Brasil, Lauraceas). de Ida de Vattimo, Rodriguesia, ns.35 e 36, 1960, R. Jans .&quot; ## [132] &quot;Árvore mais ou menos 10m alt. Flores amarelas pouco perfumadas.&quot; ## [133] &quot;Árvore mais ou menos 3m de 5cm de diâmetro na base. Flores amareladas. Os ramos tem sulcos longitudinais, mas o tronco nao.&quot; ## [134] &quot;Árvore media, fl. esbranquiçada.&quot; ## [135] &quot;Árvore mediana.&quot; ## [136] &quot;Árvore Ns 126.; Floresta de terra-firme. ; HA&quot; ## [137] &quot;ÁRVORE PEQ. FL ALVACENTA&quot; ## [138] &quot;Árvore pequena, fl verde - pardacenta.&quot; ## [139] &quot;Árvore pequena. (Arb.) Flôres amarelo pardo.&quot; ## [140] &quot;Árvore pequena. Flor amarelo pardo. árvore pequena. flor amarelo-pardo.&quot; ## [141] &quot;Árvore regular; flores creme; folhas com cheiro de canela sassafraz. Na mata.&quot; ## [142] &quot;àrvore rrvore;àrvore&quot; ## [143] &quot;Árvore tombada, folhas lisas, frutos verdes com cúpula marrom levemente avermelhada&quot; ## [144] &quot;Árvore, 7-10m, Comum na encosta e níveis superiores. Inflorescencia abundante, terminal; pequenas flores branco-amareladas.&quot; ## [145] &quot;Árvore, abundante, flor branca árvore, flor branca, abundante.&quot; ## [146] &quot;Árvore, construçao e carpintaria.&quot; ## [147] &quot;Árvore, construçao e carpintaria. folha larga.;Árvore, construçao e carpintaria&quot; ## [148] &quot;Árvore, flor esbranquiçada.&quot; ## [149] &quot;Árvore, folhas semicrassas, levemente discolor com face adaxial verde brilhante, frutos imaturos verdes, cálice persistente alaranjado.&quot; ## [150] &quot;Árvore; 10 m; tronco com lenticelas redondas e odor forte.; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [151] &quot;Árvore; 11 m .; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [152] &quot;Árvore; 4,0 m; botoes florais; flores creme; folhas face adaxial verde-escuro e face abaxial verde-esbranquiçado.; Borda da capoeira. ; HA árvore; 4,0 m; botoes florais; flores creme; folhas face adaxial verde-escuro e face abaxial verde-esbranquiçado.; borda da capoeira.; habitat: borda da capoeira.; desc: árvore; 4,0 m; botoes florais; flores creme; folhas face adaxial v&quot; ## [153] &quot;Árvore; 4,0 m; flores e botoes cremes. ; DE&quot; ## [154] &quot;Árvore; 8 m; pecíolo com cera branca.; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [155] &quot;Árvore; 8 m.; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [156] &quot;Árvore; flores brancas. Capoeiras e matas..Habitat: Terrestre&quot; ## [157] &quot;Árvore: 5,0m. Folhas coriáceas, discolores, face abaxial pubescente. Frutos imaturos verdes.; Floresta Estacional Semidecidual. ; HA&quot; ## [158] &quot;Árvore.&quot; ## [159] &quot;Árvore.&quot; ## [160] &quot;Árvore.&quot; ## [161] &quot;Árvore.&quot; ## [162] &quot;Árvore.&quot; ## [163] &quot;Árvore.&quot; ## [164] &quot;árvore. 10. m. folas alternas, flor amarela.; interior da mata ; HA&quot; ## [165] &quot;árvore. 12. m. folhas alternas.; Mata ; HA&quot; ## [166] &quot;árvore. 8. m. presença de frutos verdes e maduros, associaçao com formingas e ninfas de homoptera.; Mata (borda) ; HA&quot; ## [167] &quot;árvore. 9. m. presença de botoes florais e flores, floraçao intensa.; Mata (borda) ; HA&quot; ## [168] &quot;Árvore. Amostra 283 - Parcela 6 - Sao Joao. árvore. amostra 619 - parcela 4 - quizanga.&quot; ## [169] &quot;Árvore. Botoes e flores acastanhados. Solo argiloso.&quot; ## [170] &quot;Árvore. Botoes florais verdes-claro. árvore. botões florais verdes-claro.;Árvore. Botoes florais verdes-claro.&quot; ## [171] &quot;Árvore. Flor creme; .; HABITAT: .; DESC: Árvore. Flor creme;Árvore. Flor creme.&quot; ## [172] &quot;Árvore. Flores com sépalas persistente verde-claras. Fruto imaturo verde escuro.&quot; ## [173] &quot;Árvore. Folhas coriáceas, discolores, face abaxial pubescente.; Floresta Estacional Semidecidual. ; HA&quot; ## [174] &quot;Árvore. Folhas simples, alternas, face abaxial discolor, simples, crassa.&amp;nf;; Floresta Ombrófila Densa.&quot; ## [175] &quot;Árvore. Frequencia alta. Flores cremes.&quot; ## [176] &quot;Árvore. Mata de terra firme. árvore.; mata de terra firme.&quot; ## [177] &quot;Árvore.; Mata úmida&quot; ## [178] &quot;Árvore.; Mata úmida&quot; ## [179] &quot;Árvore.; Mata úmida árvore.; mata úmida.&quot; ## [180] &quot;Árvore.; Orla da mata&quot; ## [181] &quot;Árvore.Habitat: Terrestre&quot; ## [182] &quot;Árvore&amp;nf;Nome vulgar: Louro&quot; ## [183] &quot;Arvoreta , 4m alt., flores amareladas. Coleta de folhas para análises&quot; ## [184] &quot;Arvoreta 3-4m alt., frutos imaturos verdes.; Floresta Atlântica; HABITAT: Floresta Atlântica; DESC: Arvoreta 3-4m alt., frutos imaturos verdes.&quot; ## [185] &quot;Arvoreta 4m, flor creme. Encosta rochosa do morro&quot; ## [186] &quot;Arvoreta 5m alt., cálice vermelho; Floresta Atlântica; HABITAT: Floresta Atlântica; DESC: Arvoreta 5m alt., cálice vermelho&quot; ## [187] &quot;Arvoreta ca. 3,0 m, botoes florais esverdeados.; Cerrado (típico). Substrato areno-pedregoso. coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;&quot; ## [188] &quot;Arvoreta ca. 4,0 m, flores amareladas.; Mata ciliar. Afloramento rochoso.&quot; ## [189] &quot;Arvoreta ca. 4,5 m, botoes florais esverdeados.; Mata ciliar.&amp;nf;Substrato areno-pedregoso.&quot; ## [190] &quot;Arvoreta ca. 4.0 m, frutos imaturos.; Cerrado Sujo. Substrato arenoso. coleta: cerrado sujo.&amp;nf;arvoreta 4m altura; frutos imaturos.; geografia: sítio da mao dos seis dedos.;;Arvoreta ca. 4.0 m, frutos imaturos.; Cerrado Sujo. Substrato arenoso.&quot; ## [191] &quot;Arvoreta ca. 4m alt., flores cremes&quot; ## [192] &quot;Arvoreta ca. 7m alt. Frutos verdes.&quot; ## [193] &quot;Arvoreta com +/- 3,5 de alt. Ramos acinzentado.Folhas cartáceas. Inflorescencia ferrugínea.Pré-frutos esverdeados .Planta aromática .Frequente.&quot; ## [194] &quot;Arvoreta com 2 m; (inflorescencia) frutescencia de cor creme amarelada retirada com uma película marrom; 3 amostras; coletada próximo a barragem da ZOO III. ; DE&quot; ## [195] &quot;Arvoreta em touceira densa; flores cremes. Frequente na capoeira de solo arenoso, perto da campina.&quot; ## [196] &quot;Arvoreta lenhosa com3,5m. Indivíduo n°2467. Folhas verdes discolores, material vegetativo.&quot; ## [197] &quot;Arvoreta pouco ramificada 3m. Flores alvas.&quot; ## [198] &quot;Arvoreta, ca. 4m, flor creme, inflorescencia e botoes florais cremes, aromáticas.&quot; ## [199] &quot;Arvoreta, ca. 5m. Folhas verde discolores, brilhosas. Inflorescencias verde, flores amareladas arvoreta, ca. 5m. folhas verde discolores, brilhosas. inflorescências verde, flores amareladas;Arvoreta, ca. 5m. Folhas verde discolores, brilhosas. Inflorescências verde, flores amareladas&quot; ## [200] &quot;Arvoreta, flor branca aromática&quot; ## [201] &quot;Arvoreta; 3,0 m; frutos imaturos; base do revestimento em forma de cálice de cor marrom-escuro; na proximidade do ápice do ramo presença de fungos (cochonilhas). ; DE&quot; ## [202] &quot;Arvoreta; 3,0 m; pequenos frutos imaturos verde-cremes. PIBIC Jr. 2009/2010.; Vertente. ; HA&quot; ## [203] &quot;Arvoreta; 5 m; frutos com cálice amarronzados e frutos imaturos verdes; tronco cilíndrico. ; DE&quot; ## [204] &quot;Arvoreta; 7,0 m; frutos imaturos verdes com cúpula verde amarronzada. ; DE&quot; ## [205] &quot;Arvoreta; flor branca.&quot; ## [206] &quot;Arvoreta; frutos imaturos verdes e maduros roxos; material conservado com álcool.; Sub-bosque. ; HA&quot; ## [207] &quot;Arvoreta; Tabuleiro litorâneo&quot; ## [208] &quot;Arvoreta.&quot; ## [209] &quot;Arvoreta.&quot; ## [210] &quot;arvoreta. 2.5. m. botoes verdes, cálice castanho-claro, flores com pétalas brancas.; Mata (borda) ; HA&quot; ## [211] &quot;arvoreta. 2.5. m. flores com pétalas creme.; borda da mata ; HA&quot; ## [212] &quot;arvoreta. 6. m. botoes florais e flores com pétalas creme.; Mata (borda) ; HA&quot; ## [213] &quot;ARVOREZINHA COM RAMOS ESCANDENTED . FRUTOS COM RECEPTÁBULOS AVERMELHADOS , IMATUROS VERDES&quot; ## [214] &quot;Árvrore 14 m. Frutos verdes. Interior da mata.&quot; ## [215] &quot;Beira de estrada, antropizada. Contato Savana Floresta/ Floresta Estacional/ Floresta Ombrófila. Arbóreo. Altura de 8,0m e com fruto imaturo verde.&quot; ## [216] &quot;Bl. creme. Schwarzwasser.&quot; ## [217] &quot;Botoes florais creme. Área de influencia direta da UHE Jirau.&quot; ## [218] &quot;Botoes florais verdes.&quot; ## [219] &quot;Broto de árvore; flores cremes; frutos pretos. Mata de terra firme, argilosa.&quot; ## [220] &quot;Caatinga arbórea.&quot; ## [221] &quot;Cálice verde.&quot; ## [222] &quot;Cerrado&quot; ## [223] &quot;Cerrado / floresta ombrófila.&quot; ## [224] &quot;Cerrado sensu stricu. Solo arenoso.&quot; ## [225] &quot;Cheiro forte na casca e folhas. Verdes discolores. Botoes amarelos. Ausentes&quot; ## [226] &quot;Coleta de material estérial do projeto de doutorado do professor Aldenir.; Arvoreta; 6 m; CAP 16 cm; folhas jovens com face abaxial pratiada; nervuras de cor amarelada e ramos sulcados.; Platô. ; HA&quot; ## [227] &quot;COLETA: Cerradao&amp;nf;Liana semi-ciófila; cálice avinosado; frutos imaturos verdes; GEOGRAFIA: Área da Sede Santa Luzia; solo argilo-arenoso.&amp;nf;Relevo plano.; folhas cor verde, cartáceas, presença de galhas escuras na superficie abaxial da folha. cálice avinosado. frutos imaturos cor verde. ocasional; cerradao; habitat: cerradao; desc: folhas cor verde, cartáceas, presença de galhas escuras liana semi-ciófita; folhas cor verde, cartáceas: presença de galhas escuras na superfície abaxial da folha; cálice avinosado; frutos imaturos cor verde. ocasional.&quot; ## [228] &quot;COLETA: Cerrado arenoso &amp;nf;Arbusto 80cm, flores bege.; GEOGRAFIA: A 13km do povoado Chapada Gaúcha; relevo plano. Margem de estrada de terra.;&quot; ## [229] &quot;COLETA: Cerrado com solo arenoso.&amp;nf;Semi arbusto formando moitas; flores cor amarelo claro.;&quot; ## [230] &quot;COLETA: Cerrado&amp;nf;Solo com textura arenosa/argilosa; relevo plano.&amp;nf;Subarbusto heliófilo 40cm altura; flores de cálice verde e corola alvacenta.; habitat:cerrado. solo arenoso/argiloso, relevo plano.; desc:subarbusto heliófilo aprox. 40cm de altura; caule com casca lisa; folhas crassas, discolores verdes; flor com cálice verde e corola alvacenta, anteras creme.;;HABITAT:Cerrado. Solo arenoso/argiloso, relevo plano.; DESC:Subarbusto heliófilo aprox. 40cm de altura; caule com casca lisa; folhas crassas, discolores verdes; flor com cálice verde e corola alvacenta, anteras creme.;&quot; ## [231] &quot;COLETA: Flores brancas com glândulas vermelhas.&amp;nf;Árvores 11m.; GEOGRAFIA: (R.23, Praça 1), aol lado da Av. Jacarandas, próximo r Rua das Nogueiras.;&quot; ## [232] &quot;COLETA: Mata Atlântica.&amp;nf;Árvore 8m;&quot; ## [233] &quot;COLETA: Mata Atlântica.&amp;nf;Árvore, parte inferior do fruto vermelha.; GEOGRAFIA: Arvore 4012.;&quot; ## [234] &quot;COLETA: XLS: SPSFAntigo;&quot; ## [235] &quot;COLETA: XLS: SPSFAntigo; GEOGRAFIA: cerrado&amp;nf;;&quot; ## [236] &quot;COLETA: XLS: SPSFAntigo&amp;nf;Árvore; GEOGRAFIA: trilha do vinhatico;&quot; ## [237] &quot;COLETA: XLS: SPSFAntigo&amp;nf;Árvore. Exemplar ns 19374; GEOGRAFIA: Mata;&quot; ## [238] &quot;COLETA: XLS: SPSFAntigo&amp;nf;Floresta secundária&amp;nf;Árvore flores creme;&quot; ## [239] &quot;Cúpulas imaturas verde-marrons, ramos da inflorescencia verdes. Cheiro típico de Lauraceae na entrecasca dos ramos.; Árvore 4m. Fruto imaturo verde.; .; HABITAT: .; DESC: Árvore 4m. Fruto imaturo verde.&quot; ## [240] &quot;DESC:Arvoreta 2,2m; flor creme-esverdeada; cupulos persistentes negros; botoes florais creme-esverdeados.;&quot; ## [241] &quot;DESC:Subarbusto 40cm; fruto imaturo verde. Rara no local.;&quot; ## [242] &quot;Erva ereta. Folhas papiráceas. Flores com corola branca.&quot; ## [243] &quot;Espécie ameaçada de extinçao (Em perigo). material sem dados da planta. solo pobre, arenoso. formaçao campina. material sem dados da planta. solo pobre, arenoso. formação campina.&quot; ## [244] &quot;Flores alvas. Floresta preservada, dossel médio 20m.&quot; ## [245] &quot;Flores alvas. Mata de terra firme.&quot; ## [246] &quot;Flores amarelas com perfume agradável.&quot; ## [247] &quot;Flores amarelas, pedicelo verde&quot; ## [248] &quot;Flores pequenas, amarelo-claro, com perfume. flores pequenas, de cor amarelo-claro com perfume.&quot; ## [249] &quot;Floresta Atlântica. Arbóreo. Coletada no Porto Capim.; DESC: Floresta Atlântica. Arbóreo. Coletada no Porto Capim.&quot; ## [250] &quot;Floresta estacional&quot; ## [251] &quot;Floresta estacional decidual.&quot; ## [252] &quot;Floresta estacional semidecidual submontana.&quot; ## [253] &quot;Floresta Estacional Semidecidual Submontana. ; HA&quot; ## [254] &quot;Floresta Estacional Semidecidual Submontana. ; HA&quot; ## [255] &quot;Floresta estacional troca de material.; árvore ca 8,0 m. folhas cartáceas, discolores com a face abaxial verde claro, nervuras ferrugíneas. botoes amarelos.; floresta estacional. ; ha;Troca de material.; Árvore ca 8,0 m. Folhas cartáceas, discolores com a face abaxial verde claro, nervuras ferrugíneas. Botoes amarelos.; Floresta Estacional. ; HA&quot; ## [256] &quot;Floresta Ombrófila Densa&quot; ## [257] &quot;Floresta Ombrófila Densa&quot; ## [258] &quot;Floresta Ombrófila Densa&quot; ## [259] &quot;Floresta Ombrófila Densa&quot; ## [260] &quot;Floresta Ombrófila Densa&quot; ## [261] &quot;Floresta ombrófila densa em regeneraçao.&quot; ## [262] &quot;Floresta Ombrófila Montana&quot; ## [263] &quot;Floresta Ombrófila Montana&quot; ## [264] &quot;Floresta ombrófila.&quot; ## [265] &quot;Floresta ombrófila.&quot; ## [266] &quot;Floresta ombrófila.&quot; ## [267] &quot;Floresta ombrófila.&quot; ## [268] &quot;Floresta ombrófila.&quot; ## [269] &quot;Floresta ombrófila.&quot; ## [270] &quot;Floresta ombrófila.&quot; ## [271] &quot;Flws. yellow. Male.&quot; ## [272] &quot;Folhas alternas, glabras.&quot; ## [273] &quot;Folhas coriáceas, discolores,inflorescencia axilar, ferruginosa, raque esverdeadao, botoes creme, Doaçao do Projeto Flora da Bahia. Herbário Alexandre Leal Costa - ALCB (48550). Projeto Financiado pelo CNPq. mata.&quot; ## [274] &quot;Folhas simples, alternas, alongadas, oblongas, cheiro agradável. P8 I36&quot; ## [275] &quot;fruto maduro&quot; ## [276] &quot;Frutos ainda jovens&quot; ## [277] &quot;frutos verdes&quot; ## [278] &quot;Grand arbor.&quot; ## [279] &quot;HABITAT:Cerrado.; DESC:Árvore, frutos verdes.;&quot; ## [280] &quot;Ident. ant.: o. organensis (Meis.) Mez&quot; ## [281] &quot;Inflorescencia com pedúnculo verde-limao, flores com pedicelos, cálice e corola branco-amarelados, androceu e gineceu amarelos, cheiro doce agradável inflorescencia com pedúnculo verde-limao. flores com pedicelos, cálice e corola branco-amarelados. androceu e gineceu amarelos, cheiro doce agradável. inflorescência com pedúnculo verde-limão. flores com pedicelos, cálice e corola branco-amarelados. androceu e gineceu amarelos, cheiro doce agradável.;Inflorescencia com pedúnculo verde-limao. Flores com pedicelos, cálice e corola branco-amarelados. Androceu e gineceu amarelos, cheiro doce agradável.&quot; ## [282] &quot;Linha de transmissao Jirau/Sts Antonio.&quot; ## [283] &quot;Linha de transmissao Jirau/Sts Antonio.&quot; ## [284] &quot;Mata Atlântica&quot; ## [285] &quot;Mata Atlântica&quot; ## [286] &quot;Mata Atlântica&quot; ## [287] &quot;Mata Atlântica (Floresta Estacional Semidecidual); HABITAT: Mata Atlântica (Floresta Estacional Semidecidual)&quot; ## [288] &quot;Mata Atlântica de encosta.&quot; ## [289] &quot;Mata Atlântica em vale de tabuleiro.&quot; ## [290] &quot;Mata Atlântico, beira da lagoa.&quot; ## [291] &quot;Mata Ciliar&quot; ## [292] &quot;Mata ciliar.&quot; ## [293] &quot;Mata de Chaves.Borda com canavial.; HABITAT: Mata de Chaves.Borda com canavial.&quot; ## [294] &quot;Mata de terra firme.&quot; ## [295] &quot;Mata em leito de córrego.&quot; ## [296] &quot;Mata ombrófila secundária. Solo arenoso.&quot; ## [297] &quot;Mata perenifólia sob latosolos&quot; ## [298] &quot;Material sem dados da planta e sem data de coleta.&quot; ## [299] &quot;Material sem dados da planta.&quot; ## [300] &quot;Material sem dados da planta.&quot; ## [301] &quot;Município de Humaitá, Pixuna, Km 40 da Rodovia Transamazônica. Campina, flores alvas.&quot; ## [302] &quot;Muy alto y ranudo; hoja verde clara; flor amarilla; fruto ovalado, verde claro.&quot; ## [303] &quot;Numa capoeira 6m alt., e 20 cm de diam.&quot; ## [304] &quot;old secondary forest with few primary remnants&quot; ## [305] &quot;open uplands, \\\\muena\\\\, 3 m, cupule green, fr. green.&quot; ## [306] &quot;pequena árvore de formaçao rupestre em frutos. pequena árvore de formação rupestre em frutos. pequena árvore de formação rupestre em frutos. pequena árvore de formaçao rupestre em frutos.; sem dados.;Pequena árvore de formaçao rupestre em frutos.; Sem dados.&quot; ## [307] &quot;Pétalas creme, anteras amarelada. Área de influencia direta (canteiro).&quot; ## [308] &quot;Planta com 6,0 metros de altura. Fruto e cáile verdes.&quot; ## [309] &quot;Planta com fruto.&quot; ## [310] &quot;Planta com grossa casca fissurada de coloraçao cinza. A espécie possuiindivíduos de grande porte (para o padrao da regiao), altos e grossos no DAP. Doaçao do Herbário do IBGE - Reserva Ecológica do IBGE. Plantas da Bahia.&quot; ## [311] &quot;Pole ca. 1.3 m. Receptacle and fruits green. Mata de terra firme.&quot; ## [312] &quot;Pole ca. 1.5-2 m; fruits and receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits. pole ca. 1.5-2 m; fruits and receptacle green. disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.; disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.;Pole ca. 1.5-2 m; fruits and receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits.&quot; ## [313] &quot;Possui acúleos.&quot; ## [314] &quot;Restinga. Floresta.&quot; ## [315] &quot;Sem dados. sem dados.; sem dados.&quot; ## [316] &quot;Shrub 3 1/2 tall. Brushy clearing and secondary rain forest, sandy soil.&quot; ## [317] &quot;Shrub 3 m. Immature fruit (includng cupule) green.&quot; ## [318] &quot;Shrub. Brushy clearings and secondary rain forest, sandy soil.&quot; ## [319] &quot;Shrubs and tree of indeterminable size pendent or leaning out over cliff; fruit green; flowers greenish-white. Common pole along the river. N to NE bank-shale cliffs to terra firme.&quot; ## [320] &quot;Small tree 5 m; flowers cream.&quot; ## [321] &quot;Small tree 5-6 m; flowers yellowish; receptacle red. Riverbank and cliff vegetation.&quot; ## [322] &quot;Small tree, 5 m high. Leaves glossy green above, greyish sheen beneath. Terminal inflorescence; flowers yellow. perianth trimerous, stamens numerous.&quot; ## [323] &quot;Small tree; 4 cm. dbh.&quot; ## [324] &quot;Término coleta 02.04.1979&quot; ## [325] &quot;Terrestre, arbórea, fruto maduro e cor roxa, fruto imaturo de cor verde, exsudaçao incolor, descamaçao ausente, fuste cilíndrico, superfície das casca áspera, altura total 10m.altura do fuste 6m, cap fuste 68cm, diâmetro copa 5m, exsudaçao seiva. terrestre, arbórea, fruto maduro e cor roxa, fruto imaturo de cor verde, exsudação incolor, descamação ausente, fuste cilíndrico, superfície das casca áspera, altura total 10m.altura do fuste 6m, cap fuste 68cm, diâmetro copa 5m, exsudação seiva.;Terrestre, arbórea, fruto maduro e cor roxa, fruto imaturo de cor verde, exsudação incolor, descamação ausente, fuste cilíndrico, superfície das casca áspera, altura total 10m.altura do fuste 6m, cap fuste 68cm, diâmetro copa 5m, exsudação seiva.&quot; ## [326] &quot;Trabalho de Conclusao de Curso&quot; ## [327] &quot;Tree # 2685, 14-15m; fruit lighter green in darker green cup.&quot; ## [328] &quot;Tree +- tall, leaves coriaceous, glossy and dark green above, lustrous pale brown beneath, flower pale green&quot; ## [329] &quot;Tree 18. bole 12m, straight, cylindrical. Fruits, flower small&quot; ## [330] &quot;TREE 30 M X 80 CM DIAM. CUPULE DARK GREEN, FRUIT PALE GREEN.&quot; ## [331] &quot;TREE 6 M X 10 CM DIAM, BUDS GREEN.&quot; ## [332] &quot;TREE CA 5 M. FRUITS LIGHT GREEN, RECEPTACLE DARKER GREEN. FLOWERS CREAM WHITE.&quot; ## [333] &quot;Tree ca. 2.5-3 m; flowers cream-white. Disturbed roadside margins in tall forest, terra firme; laterized clay with sand deposite. tree ca. 2.5-3 m; flowers cream-white. disturbed roadside margins in tall forest, terra firme; laterized clay with sand deposite.; disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.&quot; ## [334] &quot;Tree ca. 3 m; fruits green, becoming red-tinged; receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits. tree ca. 3 m; fruits green, becoming red-tinged; receptacle green. disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.; disturbed roadside margins in tall forest, terra firme. laterized clay wit tree ca. 3 m. fruits green, becoming red-tinged; recepctacle green.;Tree ca. 3 m; fruits green, becoming red-tinged; receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits.&quot; ## [335] &quot;Tree shrub juvenile... revisar;Tree shrub juvenile&quot; ## [336] &quot;tree shurb juvenile&quot; ## [337] &quot;Tree to 25m.tall, 70cm. DBH;wood medium soft. Bark smooth;lvs. glaucous beneath, not aromatic. Laurelillo. Fruit green. Individuals and timber volume per sq.Km. for trees over 30cm.DBH;8and 16 cu meters.&quot; ## [338] &quot;Tree, 60cm dbh. Leaves collected from forest floor. Transect tree 2:7/4a. Vegetative ecological voucher. In terra firme forest.&quot; ## [339] &quot;Treelet, 15 m; buds pale green. Primary forest.&quot; ## [340] &quot;Treelet, 4 m DBH; 3 cm, bark gray, brts grayed green with slight bloom; lvs yellow-green, shining above, paler, more or less glaucous beneath; fls orange-yellow. Same as no. 328.&quot; ## [341] &quot;Tronco com a base reta. Casca externa cinza. Ramos jovens com quinas.&quot; ## [342] &quot;UHE Teles Pires&quot; ## [343] &quot;UHE Teles Pires&quot; ## [344] &quot;UHE Teles Pires&quot; ## [345] &quot;VINY SHRUB, CA 4.5M TALL. WOOD IN ALCOHOL&quot; # histograma hist(alts) # adiciona ao conjunto de dados dados$ALTURAm &lt;- alts 10.4.2 Obtendo valores de DAP # aplica a funcao daps &lt;- sapply(txt.org, pegadap) head(daps) ## ; HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes. árvore de 12m; frutos imaturos verdes;HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes. ## NA ## ; Hábito: Árvore; Cor da flor: ; Cor do fruto: verdes árvore de 8 m de altura, frutos verdes. árvore de 8m altura, frutos verdes.;Árvore de 8 m de altura, frutos verdes. ## NA ## ; Hábito: Árvore; Cor da flor: brancas (botoes brancos); Cor do fruto: árvore de 10 m de altura, botoes e flores brancos. árvore de 10 m de altura, botões e flores brancos. árvore de 10m de altura, botoes e flores brancos.;Árvore de 10 m de altura, botões e flores brancos. ## NA ## ?muena?, 15m, fls. Yellow ## NA ## [BARCODE = *MIRR 00705*]Tall terra firme forest with trees to 35m; Transecto de tatu, c. 4km from station.&amp;nf;&amp;nf;Tree, 20cm dbh.&amp;nf;Vegetative ecological voucher. ## NA ## 10m x 15cm DAP. Frutos imaturos verdes. 10m x 15cm dap. frutos imaturos verdes. ; de árvore de 10m x 15 cm dap, frutos imaturos verdes ## 15 names(daps) &lt;- NULL # quais valores viraram NA (ou seja, não encontrou um valor de dap) txt.org[is.na(daps)] ## [1] &quot;; HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes. árvore de 12m; frutos imaturos verdes;HABITAT: Floresta Ombrófila Densa Submontana.; DESC: Árvore de 12m; frutos imaturos verdes.&quot; ## [2] &quot;; Hábito: Árvore; Cor da flor: ; Cor do fruto: verdes árvore de 8 m de altura, frutos verdes. árvore de 8m altura, frutos verdes.;Árvore de 8 m de altura, frutos verdes.&quot; ## [3] &quot;; Hábito: Árvore; Cor da flor: brancas (botoes brancos); Cor do fruto: árvore de 10 m de altura, botoes e flores brancos. árvore de 10 m de altura, botões e flores brancos. árvore de 10m de altura, botoes e flores brancos.;Árvore de 10 m de altura, botões e flores brancos.&quot; ## [4] &quot;?muena?, 15m, fls. Yellow&quot; ## [5] &quot;[BARCODE = *MIRR 00705*]Tall terra firme forest with trees to 35m; Transecto de tatu, c. 4km from station.&amp;nf;&amp;nf;Tree, 20cm dbh.&amp;nf;Vegetative ecological voucher.&quot; ## [6] &quot;1st specimen: Tree, flowers cream. 2nd specimen: Shrub 20 ft. tall; flowers cream-colored.&quot; ## [7] &quot;2 sheets [see barcode 539642]&lt;a href=http://sweetgum.nybg.org/vh/specimen.php-irn=499259&gt;more info&lt;/a&gt; árvore de 10m x 20cm, inflorescencia branca; mata alta; habitat: mata alta; desc: árvore de 10m x 20cm, inflorescencia branca sheet 2 [see barcode 539641]&lt;a href=http://sweetgum.nybg.org/vh/specimen.php-irn=499261&gt;more info&lt;/a&gt;&quot; ## [8] &quot;3m tree. Flowers tan color&quot; ## [9] &quot;5m de altura. Frutos ainda verdes. árvore de 5m em capoeira, frutos ainda verdes;Árvore de 5m em capoeira, frutos ainda verdes&quot; ## [10] &quot;6 in. diam, 30 ft high. Phenology of specimen: Fruit.&quot; ## [11] &quot;8 m de altura. Casca externa acinzentada; alburno creme-amarelado. Frutos imaturos esbranquiçados, cúpula marrom-escura. árvore 8m de alt., frutos imaturos esbranquiçados, cúpula marrom-escura&quot; ## [12] &quot;8 m tree; flowers yellowish.&quot; ## [13] &quot;8m alt. Solo arenoso, subdossel. DAP=8cm. Caule cilíndrico, base reta. Ritidoma marrom, rígido, liso, desprendimento pulverulento. Lenticelas salientes, 1,5mm comp. Casca viva creme, 1mm espess. Alburno creme-esbranquiçado. Flores 8m alt. solo arenoso, subdossel. dap=8cm. caule cilíndrico, base reta. ritidoma marrom, rígido, liso, desprendimento pulverulento. lenticelas salientes, 1,5mm comp. casca viva creme, 1mm espess. alburno creme-esbranquiçado. flores creme-claro. árvore, 8 m alt. dap= 8 cm. caule cilíndrico, base reta. ritidoma marrom, rígido, liso, desprendimento pulverulento. lenticelas salientes, 1,5 mm comp. casca viva creme, 1 mm espess. alburno creme-esbranquiçado.&amp;nf;flores creme claro.; f flores creme-claro&quot; ## [14] &quot;Altura 13m, PAP 63cm, caule interno branco, externo róseo.&quot; ## [15] &quot;Ambiente: Capoeira. Habito: Árvore, 10m X 15cm.&quot; ## [16] &quot;Ambiente: Floresta perenifolia. Habito: Árvore menor que 5m&quot; ## [17] &quot;Ambiente: Mata Atlântica Costeira (Mata de Tabuleiro). Habito: Árvore, 18m. tree, 18 m; fruit pale green; cupule dark olive tree, 18 m; fruit pale green; cupule dark olive.&quot; ## [18] &quot;Ambiente: Mata Atlântica. Habito: Árvore, 7-8m.&quot; ## [19] &quot;Ambiente: Mata Ciliar. Habito: Árvore, ca. 4m. coleta: mata ciliar, sub bosque.&amp;nf;árvore 4m; flores com tépalas cor creme.; geografia: próximo r cachoeira do acaba vida, br-242 a ca.19km.&amp;nf;ex huefs 18526.;&quot; ## [20] &quot;Ambiente: Mata de Cipó com . Habito: Árvore, 5m. tree to 5 m. leaves coriaceous dark green above, pale beneath. flowers pale grey-green.;Tree to 5 m. Leaves coriaceous dark green above, pale beneath. Flowers pale grey-green.&quot; ## [21] &quot;Ambiente: Mata Estacional Semidecidual com Mata ciliar. Habito: Árvore, ca 14m. floresta estacional semidecidual com mata ciliar.;Ambiente: Mata Estacional Semidecidual com Mata ciliar. Habito: Árvore, ca 14m.&quot; ## [22] &quot;Ambiente: Mata higrofila, úmida. Habito: Árvore maior que 5m e menor 20m&quot; ## [23] &quot;Ambiente: Mata junto a plantaçao de coco. Habito: Arvoreta, 3m. arvoreta. 3. metros. flores cremes.; solo silico-argiloso ; ha&quot; ## [24] &quot;Ambiente: Mata junto aplantaçao de coco. Solo sílico-argiloso. Habito: Árvore, 6m X 15cm. árvore. 6. metros. 6 m x 15cm, flores cremes, recobertas por pilosidade marrom.; solo silico-argiloso ; ha&quot; ## [25] &quot;Ambiente: Mata Ombrófila Densa Montana. Habito: Arvoreta, ca. 4m.&quot; ## [26] &quot;Ambiente: Mata Pluvial. Habito: Árvore, 8m.&quot; ## [27] &quot;Ambiente: Mata. Borda com canavial. Habito: Árvore, ca. 6m.&quot; ## [28] &quot;Ambiente: Mata. Borda da mata. Habito: Árvore, 10 a 12m.&quot; ## [29] &quot;Ambiente: Mata. Habito: Árvore, 6m.&quot; ## [30] &quot;Ambiente: Mata. Habito: Árvore, ca 15m. árvore ca. 15 m alt. folahs com indumento castanho. flores creme-amareladas.;Árvore ca. 15 m alt. Folahs com indumento castanho. Flores creme-amareladas.&quot; ## [31] &quot;Ambiente: Mata. Habito: Árvore, ca. 9m&quot; ## [32] &quot;Ambiente: Mata. Habito: Árvore, DAP 37,2cm.&quot; ## [33] &quot;Ambiente: Mata. Habito: Árvorezinha, 7m.&quot; ## [34] &quot;Ambiente: Mata. Interiro da mata. Habito: Árvore, 10m.&quot; ## [35] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, 5 a 6m.&quot; ## [36] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, c.a 9m.&quot; ## [37] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, ca. 4 a 5m.&quot; ## [38] &quot;Ambiente: Mata. Na borda da mata. Habito: Árvore, ca. 6,5m.&quot; ## [39] &quot;Ambiente: Mata. No interior da mata. Habito: Árvore, 8 a 10m.&quot; ## [40] &quot;Ambiente: Restinga. Habito: Árvore 8m X 0,30m. árvore com 8m alt., 30m de diâmetro. flor branca, estames amarelos e anteras marrons flor branca, estames amarelo e anteras marrons. altura 8 m de diam. 0,30 m.&quot; ## [41] &quot;AQrvore de 16m&quot; ## [42] &quot;Arbol 10 m de altura, flores blancas, frutos verdes.&quot; ## [43] &quot;Arbol 7 m, DAP=8 cm, simpódico, aceites etéreos en las hojas. Frutos verde-amarillentos.&quot; ## [44] &quot;Arbol 8 m, DAP: 11.1 cm, madera aromática, estéril.&quot; ## [45] &quot;ARbol de 10 m. Botones y raquis amarillos&quot; ## [46] &quot;Arbol de 10 m. Ovario verde. Estigma persistent café. Fruit café. Creciendo al lado del camino.&quot; ## [47] &quot;ARbol de 10-12 mts. de altura, frutos verdes. Ocasional.&quot; ## [48] &quot;Arbol de 12 m. Flores verdosas. Común.&quot; ## [49] &quot;Arbol de 14-16 m, DAP: 25.1 cm, frutos inmaduros verdes, morados al madurar.&quot; ## [50] &quot;Arbol de 15 m. Botones florales verdes.&quot; ## [51] &quot;árbol de 17m; corteza externa lisa-ploma oscura; flores en botones&quot; ## [52] &quot;arbol de 20 m de altura, fruto ovalados verdes; receptaculo cupular rojo. Olor aromático&quot; ## [53] &quot;Arbol de 20 m de altura, fruto verde, semilla rosada. Abundante.&quot; ## [54] &quot;Árbol de 4,5 m. Flores cremosas&quot; ## [55] &quot;Arbol de 5 m. Frutos verde pálidos, cáliz carnoso, verde oscuro.&quot; ## [56] &quot;Arbol de 6 m, ramitas muy angulosas.&quot; ## [57] &quot;Arbol de 8 m. Flor amarilla. Fruto con cupula verde oscuro y semilla verde-claro.&quot; ## [58] &quot;Arbol de 8 m. Frutos verdes con apics amarillo. Botones florales blancos.&quot; ## [59] &quot;Arbol de 8 m. Frutos verdes. Creciendo en bosque secundario.&quot; ## [60] &quot;Arbol de 8-10 mts. de altura, frutos verdes, receptáculo rojo. Ocasional.&quot; ## [61] &quot;Arbol de 8.0 m de alto. Ramificado basalmente. DAP de 12.0 cm. Tronco de corteza gris. Ramificaciones cuando jóvenes puberulentas y anguladas. Hojas discolor y brillantes en el haz. Cuando jóvenes pubescentes. Inrutescencias axilares, agrupadas hacia las partes apicales de las ramas. Frutos verdes, internamente los cotiledones morados. Cáliz verde. La planta tiene un fuerte olor a alcanfor.&quot; ## [62] &quot;Arbol de 9 m. Esteril.&quot; ## [63] &quot;Arbol de 9 metros, ramitas angulosas.&quot; ## [64] &quot;Arbol de 9-10 mts, frutos verdes, follage denso na extendido, zona al borde del camino.&quot; ## [65] &quot;Arbol de aproximadamente 10 m alto. Frutos verdes en el exterior, morados internamente y algo carnosos. El cáliz verde.&quot; ## [66] &quot;Árbol joven de 8m alt. Esteril&quot; ## [67] &quot;Arbol, 20 metres de altura. Frutos drupas verdes, dentro de capsula negra +/- leñosa.&quot; ## [68] &quot;Arbolito de 5 metros, glabro, con las ramitas angulosas. Muy escaso, se observó solo un individuo.&quot; ## [69] &quot;Arbórea com ca. 1,2 m de alt.; infl. com flores amarelo-esbranquiçado arbórea com ca. 1,2m de altura; inf. com flores amarelo-esbranquiçado.&quot; ## [70] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 1,5m, fuste 10m, cap fuste 49cm, diâmetro copa 10m. Botao branco, flor creme, fruto branca, seiva incolor, descamaçao ausente.&quot; ## [71] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 12m, fuste 6m, cap fuste 55,92cm, diâmetro copa 5m. Fruto maduro roxo, fruto imaturo verde, seiva incolor, descamaçao ausente.&quot; ## [72] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 13m, fuste 9m, cap fuste 56,55cm, diâmetro copa 4m. Botao verde claro, flor branca, seiva incolor, descamaçao em ripas. mata de tabuleiro.&quot; ## [73] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 10m, cap fuste 85cm, diâmetro copa 5m. Botao branco, flor branca, seiva incolor, descamaçao ausente. mata de tabuleiro.;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 10m, cap fuste 85cm, diâmetro copa 5m. Botao branco, flor branca, seiva incolor, descamaçao ausente.&quot; ## [74] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 6m, cap fuste 98,96cm, diâmetro copa 12m. Botao verde claro, flor amarela, seiva amarela, descamaçao em placas.&quot; ## [75] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 15m, fuste 8m, cap fuste 125,66cm, diâmetro copa 13m. Botao branco, flor creme, seiva incolor, descamaçao ausente.&quot; ## [76] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 16m, fuste 7m, cap fuste 131,95vm, diâmetro copa 8m. Botao creme, seiva incolor, descamaçao em placas.&quot; ## [77] &quot;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 4m, fuste 2m, cap fuste 31,42cm, diâmetro copa 5m. Botao branco, flor creme, seiva incolor, descamaçao em placas. mata de tabuleiro.;Arbóreo, terrestre, fuste cilíndrico, casca áspera, altura total 4m, fuste 2m, cap fuste 31,42cm, diâmetro copa 5m. Botao branco, flor creme, seiva incolor, descamaçao em placas.&quot; ## [78] &quot;Arbóreo. Altura de 5,0 m e com fruto imaturo verde.&quot; ## [79] &quot;Arbóreo. Inflorescencia patente, botoes verdes.; DESC: Arbóreo. Inflorescencia patente, botoes verdes.&quot; ## [80] &quot;arbre, 11 m, 9 cm DBH. fr. vert r points blancs, clair r lapex, plus foncé r la base, claice vert accres., entourant 2/3 du fr., f. discolores, velues dessous, poils dorés. récolte photographiée in situ.; Foret ombrophile submontagna&quot; ## [81] &quot;arbre, 8 m, 10 cm DBH; fleur trimcres, 3+3 tép. jaunes recouverts de duvet roux, 3+3+3 étamines spatuléesm arquées, r 4 clapets; récolte photographiée in situ; échantillon séché r lair chaud; Foret ombrophile submontagnarde de pente&quot; ## [82] &quot;Arbustivo, fruto verde e preto; Costeiro&quot; ## [83] &quot;Arbusto 3m. campo rupestre&quot; ## [84] &quot;Arbusto 8 m alto. Frutos verdes.&quot; ## [85] &quot;arbusto até 3m de altura. Flores e botões amarelos&quot; ## [86] &quot;Arbusto ca. 1 m alt.; caule amarronzado; frutos verdes.&quot; ## [87] &quot;Arbusto ca. 1-2m de altura; caules alados, folhas subcorláceas. arbusto.; floresta secundária&quot; ## [88] &quot;Arbusto ca. 1,50m alt.; caule amarronzado; frutos imaturos verdes.&quot; ## [89] &quot;Arbusto ca. 2 m alt.; inflorescencia em botoes amarronzados; frutos imaturos verdes&quot; ## [90] &quot;Arbusto ca. 2 m alt.; ramos marrom-escuro; folhas adaxialmente verde brilhante e abaxialmente verde claro; flores amareladas.&quot; ## [91] &quot;Arbusto ca. 2 m. Botoes ferrugíneos.HABITAT:Mata Atlântica.;&quot; ## [92] &quot;Arbusto ca. 3 m alt.; flores alvacentas.&quot; ## [93] &quot;Arbusto ca. 3,0m, frutos imaturos. Subst. arenosos.; Cerrado (Típico). coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;&quot; ## [94] &quot;Arbusto ca. 3.0 m. alt. Folhas verdes concolores. Flores em botoes amarelados&quot; ## [95] &quot;Arbusto ca. de 1m de altura. Botoes cremes.HABITAT:Caatinga com solo argilo-arenoso.; arbusto, ca. de 1,0m de altura, botoes creme, perianto, estames creme. arbusto, ca. de 1m de altura, botoes creme, perianto, estames creme.; caatinga.; habitat: caatinga.; desc: arbusto, ca. de 1m de altura, botoes creme, perianto, estames creme.&quot; ## [96] &quot;Arbusto cerca de 1,30 m.&quot; ## [97] &quot;Arbusto cerca de 2m de altura, ramos acinzentados. Botoes florais ferrugíneos. Planta aromática. Freqüente.&quot; ## [98] &quot;Arbusto com ca. de 3,5m. de altura; frutos imaturos verdes e os maduros venoso-arroxeados; cálice cupuliforme nigrescente. arbusto de 3,5m de altura. frutos imaturos verdes e o maduros venoso-arroxeados. cálice cupuliforme nigrescente.&quot; ## [99] &quot;Arbusto de 2 m de altura; inflorescencia creme. arbusto de 2 m de altura; inflorescência creme.&quot; ## [100] &quot;Arbusto de 2,5 m de altura; inflorescencia esbranquiçada. Capoeira de solo arenoso. arbusto de 2,5 m de altura; inflorescência esbranquiçada. capoeira de solo arenoso.&quot; ## [101] &quot;Arbusto de 2,50 m de altura; botoes florais amarelos. Mata secundária; solo arenoso. arbusto de 2,50 m de altura; botões florais amarelos. mata secundária; solo arenoso.&quot; ## [102] &quot;ARBUSTO DE 3 M DE ALT., INFLOR. AMARELADA. município de oriximiná, rio trombetas, margem direita ao norte da mineraçao santa patricia, campina do monte branco. campina aberta, solo arenoso. arbusto de 3m de altura, inflorescencia amarelada. ; de&quot; ## [103] &quot;Arbusto de 3 m de altura; flores amarelas. Terreno arenoso, capoeira.&quot; ## [104] &quot;Arbusto de 3 m de altura; flores cremes. Capoeira aberta, terreno arenoso.&quot; ## [105] &quot;Arbusto de 3 m de altura; frutos verdes, parte apical amarela. Terra firme.&quot; ## [106] &quot;Arbusto de 3 m der altura; flores creme. Mata virgem, solo arenoso.&quot; ## [107] &quot;Arbusto de 3m de altura. Frutos verdes e cálice marrom. Terra firme e solo arenoso.&quot; ## [108] &quot;Arbusto de 3m, inflorescencia creme, fruto vermelho ainda jovens&quot; ## [109] &quot;Arbusto de 4 m de altura; flores amareladas, botoes esverdeadas. Mata de igapó, solo arenoso.&quot; ## [110] &quot;Arbusto de 4 m de altura; flores amareladas. Terra firme; solo arenoso.&quot; ## [111] &quot;Arbusto de 4 m de altura; flores amarelas. Capoeira; solo arenoso.&quot; ## [112] &quot;Arbusto de 4 m de altura; flores e estames amarelos; frutos imaturos de cor verde. Campina aberta; solo aberto.&quot; ## [113] &quot;Arbusto de 4 m de altura; frutos imaturos verdes. Mata de terra firme; solo argilo-arenoso.&quot; ## [114] &quot;Arbusto de 4 m. de altura, frutos imaturos verdes.&quot; ## [115] &quot;Arbusto de 4m de altura, frutos imaturos verdes. Mata na beira da estrada.&quot; ## [116] &quot;Arbusto de 5 m de altura; botoes florais amarelo esverdeados. Mata de terra firme, solo areno-argiloso.&quot; ## [117] &quot;Arbusto de 5 m de altura; botoes florais amarelos. Mata de terra firme; solo argilo-pedregoso.&quot; ## [118] &quot;Arbusto de 5 m de altura; frutos verdes. Capoeira.&quot; ## [119] &quot;Arbusto de 5 m de altura; inflorescencia em botoes e flores verde-amareladas. Capoeira de solo argiloso. arbusto de 5 m de altura; inflorescência em botões e flores verde-amareladas. capoeira de solo argiloso.;Arbusto de 5 m de altura; inflorescencia em botoes e flores verde-amareladas. Capoeira de solo argiloso.&quot; ## [120] &quot;Arbusto de 5m de altura. Flores e botoes amarelos.&quot; ## [121] &quot;Arbusto de 6 m de altura. arbusto de 6 m. de altura.&quot; ## [122] &quot;Arbusto ramoso; ramos acinzentados; folhas coriáceas, abaxialmente verde mais claro; frutos verdes.&quot; ## [123] &quot;Arbusto, 1,30 m de altura, com frutos jovens de coloraçao verde, frequencia mediana. arbusto, 1,30 m de altura, com frutos jovens de coloração verde, frequência mediana.&quot; ## [124] &quot;Arbusto, 3 m., 15 cm.&quot; ## [125] &quot;Arbusto, 3 m., 15 cm.&quot; ## [126] &quot;Arbusto, ca. de 2,5m de altura, frutos pequenos de cor verde&quot; ## [127] &quot;Arbusto, ca. de 3m de altura. Botoes amarelos. arbusto, ca. de 3m de altura. botoes amarelos.; desc: arbusto, ca. de 3m de altura. botoes amarelos.;Arbusto, ca. de 3m de altura. Botoes amarelos.&quot; ## [128] &quot;Arbusto, flor branca esverdeada&quot; ## [129] &quot;Arbusto, folhas simples alternas. Flores pequenas, pouco vistosas.&quot; ## [130] &quot;Arbusto, ocasional, ca. 1,60m, caule verde-amarronzado, folha levemente papirácea, adaxialmente verde brilhante, infloresc. jovem verde-alvascenta; Restinga&quot; ## [131] &quot;Arbusto; flores amarelas; femea. arbusto; flores amarelas; fêmea.&quot; ## [132] &quot;Arbusto; ramos amarronzados; folhas coriáceas, adaxialmente verde-escuro brilhante e abaxialmente verde-claro; flores amareladas.&quot; ## [133] &quot;Área de influencia direta (canteiro).&quot; ## [134] &quot;Área de influencia indireta.&quot; ## [135] &quot;Árovore com cerca de 5m. Flores alvas.&quot; ## [136] &quot;Àrv. 10m alt. árvore de 10m de altura. folhas simples, alternas, espatulada a lanceolado. 22x6cm, incl. pecl. perfeita, creme 1.5-2mm. inflorescencia racemos. floresta secundária contígua a floresta primária. árvore de 10m de altura. folhas simples, alternas, espatulada a lanceolado. 22x6cm, incl. pecl. perfeita, creme 1.5-2mm. inflorescência racemos. floresta secundária contígua a floresta primária. rrv. 10m alt.;Árvore de 10m de altura. Folhas simples, alternas, espatulada a lanceolado. 22x6cm, incl. pecl. perfeita, creme 1.5-2mm. Inflorescencia racemos. floresta secundária contígua a floresta primária.&quot; ## [137] &quot;Árv. de 6m x 10cm de diâm; flores brancas, estames amarelas. árvore de 6m x 10cm de diâm., flores brancas, estames amarelos; desc: árvore de 6m x 10cm de diâm., flores brancas, estames amarelos&quot; ## [138] &quot;Àrv. de aprox. 6m de alt. fol. alternas, botões florais amarelos, fl. de corola ccreme. árvore de aproximadamente 6,0 m de altura; folhas alternas, coriáceas, glabras; botoes florais amarelos; flores de corola creme. floresta ombrófila aberta arvore de aproximadamete 6 metros de altura, folhas alternas coriaceas, glabras, botoes florais amarelos, flores de corola creme arvore de aproximadamete 6 metros de altura, folhas alternas coriaceas, glabras, botões florais amarelos, flores de corola creme floresta ombrófila densa. rrv. de aprox. 6m de alt. fol. alternas, botoes florais amarelos, fl. de corola ccreme.;Árvore de aproximadamente 6,0 m de altura; folhas alternas, coriáceas, glabras; botoes florais amarelos; flores de corola creme. Floresta Ombrófila Aberta&quot; ## [139] &quot;Árvore&quot; ## [140] &quot;ÁRVORE .&quot; ## [141] &quot;Árvore 10 m 20 cm de diam.; frutos imaturos verdes-pálidos. receptáculos verde-escuro. Transiçao entre praia arenosa de igapó e capoeira arenosa e velha de terra firme. árvore 10 m 20 cm de diam.; frutos imaturos verdes-pálidos. receptáculos verde-escuro. transição entre praia arenosa de igapó e capoeira arenosa e velha de terra firme.&quot; ## [142] &quot;Árvore 10 m; flores ferrugíneas; muito frequente, tanto na orla como no interior da mata..Habitat: Terrestre&quot; ## [143] &quot;árvore 10 m., flores brancas coordinate uncertainty: approx. in a 1000 m. radius image url: no picture available on the institutions web site;árvore 10 m., flores brancas&quot; ## [144] &quot;Árvore 10,5m, botoes florais amarelos, ramos com odor cítrico agradável. Mata Atlântica. árvore, 10,5 m alt., botoes florais amarelos, ramos com odor cítrico agradável.; mata atlântica. engenho dágua. borda plana. ; ha árvore, 10,5 m de altura, botoes florais amarelos, ramos com odor cítrico agradável; desc: árvore, 10,5 m de altura, botoes florais amarelos, ramos com odor cítrico agradável mata atlântica.;Árvore 10,5m, botoes florais amarelos, ramos com odor cítrico agradável. Mata Atlântica.&quot; ## [145] &quot;Árvore 10m alt. Folhas alternas, coriáceas, fruto seco, grande, verde.&quot; ## [146] &quot;Árvore 10m x 20cm de diâm., flores brancas; Mata costeira; HABITAT: Mata costeira; DESC: Árvore 10m x 20cm de diâm., flores brancas coleta: mata costeira&amp;nf;árvore 10m de altura e 20cm de diâmetro; flores brancas .;&quot; ## [147] &quot;Árvore 15m, frutos pequenos um pouco ovais, caule cor de kaki escuro, mata t.f.; DESC: Árvore 15m, frutos pequenos um pouco ovais, caule cor de kaki escuro, mata t.f.&quot; ## [148] &quot;Árvore 17 m, flores brancas. coleta: árvore 17 m, flores brancas.;&quot; ## [149] &quot;Árvore 18m, frutos imaturos de cor verde. Mata.&quot; ## [150] &quot;Árvore 20m, fuste 15m X 35cm, casca parda inteira com marcas amarelas, odor forte de canela, flores verde amareladas, nervaçao foliar amarela, ao sol, meio de encosta.&quot; ## [151] &quot;Árvore 25 m. Casca lisa. Córtice aromático. Espécie abundante no entorno.&quot; ## [152] &quot;Árvore 3m. Frutos velhos. mata ciliar&quot; ## [153] &quot;Árvore 4m, flores amarelas pálidas (cor de creme). Mata Atlântica. árvore, 4 m de altitude, flores amarelas pálidas (cor de creme); desc: árvore, 4 m de altitude, flores amarelas pálidas (cor de creme) mata atlântica.&quot; ## [154] &quot;Árvore 4m. Frutos imaturos verdes. mata ciliar&quot; ## [155] &quot;Árvore 4m. Frutos imaturos verdes. mata ciliar&quot; ## [156] &quot;Arvore 5 m, fruto preto&quot; ## [157] &quot;Árvore 5m altura; folhas coriáceas, discolores, botoes e inflorescencias ferrugíneas. árvore 5m altura; folhas coriáceas, discolores, botões e inflorescências ferrugíneas. coleta: mata.&amp;nf;arvore 5m; botoes e inflorescencias ferrugíneas.&amp;nf;ex huefs-6757; mata.&quot; ## [158] &quot;Árvore 5m de altura, flores em botoes cremes, coleta de folhas para análises, nome vulgar: louro. árvore, 5 m de altura. flores em botoes cremes. coleta de folhas para análises. árvore, 5 m de altura. flores em botões cremes. coleta de folhas para análises.&quot; ## [159] &quot;Árvore 5m, tronco ramificado. Frutos deiscendo, cúpula vermelha.&quot; ## [160] &quot;Árvore 5m. Botoes esverdeados.&quot; ## [161] &quot;Árvore 6 m de altura, flores alvo-esverdeadas&quot; ## [162] &quot;Árvore 7 m alt., folhas discolores, verdes com nervuras verde-claras na face adaxial, verde-claras na abaxial, perianto alvo-hialino, glandulas amarelas, estames verde-claros.&quot; ## [163] &quot;Arvore 7 m alt., folhas opacas, discolores. Infrutescências pendentes com frutos verde-esveralda cheios de pontos brancos, e cúpula rugulosa verde-opaca&quot; ## [164] &quot;Árvore 7m, frutos imaturos verdes&quot; ## [165] &quot;Árvore 7m. Frutos verdes.&quot; ## [166] &quot;Árvore 8 m de altura. Folhas coriáceas, alternas, glabras, fruto verde com cúpula.&quot; ## [167] &quot;Árvore 8 m., flor creme.&quot; ## [168] &quot;árvore 8 m., frutos amarelo esverdeado coordinate uncertainty: approx. in a 1000 m. radius image url: no picture available on the institutions web site&quot; ## [169] &quot;Árvore 8m. Frutos imaturos.&quot; ## [170] &quot;Árvore aprox. 6 m de altura, flores alvas.; Mata Atlântica; HABITAT: Mata Atlântica; DESC: Árvore aprox. 6 m de altura, flores alvas.&quot; ## [171] &quot;Árvore aproximadamente de 4 m de altura; fruto apreciado pelos passarinhos; flores esverdeadas. Terra firme, arenoso.&quot; ## [172] &quot;Árvore até 11m, frutos verdes.&quot; ## [173] &quot;Árvore até 20 m alt. Flores brancas.&quot; ## [174] &quot;Árvore c/ca. 4 m alt.; Botoes creme; Fruto com cálice persistente.HABITAT:Mata degradada;&quot; ## [175] &quot;Árvore ca 5 m. Inflorescencia em botoes.&quot; ## [176] &quot;Arvore ca 5m de alt, botoes florais ferruginosos, arvore ca 5m de alt, botões florais ferruginosos, árvore ca. 5 m alt.; botoes florais ferruginosos. margem da floresta, árvores de grande porte e emaranhado de arbustos. árvore de aproximadamente 5,00m de altura; botoes florais ferruginosos. margem da floresta, árvores de grande porte e emaranhado de arbustos.&amp;nf;floresta ombrófila aberta. 15m de altitude.; desc: árvore de aproximadamente 5,00m de altura; botoes florais fe árvore de aproximadamente 5m de altura. botoes florais ferruginosos. árvore de aproximadamente 5m de altura. botões florais ferruginosos. floresta ombrófita aberta&quot; ## [177] &quot;Árvore ca. 10 m alt.; caule amarronzado; flores amarronzadas. árvore ca. 10 m alt.; caule amarronzado; flores amarronzadas.; fragmento de mata úmida.; habitat: fragmento de mata úmida.; desc: árvore ca. 10 m alt.; caule amarronzado; flores amarronzadas. árvore ca. 10m alt.; caule amarronzado; flores amarronzadas. duplicatas: huefs; rb; hrcb; ibge; fuel; ufrn; eac; mac; flor; bhcb; spf.; fragmento de mata úmida na granja das pitangeiras. árvore cerca de 10 metros de altura, caule amarronzado; flores amarronzadas&quot; ## [178] &quot;Árvore ca. 10 m de alt., flores alvo-amareladas&quot; ## [179] &quot;Árvore ca. 11m, com frutos verdes.&quot; ## [180] &quot;Árvore ca. 12 m alt.; frutos imaturos verdes.&quot; ## [181] &quot;Árvore ca. 12 m de altura com 0,3m de diametro na base. Flores amarelas sem perfume. Sépalas e pétalas de cor amareladas cujo casca escura um pouco rugosas. Líquido fétido. árvore com mais ou menos 12 m alt. com 0,30m de diâmetro na base. flores amareladas sem perfume. sépalas e pétalas de cor amarelada sujo. casca escura um pouco rugosa. madeira fraca. exsuda um líquido fétido. árvore com mais ou menos 12 m alt. cop 0,30 m de diâmetro na base. flores amareladas sem perfume. sépalos e pétalas de cor amarelada sujo. casca escuro um pouco rugosa. madeira fraca. exsuda um líquido fétido.&quot; ## [182] &quot;Árvore ca. 15 m alt., copada; folhas e lenho aromáticos; folhas coriáceas; flores amarronzadas. Voucher para estudo fitoquímicos.&quot; ## [183] &quot;Árvore ca. 15 m alt.; flores amareladas. arvore ca. 15m alt.; flores amareladas.&quot; ## [184] &quot;Árvore ca. 15 m alt.; folhas coriáceas com face abaxial verde-acinzentada; flores com tépalas marrom-claras. coleta: mata higrófila.&amp;nf;árvore 15m; flores com tépalas marrom claras.; geografia: cedrca de 2km de pedra branca.; mata higrófila&quot; ## [185] &quot;Árvore ca. 15m de altura. Ramos enegrescidos. Folhas com face adaxial verde e abaxial glauca. Tépalas amarelas, eretas.&quot; ## [186] &quot;Árvore ca. 18m; folhas discolores verdes; coriáceas; frutos imaturos verdes. árvore. 8. metros. folhas discolores verdes, coriáceas frutos imaturos verdes. ; de;Árvore ca. 18m; folhas discolores verdes; coriáceas; frutos imaturos verdes.&quot; ## [187] &quot;Árvore ca. 2 m de altura. Botoes cremes árvore ca. 2 m de altura. botões cremes;Árvore ca. 2 m de altura. Botões cremes&quot; ## [188] &quot;Árvore ca. 2,5 m alt.; folhas simples alternadas, levemente discolores abaxialmente verde-claro e tomentosos, adaxialmente verde-escuro. árvore ca. 2,5m de altura, folhas simples alternadas, levemente discolores abaxialmente verde claro e tomentoso, adaxialmente verde escuro; desc: árvore ca. 2,5m de altura, folhas simples alternadas, levemente discolores abaxialmente verde claro e toment&quot; ## [189] &quot;Árvore ca. 20m de altura, nao marcada. Folhas verdes discolores com rede de venaçao amarela. Ramos terminais ferrugíneos. Cúpula verde. Frutos verdes a vináceos. árvore ca. 20m de altura, não marcada. folhas verdes discolores com rede de venação amarela. ramos terminais ferrugíneos. cúpula verde. frutos verdes a vináceos.&quot; ## [190] &quot;Árvore ca. 3 m de altura. Frutos verdes.&quot; ## [191] &quot;Árvore ca. 3m de altura com 5cm de diâmetro; flores levemente perfumadas, diminutas, verde pálidas, quaze amareladas. arvoreta com 3m alt. e 5cm de diâmetro. flores suavemente perfumadas, diminutas, verde-pálidas, quase amarelas. madeireira.&quot; ## [192] &quot;Arvore ca. 4 m. altura. Frutos imaturos verdes com receptáculo avermelhado&quot; ## [193] &quot;Árvore ca. 5 m de altura. Botoes florais cremes. árvore ca. 5 m de altura. botões florais cremes.&quot; ## [194] &quot;Árvore ca. 5,0m, frutos imaturos.; Cerrado, Areno-pedregoso.&quot; ## [195] &quot;Árvore ca. 5.0 m, frutos imaturos.; Campo Cerrado. Substrato areno-pedregoso. coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;;Árvore ca. 5.0 m, frutos imaturos.; Campo Cerrado. Substrato areno-pedregoso.&quot; ## [196] &quot;Árvore ca. 6 m alt.; caule marrom; folhas levemente papiráceas; frutos imaturos verdes. orla da mata&quot; ## [197] &quot;Árvore ca. 6 m alt.; folhas brilhantes na face superior, flores alvas.&quot; ## [198] &quot;Árvore ca. 6m de altura; flores diminutas sem perfume, cálice e corola amarela; frutos verde globosos e diminutos sem látex, sem resina. árvore com fuste linheiro ca. 6m alt.; flores diminutas, sem perfume, cálice e corola amarela; frutos verdes globosos e diminutos. madeireira.&quot; ## [199] &quot;Árvore ca. 6m, flores creme.&quot; ## [200] &quot;Árvore ca. 7 m alt.; caule marrom; folhas levemente papiráceas; flores creme-amarronzadas. árvore ca. 7 m alt.; caule marrom; folhas levemente papiráceas; flores creme-amarronzadas.; orla da mata. árvore ca. 7 m de altura; caule marrom; folhas levemente papiráceas; flores creme-amarronzadas. árvore ca. 7m alt; caule marrom; folhas levemente papiráceas; flores creme-amarronzadas orla da mata&quot; ## [201] &quot;Árvore ca. 7, 0 m, botoes florais esverdeadas. Subst. areno-pedregoso.; Cerrado (Típico). coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;&quot; ## [202] &quot;Árvore ca. 7m de altura com 20cm de diâmetro. Folhas simples, alternas, grandes, lisas, grossas. Flores amarelas pequenas. árvore com 7m alt. por 20cm de diâmetro. folhas simples, alternas, lanceoladas, grandes, lisas, grossas e peninervias. flores amarelas pequenas.&quot; ## [203] &quot;Árvore ca. 7m, frutos pretos em forma de sino&quot; ## [204] &quot;Árvore ca. 8 m alt. e 52 cm CAP; tronco castanho com bastante lenticelas bem desenvolvidas e odor característico ao ser cortado; folhas levemente discolor, face adaxial verde lustroso, glabra e abaxial levemente pilosa e de cor opaca;&quot; ## [205] &quot;Árvore ca. 8 m alt.; em frutificaçao dentro da mata. árvore com 8m de altura, em frutificaçao.&quot; ## [206] &quot;Árvore ca. 8 m alt.; folhas coriáceas; frutos imaturos.&quot; ## [207] &quot;Árvore ca. 8 m alt.; frutos em desenvolvimento. Indivíduo 75. coordenadas do material: 3°01-22,7s; 49°58-24,5w, indivíduo 75 (na ident. de pedro l. r. moraes consta que pode ser glomerata)&quot; ## [208] &quot;Árvore ca. 8 m alt.; frutos imaturos verdes. árvore. 8. metros. frutos imaturos verdes.; mata subperenifolia ; ha&quot; ## [209] &quot;Árvore ca. 8 m, com inflorescencia de coloraçao amarela-esverdeada. árvore ca. 8 m, com inflorescência de coloração amarela-esverdeada. árvore ca. 8m, com inflorescencia de coloraçao amarela-esverdeada.;Árvore ca. 8 m, com inflorescencia de coloraçao amarela-esverdeada.&quot; ## [210] &quot;Árvore ca. 8m de altura com 4cm de diâmetro; flores diminutas com coloraçao pardo; frutos diminutos verdes com uma única semente sem látex, sem resina. árvore com fuste linheiro, cerca de 8m alt. e 40cm de diâmetro. flores diminutas com coloraçao pardo-claro. madeira sem látex madeireira.&quot; ## [211] &quot;Árvore ca. 8m de altura, DAP: 3,3, tronco cilíndrico. Ramos com fissuras verdes, folhas simples, alterno espiraladas, longo pecioladas, estípulas interpeciolares, folhas coriáceas, ápice agudo, margem inteira, nervuras impressas em a árvore ca. 8m de altura, dap: 3,3, tronco cilíndrico. ramos com fissuras verdes, folhas simples, alterno espiraladas, longo pecioladas, estípulas interpeciolares, folhas coriáceas, ápice agudo, margem inteira, nervuras impressas em ambas as faces. inflorescência axilar, com flores diminutas, verde amareladas, aromáticas.&quot; ## [212] &quot;Árvore ca. 8m de altura; frutos imaturos verdes. árvore com ca. de 8m de alt. frutos imaturos verdes.habitat:mata atlântica; árvore com cerca de 8m de altura; coletada na mata atlântica; frutos imaturos verdes; n.v. louro-branco.habitat:mata atlântica; árvore com cerca de 8m de altura.; mata atlântica. ; ha&quot; ## [213] &quot;Árvore ca. de 10m de altura. Botoes cremes.&quot; ## [214] &quot;Árvore ca. de 12m de altura. Botoes creme-amarelados.&quot; ## [215] &quot;Árvore ca. de 12m de altura. Frutos imaturos verdes e maduros marrons.&quot; ## [216] &quot;Árvore ca. de 18m de altura. Botoes imaturos alvos. Ocorrencia frequente.&quot; ## [217] &quot;Árvore ca. de 20m de altura. Frutos imaturos verdes.&quot; ## [218] &quot;Árvore ca. de 2m de alt. Botoes florais creme.HABITAT:Mata Atlântica em encosta; árvore ca. de 2m de alt. botoes florais creme.habitat:mata atlântica; botoes florais creme;Árvore ca. de 2m de alt. Botoes florais creme.HABITAT:Mata Atlântica em encosta;&quot; ## [219] &quot;Árvore ca. de 3m de altura. Botoes cremes.HABITAT:Mata Atlântica.; herbácea. flores pequenas cor creme. herbácea. flores pequenas cor creme.; restinga ; ha;Árvore ca. de 3m de altura. Botoes cremes.HABITAT:Mata Atlântica.&quot; ## [220] &quot;Árvore ca. de 4 a 5 m de altura; caule marrom-escuro, lenticelados; folhas coriáceras; fruto com cúpula que recobre cerca de metade do fruto. árvore cerca de 4 a 5 m de alt. caule marro-escuro, lenticelados. folhas coriáceas. frutos com cupula que recobre cerca de metade do fruto.&quot; ## [221] &quot;Árvore ca. de 4 a 5 m de altura; caule marrom-escuro, lenticelados; folhas coriáceras; fruto com cúpula que recobre cerca de metade do fruto. árvore cerca de 4 a 5 m de alt. caule marro-escuro, lenticelados. folhas coriáceas. frutos com cupula que recobre cerca de metade do fruto.&quot; ## [222] &quot;Árvore ca. de 4m de altura. Botoes florais cremes e flores amarelas.HABITAT:Mata Atlântica secundária.;&quot; ## [223] &quot;Árvore ca. de 5 metros de altura. Flores com botoes amarelos.&quot; ## [224] &quot;Árvore ca. de 5,0m de alt. folhas discolores, ramos castanhos, botoes verdes e flores cremes. Mata Atlântica.&quot; ## [225] &quot;Árvore ca. de 5m de altura. Flores creme. Ocasional.&quot; ## [226] &quot;Árvore ca. de 6 m de altura; caule marrom-escuro, lenticelado; frutos imaturos de coloraçao verde. árvore ca. de 6 m de altura; caule marrom-escuro, lenticelado; frutos imaturos de coloração verde. árvore cerca de 6 metros de altura; caule marro-escuro, lenticelado; frutos imaturos de coloraçao verde.; borda da mata.; habitat: borda da mata.; desc: árvore cerca de 6 metros de altura; caule marro-escuro, lenticelado; frutos imaturos de coloraçao ver&quot; ## [227] &quot;Árvore ca. de 6m de alt., folhas com margem lisa, inflorescencias em início de floraçao, botoes florais páleos e brácteas ferrugíneas.&quot; ## [228] &quot;Árvore ca. de 7,5m de altura, visitada por formigas. Flores e botôes florais creme. Frutos imaturos verdes.; Mata Atlântica. ; HA árvore ca. de 7,5m de altura, visitada por formigas. flores e botôes florais creme. frutos imaturos verdes.; mata atlântica.; habitat: mata atlântica.; desc: árvore ca. de 7,5m de altura, visitada por formigas. flores e botôes florais árvore ca. de 7,5m de altura, visitada por formingas. flores e botôes florais creme. frutos imaturos verdes.&quot; ## [229] &quot;Árvore ca. de 7m de altura. Botoes florais verdes. Frutos secos.HABITAT:Floresta Estacional.; árvore. cerca de 7m de altura. botoes florais verdes. frutos secos.; floresta estacional. ; ha&quot; ## [230] &quot;Árvore ca. de 8 a 9 m de altura; Córtex que sofre oxidaçao ficando avermelhado; frutos com a cúpula envolvendo cerca de metade do fruto. árvore ca. de 8 a 9 m de altura; córtex que sofre oxidação ficando avermelhado; frutos com a cúpula envolvendo cerca de metade do fruto. árvore cerca de 8 a 9 m de alt. córtex que sofre oxidaçao ficando avermelhado. frutos com a cúpula envolvendo cerca de metada do fruto. árvore cerca de 8 a 9 metros de altura; cortex que sofre oxidaçao ficando avermelhado; frutos com a cúpula envolvendo cerca de metade do fruto.; borda da trilha. ; ha&quot; ## [231] &quot;Árvore ca. de 8 a 9 m de altura; Córtex que sofre oxidaçao ficando avermelhado; frutos com a cúpula envolvendo cerca de metade do fruto. árvore ca. de 8 a 9 m de altura; córtex que sofre oxidação ficando avermelhado; frutos com a cúpula envolvendo cerca de metade do fruto. árvore cerca de 8 a 9 m de alt. córtex que sofre oxidaçao ficando avermelhado. frutos com a cúpula envolvendo cerca de metada do fruto. árvore cerca de 8 a 9 metros de altura; cortex que sofre oxidaçao ficando avermelhado; frutos com a cúpula envolvendo cerca de metade do fruto.; borda da trilha. ; ha&quot; ## [232] &quot;Árvore ca. de 8m de altura. Botoes creme-ferrugíneos.&quot; ## [233] &quot;Árvore ca. de 8m de altura. Frutos verdes.HABITAT:Floresta Estacional.; árvore. cerca de 8m de altura. frutos verdes.; floresta estacional. ; ha&quot; ## [234] &quot;Árvore cerca de 15m de altura; DAP cerca de 25cm; folhas mais claras nas terminaçoes dos ramos, podendo ser evidenciadas duas tonalidades de verde no aspecto geral; flores cremes. Frequente. exemplar muito jovem; folhas com face adaxial lustrosa com venaçao um pouco proeminente e face abaxial pilosa; ramos pilosos.;Árvore cerca de 15m de altura; DAP cerca de 25cm; folhas mais claras nas terminaçoes dos ramos, podendo ser evidenciadas duas tonalidades de verde no aspecto geral; flores cremes. Frequente. Exemplar muito jovem; folhas com face adaxial lustrosa com venaçao um pouco proeminente e face abaxial pilosa; ramos pilosos.&quot; ## [235] &quot;Árvore cerca de 4 metros; caule lenticelado. Folhas coriáceas, apiculadas. Frutos com a cúpula envolvendo o fruto parcialmente.&quot; ## [236] &quot;Árvore cerca de 4,5m de altura, receptáculo vermelho. Espécie comum no local.&quot; ## [237] &quot;Árvore cerca de 7 metros de altura; tronco lenticelado, folhas cartáceas. Inflorescencia com flores cremes. árvore cerca de 7 metros de altura; tronco lenticelado, folhas cartáceas. inflorescência com flores cremes.&quot; ## [238] &quot;Árvore cerca de 8m de altura; caule enegrecido; botoes florais amarelos. Frequente.&quot; ## [239] &quot;Árvore cerca de 9 metros, caule acinzentado lenticelados, folhas pilosas na face abaxial e adaxial, flores cremes e frutos imaturos verdes. árvore, ca. 9m; caule acinzentado, lenticelado; folha pilosa em ambas as faces; flor creme. mata de chaves.borda com canavial.; habitat: mata de chaves.borda com canavial. rrvore cerca de 9 metros, caule acinzentado lenticelados, folhas pilosas na face abaxial e adaxial, flores cremes e frutos imaturos e verdes.; borda com canavial ; ha&quot; ## [240] &quot;Árvore com ± 8 m alt. Flores branco-amareladas, com leve perfume agradável.&quot; ## [241] &quot;Árvore com 10 a 12 m de alt. Folhas rígidas coriáceas. Flores de coloraçao creme.&quot; ## [242] &quot;Árvore com 10 m alt. Folhas coriáceas. Flores cremes, com tépalas eretas. árvore, 10m; folha coriácea; flor creme com tépala eretas. mata de cruzinha.interior da mata; habitat: mata de cruzinha.interior da mata&quot; ## [243] &quot;Árvore com 15 a 16 m de altura;Caule marrom-escuro, lenticelado; Ramos cilíndricos, escuros, pilosos, folhas coriáceas; frutos com a cúpula envolvendo no fruto verde.&quot; ## [244] &quot;Árvore com 15 m de alt. Folhas coriáceas; Frutos de coloraçao verde envolvidos parcialmente na cúpula. árvore com 15 m de altura; folhas cariáceas; frutos maduros de coloraçao verde envolvidos parcialmente na cúpula. ; de árvore com 15 m de altura; folhas coriáceas; frutos maduros de coloraçao verde envolvidos parcialmente na cúpula. árvore com 15 m de altura; folhas coriáceas; frutos maduros de coloração verde envolvidos parcialmente na cúpula. árvore, 15m; folha coriácea; fruto verde envolvido parcialmente na cúpula.&quot; ## [245] &quot;Árvore com 15m. Inflorescencia verde.&quot; ## [246] &quot;Árvore com 16 m de altura. cálice verde.&quot; ## [247] &quot;Árvore com 5 a 6 metros de altura; Ramos lenticelados, folhas coriáceas, frutos com cúpulas envolvendo parcialmente o fruto.; Borda da mata ; HA árvore, ca.5m; ramo lenticelado; folha coriácea; fruto envolvido parcialmente pela cúpula.&quot; ## [248] &quot;Árvore com 5 metros de altura; flor branca muito perfumada.&quot; ## [249] &quot;Árvore com 6,0m caído ao chao; flores passadas; frutos imaturos verdes; cálice persistente. árvore com ca. de 6m de altura. flores passadas frutos imaturos verdes; cálice persistente.habitat:veg. arbustiva arbórea densa. solo argioloso.;&quot; ## [250] &quot;Árvore com 7 m de altura. Fruto com cálice esverdeado.&quot; ## [251] &quot;Árvore com 8 a 10 m de alt. Ramos cilíndricos tomentosos, folhas coriáceas. Flores de coloraçao creme.&quot; ## [252] &quot;Árvore com 8,0 metros de altura; inflorescencia esverdeada.&quot; ## [253] &quot;Árvore com 8m de alt., flores com cálice e corola cremes, cheiro agrádavel árvore com 8m de altura. flores com cálice e corola cremes. cheiro agradável. mata estacional.&quot; ## [254] &quot;ÁRVORE COM 8M DE ALTURA, DIÂMETRO DA COPA 6M; FANERÓFITA. FOLHA ESPATIFORME; FLOR PEQUENA, EM CACHO, COR CREME. ODOR AGRADÁVEL.&quot; ## [255] &quot;Árvore com aprox. 6 m de altura, flores cremes, grande presença de formigas, casca acinzentada, copa ampla, folhas lustrosas. árvore de aprox. 6 m alt. flores cremes, grande presença de formigas, casca acinzentada, copa ampla. folhas lustrosas. árvore, ca. 6m; casca acinzentada, folha lustrosa, copa ampla; flor creme; grande presença de formigas. mata do buraquinho.borda da mata.; habitat: mata do buraquinho.borda da mata.&quot; ## [256] &quot;Árvore com aproximadamente 15m de altura, cap. 57cm.&quot; ## [257] &quot;Árvore com aproximadamente 3 a 4m de altura. Flores alvas, frutos novos, folhas alternas. Inflorescencia na axila das folhas.&quot; ## [258] &quot;Árvore com aproximadamente 3m de altura. Flores alvas, folhas alternas. Planta vivendo dentro da mata.&quot; ## [259] &quot;Árvore com até 14 m; ramos aromáticos; inflorescencia alvacenta.&quot; ## [260] &quot;Árvore com ca. 10m de altura; frutos imaturos verdes.&quot; ## [261] &quot;Árvore com ca. 12m de altura, fuste de ca. 6m de altura, com flor de cor amarelo e botao floral de cor amarelo. árvore com ca. 12m de altura, fuste de ca. 6m de altura, com flor de cor amarelo e botão floral de cor amarelo.&quot; ## [262] &quot;Árvore com ca. 15 m de altura. Flores amarelas. Flores em álcool.&quot; ## [263] &quot;Árvore com ca. 3 m de altura; tronco com DAP de 22 cm; frutos maduros com uma coloraçao de olivia e cúpula de margem simples e pedúnculo vermelho. Frutos imaturos. árvore com ca. 3 m de altura; tronco com dap de 22 cm; frutos maduros com uma coloração de olivia e cúpula de margem simples e pedúnculo vermelho. frutos imaturos. árvore com cerca de 3 m de alt. tronco co dap de 22 cm. frutos maduros com uma coloraçao de verde olivia e cúpula de margem simples e pedúnculo vermelho; frutos imaturos de... árvore com cerda de 3 m de altura; tronco com dap de 22 cm; frutos maduros com uma coloração de verde olivia e cúpula de margem simples e pedúnculo vermelho; frutos imaturos. árvore com cerda de 3 m de altura; tronco com dap de 22 cm; frutos maduros com uma coloraçao de verde olivia e cúpula de margem simples e pedúnculo vermelho; frutos imaturos.; borda da mata.&quot; ## [264] &quot;Árvore com ca. 4m de altura; infl. com flores creme esverdeados com botoes abertos, sem frutos.&quot; ## [265] &quot;Árvore com ca. 6,5m alt.; Inflorescencia em panículas cremes tomentosas; presença de domácias no pecíolo da folha. árvore com ca. 6,5m alt.; inflorescência em panículas cremes tomentosas; presença de domácias no pecíolo da folha. árvore de aprox. 6,5 m alt. inflorescencia em panículas cremes tomentosas. presença de domácias no peciolo da folha.&quot; ## [266] &quot;Arvore com ca. 7 m de altura. Folhas discolores com face superior mais escura, lucida. Inflorescência creme&quot; ## [267] &quot;Árvore com ca. 7m de altur; eixo floral verde-creme; cálice, corola e androceu creme-amarelados. Anteras quando maduras marrons; estigma preto; flores e folhas aromáticas.&quot; ## [268] &quot;Árvore com ca. de 4,0m. Frutos esverdeados quando imaturos.&quot; ## [269] &quot;Árvore com ca. de 4m de altura. Frutos maduros marronsHABITAT:Mata Atlântica - Borda da Mata - Encosta.;&quot; ## [270] &quot;Árvore com ca. de 5 a 6 metros de altura; caule escuro; folhas coriáceas discolor; inflorescencia com flores de tépalas eretas, de coloraçao creme. árvore com ca. de 5 a 6 metros de altura; caule escuro; folhas coriáceas discolor; inflorescência com flores de tépalas eretas, de coloração creme.&quot; ## [271] &quot;Árvore com ca. de 5 m de altura. Folhas discolores. Flor: inflorescencia amarronzada. árvore com ca. de 5 m de altura. folhas discolores. flor: inflorescência amarronzada. árvore comca de 5m de altura.&quot; ## [272] &quot;Árvore com ca. de 5m de alt. Botoes amarelos.HABITAT:Mata Atlântica.; árvore. 5. m. botoes amarelos.; mata atlântica ; ha rrvore com ca. de 5 m de altura.botoes amarelos. ambiente: mata atlântica&quot; ## [273] &quot;Árvore com ca. de 5m de alt. Botoes florais ferrugíneos.HABITAT:Mata Atlântica; árvore, 5m; botao floral ferrugíneo.; mata atlântica árvore, 5m; botoes florais ferruginosos.; mata atlântica&quot; ## [274] &quot;Árvore com ca. de 5m de alt. Botoes imaturos amarelo-esverdeados.HABITAT:Mata Atlântica;&quot; ## [275] &quot;Arvore com ca. de 5m. Flores em racemo diminutas.&quot; ## [276] &quot;Árvore com ca. de 6 m de altura. árvore com ca. de 6m de alt. frutos verdes imaturos.habitat:mata atlântica; árvore com ca. de 6m de altura. frutos verdes imaturos.; mata atlântica&quot; ## [277] &quot;Árvore com ca. de 7m de altura. Flores amarelasHABITAT:Mata Atlântica - Grota (borda da mata).; árvore com cerca de 7m de altura; coletada na mata atlântica - grota (borda da mata); flores amarelas; n.v. louro-branco.habitat:mata atlântica;&quot; ## [278] &quot;Árvore com ca. de 7m de altura. Flores cremes.HABITAT:Mata Atlântica secundária.;&quot; ## [279] &quot;Árvore com ca. de 8m alt., cheiro de pitanga, flores em botao árvore com cerca de 8m de altura. cheiro de pitanga. flores em botao. mata estacional.;Árvore com ca. de 8m alt., cheiro de pitanga, flores em botao&quot; ## [280] &quot;Árvore com ca. de 8m de altura. Caule enegrecido, botoes florais amarelos. Frequente.HABITAT:Solo argiloso. Borda da mata.;&quot; ## [281] &quot;Árvore com cerca de 10 m. de altura. Folhas maduras. Flores alvo-amarelas.&quot; ## [282] &quot;Árvore com cerca de 10m de altura; frutos maduros negros.&quot; ## [283] &quot;ÁRVORE COM CERCA DE 12M DE ALTURA. FLORES COM PÉTALAS ALVAS E ESTAMES MARRONS. FREQUENTE. árvore com cerca de 12m de altura. flores compétalas alvas e estames marrons. mata estacional.&quot; ## [284] &quot;Árvore com cerca de 15m. Fruto imaturo verde.&quot; ## [285] &quot;Árvore com cerca de 18m de altura. Entrecasca com cheiro de pitanga. Frutos maduros amrelos e imaturos verdes. Frequente.&quot; ## [286] &quot;Árvore com cerca de 2m de altura, indivíduo jovem. Fruto verde.&quot; ## [287] &quot;Árvore com cerca de 4 a 5 m de alt. Caule acinzentado, com muitas lenticelas. Folhas coriáceas. Frutos imaturos parcialmente incluso na cúpula. árvore com cerca de 4 a 5 metros de altura; caule acinzentado, com muitas lenticelas; folhas coriáceas; frutos imaturos parcialmente incluso na cúpula&quot; ## [288] &quot;árvore com cerca de 5 m. de altura; coletado na mat atlântico, cerrado, em área de transiçao; fruto imaturo.&quot; ## [289] &quot;Árvore com cerca de 5 metros de altura; tronco marrom escuro, lenticelado. Ramos e folhas pilosas. Folhas de forma lanceolada. Frutos de coloraçao esverdeado, imaturos. árvore com cerca de 5 metros de altura; tronco marrom escuro, lenticelado. ramos e folhas pilosas. folhas de forma lanceolada. frutos de coloração esverdeado, imaturos. mata de piedade.borda do açude.; habitat: mata de piedade.borda do açude.&quot; ## [290] &quot;Árvore com cerca de 5 metros de altura. Folhas cartáceas, fortemente discolores. Botoes esverdeados árvore com cerca de 5 metros de altura. folhas cartáceas, fortemente discolores. botões esverdeados&quot; ## [291] &quot;Árvore com cerca de 5 metros; caule com lenticelas; frutos maduros, com a cúpula envolvendo metade do fruto.&quot; ## [292] &quot;Árvore com cerca de 6 m. Flores com pétalas e estames creme. UTM 0671199S8739231; Solo arenoso. Mata Atlântica. ; HA árvore com cerca de 6 m. flores com pétalas e estames creme. utm 0671199s8739231; solo arenoso. mata atlântica.; habitat: solo arenoso. mata atlântica.; desc: árvore com cerca de 6 m. flores com pétalas e estames creme. utm 0671199s87 árvore com cerca de 6 m. flores com pétalas estames.;Árvore com cerca de 6 m. Flores com pétalas estames.&quot; ## [293] &quot;Arvore com cerca de 6 metros de altura, presença de acúleos, frutos secos&quot; ## [294] &quot;árvore com cerca de 8 m. de altura; coletado no interior da mata atlântica; botoes ferrugínico; fruto ausente.&quot; ## [295] &quot;Árvore com cerca de 9 metros de altura; caule acinzentado, lenticelado; Folhas apiculadas, coriáceas. Frutos de coloraçao verde com cúpula que envolve parcialmente o fruto. árvore com cerca de 9 metros de altura; caule acinzentado, lenticelado; folhas apiculadas, coriáceas. frutos de coloração verde com cúpula que envolve parcialmente o fruto. árvore com cerca de 9 metros de altura; caule acinzentado, lenticelado; folhas apiculadas, coriáceas. frutos de colorçao verde com cúpula qeu envolve parcialmente o fruto.; borda da mata ; ha árvore, ca. 9m; caule acinzentado, lenticelado; folha apiculada, coriácea; fruto verde envolvido parcilamente na cúpula.&quot; ## [296] &quot;Árvore com flores amarelas, botoes amarelo-esverdeados. árvore com flores amarelas; botoes amarelo-esverdeado.&quot; ## [297] &quot;Árvore com folhas e botoes florais. árvore com folhas e botões florais.;Árvore com folhas e botões florais.&quot; ## [298] &quot;Árvore com frutos maduros.; DESC: Árvore com frutos maduros.&quot; ## [299] &quot;árvore com mais ou menos 15m de alt.&quot; ## [300] &quot;ÁRVORE DE 10 M DE ALT., E 40 CM DE DIÂM, RESQUICIO DA MATA PRIMITIVA&quot; ## [301] &quot;Árvore de 10 m de altura x 20 cm de diâmetro; botoes florais. Mata de terra firme; solo argilo-arenoso. árvore de 10 m de altura x 20 cm de diâmetro; botões florais. mata de terra firme; solo argilo-arenoso.&quot; ## [302] &quot;Árvore de 10 m de altura x 50 cm de diâmetro; frutos imaturos verdes. árvore de 10 m de altura x 50 cm de diâmetro; frutos imaturos verdes.; mata de terra firme, latossolo amarelo.&quot; ## [303] &quot;Árvore de 10 m., flor amarela.;Árvore de 10 m.&quot; ## [304] &quot;Árvore de 10-15 m. de altura, flores pequenas de cor verde-escuro a marrom. Solo argiloso. árvore de 10-15 m. de altura, flores pequenas de cor verde-escuro a marrom.; solo areno-argiloso, vegetaçao primaria.;Árvore de 10-15 m. de altura, flores pequenas de cor verde-escuro a marrom. Solo argiloso.&quot; ## [305] &quot;Árvore de 10-15 metros. Material frutífero.&quot; ## [306] &quot;Árvore de 10,5m de altura e cap. 49cm. Folhas pequenas, creme. Módulo 8, indivíduo 428.&quot; ## [307] &quot;Árvore de 10m alt., 10 cm, inflorescencia em botoes&quot; ## [308] &quot;Árvore de 10m de alt., com frutos.&quot; ## [309] &quot;Árvore de 10m de altura 20cm diametro, flor amarela, cálice creme.&quot; ## [310] &quot;Árvore de 10m de altura x 12cm de diâmetro, frutos jovens. árvore de 10m de altura x 12cm de diâmetro, frutos jovens.; margem da estrada, sempre alagada, solo argiloso.&quot; ## [311] &quot;Árvore de 10m de altura, DAP 9.3cm. Infrutescencia verde-escura, frutos com cálice vermelho e frutos verdes. árvore de 10m de altura, dap 9.3cm. infrutescência verde-escura, frutos com cálice vermelho e frutos verdes. árvore de 10m de altura, dap 9.3cm. infrutescencia verde-escura, frutos com cálice vermelho e frutos verdes. ; de&quot; ## [312] &quot;Árvore de 10m de altura, esgalhada desda a base, frutos imaturos. Ocasional na mata de terra firme. Árvore no. 21.&quot; ## [313] &quot;Árvore de 10m de altura, flor em botao creme.&quot; ## [314] &quot;Árvore de 10m de altura; inflorescencia em panícula, com flores pequenas de cor amrelo claro, botoes florais amarelo esverdiado, coberto com pelos translucido.&quot; ## [315] &quot;Arvore de 10m, com ramos flexuosos e flores brancacentas, frutos verdes com cupula verde amarelada&quot; ## [316] &quot;Árvore de 12 - 15 m, frutos ainda jovens.&quot; ## [317] &quot;Árvore de 12 e 15cm diâm; frutos verdes. Col. de madeira. árvore de 12m e 15cm diâm., frutos verdes, col. de madeira.&quot; ## [318] &quot;Árvore de 12 m, flores claras&quot; ## [319] &quot;Árvore de 12 m. de altra e 1 m. de circunferencia. (Amost. de madeira). árvore de 12m de alt., e 1m de circunferencia árvore de 12m de alt., e 1m de circunferência&quot; ## [320] &quot;ÁRVORE DE 12-15M DE ALTURA, FLORES EM BOTOES ESVERDEADOS. árvore de 12-15m de altura, flores em botões esverdeados.&quot; ## [321] &quot;Árvore de 12,30m de altura e 53cm de CAP. Módulo 2, indíviduo 57.&quot; ## [322] &quot;Árvore de 12m de altura com frutos jovens esverdeados. Mata de terra firme e solo argiloso.&quot; ## [323] &quot;Árvore de 12m de altura x 18cm de diâmetro, frutos jovens. Ocasional no capoeirao de terra firme. árvore de 12m de altura x 18cm de diâmetro, frutos jovens. ocasional no capoeirão de terra firme.&quot; ## [324] &quot;Árvore de 12m e 25cm diâm., entre blocos de manganes, infl. em botoes.&quot; ## [325] &quot;Árvore de 12m, flor branco-sujo&quot; ## [326] &quot;Árvore de 13,30m de altura, com 44 cm de cap., frutos quando maduros de cor marrom escuro. Módulo 1, indivíduo 4.&quot; ## [327] &quot;Árvore de 13m de altura. Frutos imaturos. Mata de terra firme.&quot; ## [328] &quot;Árvore de 14m de altura com botoes florais esverdeado&quot; ## [329] &quot;Árvore de 14m de altura, com 165cm de cap., módulo 2, indivíduo 83.&quot; ## [330] &quot;Árvore de 14m de altura, DAP 5.4cm. Botoes florais verde-claro. árvore de 14m de altura, dap 5.4cm. botões florais verde-claro. árvore de 14m de altura, dap 5.4cm. botoes florais verde-claro. ; de&quot; ## [331] &quot;Árvore de 15 m., flor creme - sujo.&quot; ## [332] &quot;Árvore de 15 m., flores creme em inflorescencia.&quot; ## [333] &quot;Árvore de 15,70m de altura e 65cm de CAP. Módulo 1, indivíduo 33.&quot; ## [334] &quot;Árvore de 15m de altura, DAP 15.5cm. Inflorescencia axilar em panículas, pedúnculo verde-claro, flores amarelo-claro, botoes florais amarelo-claro. árvore de 15m de altura, dap 15.5cm. inflorescência axilar em panículas, pedúnculo verde-claro, flores amarelo-claro, botões florais amarelo-claro. árvore de 15m de altura, dap 15.5cm. inflorescencia axilar em panículas, pedúnculo verde-claro, flores amarelo-claro, botoes florais amarelo-claro. ; de&quot; ## [335] &quot;Árvore de 15m de altura, flores e estames amarelos, botoes florais amarelo-claros. Mata de terra firme alta e solo arenoso. árvore de 15m de altura, flores e estames amarelos, botões florais amarelo-claros. mata de terra firme alta e solo arenoso.;Árvore de 15m de altura, flores e estames amarelos, botoes florais amarelo-claros. Mata de terra firme alta e solo arenoso.&quot; ## [336] &quot;Árvore de 16m de altura e 65cm de CAP. Folhas com a face abaxial tomentosa. Material estéril. Módulo 1, indíviduo 33.&quot; ## [337] &quot;Árvore de 18 m. x 25 cm. de diâm., frutos imaturos verdes.&quot; ## [338] &quot;Árvore de 20 m de altura x 15 cm de diâmetro; inflorescencia jovem esverdeada. Mata de terra firme, solo argiloso. árvore de 20 m de altura x 15 cm de diâmetro; inflorescência jovem esverdeada. mata de terra firme, solo argiloso.;Árvore de 20 m de altura x 15 cm de diâmetro; inflorescência jovem esverdeada. Mata de terra firme, solo argiloso.&quot; ## [339] &quot;Árvore de 20m de altura x 25cm de diâmetro, madeira dura, pesada, creme, cheiro agradável, casca fina esverdeada, botoes florais, solo arenoso. árvore de 20m de altura x 25cm de diâmetro, madeira dura, pesada, creme, cheiro agradável, casca fina esverdeada, botões florais, solo arenoso.&quot; ## [340] &quot;Árvore de 20m de altura x 30cm de diâmetro, flores amareladas. Madeira com casca creme, cerne castanho creme pouco mais escuro. árvore de 20m de altura x 30cm de diâmetro, flores amareladas. madeira com casca creme, cerne castanho creme pouco mais escuro. mata de terra firme, solo argiloso. doaçao inpa 98376;Árvore de 20m de altura x 30cm de diâmetro, flores amareladas. Madeira com casca creme, cerne castanho creme pouco mais escuro.&quot; ## [341] &quot;Arvore de 20m. Flores em botao.&quot; ## [342] &quot;Árvore de 21m de altura x 32cm de diâmetro de fuste, flores velhas colhidas no chao, ao pé da árvore. Frequente na mata de terra firme de solo arenoso, tipo carrasco. árvore de 21m de altura x 32cm de diâmetro de fuste, flores velhas colhidas no chão, ao pé da árvore. frequente na mata de terra firme de solo arenoso, tipo carrasco.&quot; ## [343] &quot;Árvore de 25m de altura x 25cm de diâmetro, folhas verde-claras por baixo, madeira amareladas, pouco pesada, cúpula do fruto avermelhada. Ocasional na mata de terra firme. árvore de 25m de altura x 25cm de diâmetro, folhas verde-claras por baixo, madeira amareladas, pouco pesada, cúpula do fruto avermelhada. ocasional na mata de terra firme. ; de&quot; ## [344] &quot;Árvore de 3 m de altura; flores alvo-amareladas. Terra firme. arenoso, capoeira fechada.&quot; ## [345] &quot;ARVORE DE 3-4 MTR., FL. ALVA.&quot; ## [346] &quot;Árvore de 3-4m, frutos verdes. Receptaculos vermelhos.&quot; ## [347] &quot;Árvore de 3,0m de altura, caule cinza escuro, fissurado, folhas verdes, frutos verdes (jovens). Frequencia densa.&quot; ## [348] &quot;Árvore de 31,0 cm de circunferencia. árvore de 31,0 cm de circunferência.;Árvore de 31,0 cm de circunferência.&quot; ## [349] &quot;Árvore de 37,0 cm de circunferencia. árvore de 37,0 cm de circunferência.;Árvore de 37,0 cm de circunferencia.&quot; ## [350] &quot;Árvore de 3m de alt., frutos imaturos verde&quot; ## [351] &quot;Árvore de 4 m de altura, fina; flor branca. Capoeira na beira do rio.&quot; ## [352] &quot;Árvore de 4 m de altura; flores esverdeadas; botoes florais. Bosque, solo argilo-arenoso. árvore de 4 m de altura; flores esverdeadas; botões florais. bosque, solo argilo-arenoso.&quot; ## [353] &quot;Árvore de 4 m de altura.&quot; ## [354] &quot;Árvore de 4 metros árvore de 4m de alt.;árvore de 4m de alt.&quot; ## [355] &quot;Arvore de 4-6 m.&quot; ## [356] &quot;Árvore de 4,5 m de altura; frutos imaturos verdes. Capoeira, solo argiloso.&quot; ## [357] &quot;Árvore de 4m de altura, frutos imaturos verdes. Capoeira e solo argiloso.&quot; ## [358] &quot;Árvore de 4m de altura. Frutos imaturos verdes. ; DE&quot; ## [359] &quot;Árvore de 4m de altura. Inflorescencia com flores amareladas. Terreno firme e argiloso. Capoeira. árvore de 4m de altura. inflorescência com flores amareladas. terreno firme e argiloso. capoeira.&quot; ## [360] &quot;Árvore de 5 m de altura x 10 cm de diâmetro. Flor creme. árvore de 5 m de altura x 10 cm de diâmetro. flor creme.; mata de terra firme. solo argiloso.&quot; ## [361] &quot;Árvore de 5 m de altura x 6 cm de diâmetro; botoes florais amarelados; frutos imaturos verde-esbranquiçados, passando a róseos e evermelhos quando amadurecem. Capoeira alta, solo argilo-silicoso. árvore de 5 m de altura x 6 cm de diâmetro; botões florais amarelados; frutos imaturos verde-esbranquiçados, passando a róseos e evermelhos quando amadurecem. capoeira alta, solo argilo-silicoso.&quot; ## [362] &quot;Árvore de 5 m de altura; flores amarelas. Capoeira; solo argilo-arenoso.&quot; ## [363] &quot;Árvore de 5 m de altura; frutos verdes. Terreno; firme, argiloso, capoeira fechada. X = 1538 árvore de 5 m de altura; frutos verdes. terreno; firme, argiloso, capoeira fechada.&amp;nf;x = 1538&quot; ## [364] &quot;Árvore de 5 m de altura; frutos vermelhos, cálice marron. Terra firme; solo argiloso; mata.&quot; ## [365] &quot;Árvore de 5 m. de altura, com frutos.&quot; ## [366] &quot;Árvore de 5-7m, flor branca.; Cerrado&quot; ## [367] &quot;Árvore de 5-8 m, botoes esverdeados.&quot; ## [368] &quot;Arvore de 5.0 m. alt. Folhas verdes concolores. Flores com botoes cremes&quot; ## [369] &quot;Árvore de 5m de altura e botoes florais amarelados. Capoeira alta, solo argilo-silicoso. árvore de 5m de altura e botões florais amarelados. capoeira alta, solo argilo-silicoso.&quot; ## [370] &quot;Árvore de 5m de altura e flores amarelo-pálido, folhas alternas e coriáceas. Madeira castanho-claro, casca grossa, persitente, serve para vigas. Terra firme, argilosa. Mata virgem.&quot; ## [371] &quot;Árvore de 5m de altura x 30cm de circunferencia, frutos imaturos verdes. Mata de terra firme e solo arenoso. árvore de 5m de altura x 30cm de circunferência, frutos imaturos verdes. mata de terra firme e solo arenoso.;Árvore de 5m de altura x 30cm de circunferencia, frutos imaturos verdes. Mata de terra firme e solo arenoso.&quot; ## [372] &quot;Árvore de 5m de altura, flores cremes. Capoeira em frente da Reserva Biológica de Campina e solo argilo-arenoso.&quot; ## [373] &quot;Árvore de 5m de altura. Flores amarelas. Terreno arenoso, capoeira fechada.&quot; ## [374] &quot;Árvore de 5m.&quot; ## [375] &quot;àrvore de 5m. rrvore de 5m.;àrvore de 5m.&quot; ## [376] &quot;Árvore de 6 m, flores amarelas.&quot; ## [377] &quot;Árvore de 6 m. por 30 cm. de circunferencia, frutos verdes, imaturos.&quot; ## [378] &quot;Árvore de 6m de altura. Terra firme e solo argiloso.&quot; ## [379] &quot;Arvore de 6m, botoes amarelosa, folhas discolor arvore de 6m, botões amarelosa, folhas discolor&quot; ## [380] &quot;Árvore de 7 m de altura; flores laranjas. Capoeira, terra firme, solo arenoso. árvore de 7 m de altura; flores laranjas. capoeira, terra firme, solo arenoso. ; de;Árvore de 7 m de altura; flores laranjas. Capoeira, terra firme, solo arenoso.&quot; ## [381] &quot;Árvore de 7 metros.&quot; ## [382] &quot;Árvore de 7 mts, frutos um pouco oval, caules verdes, amendoas marrom. árvore de 7m, frutos um pouco ovais, caules verdes, amendoas marrons; mata; habitat: mata; desc: árvore de 7m, frutos um pouco ovais, caules verdes, amendoas marrons;Árvore de 7 mts, frutos um pouco oval, caules verdes, amendoas marrom.&quot; ## [383] &quot;Árvore de 7m de altura, DAP 2.3cm. Inflorescencia e infrutescencia com frutos jovens. árvore de 7m de altura, dap 2.3cm. inflorescência e infrutescência com frutos jovens. árvore de 7m de altura, dap 2.3cm. inflorescencia e infrutescencia com frutos jovens. ; de&quot; ## [384] &quot;Árvore de 8 m. Frutos imaturos verdes com cúpula vermelha.; Floresta Ombrófila Aberta Aluvial.&quot; ## [385] &quot;Árvore de 8 metros, frutos novos.&quot; ## [386] &quot;Arvore de 8m&quot; ## [387] &quot;Árvore de 8m de altura com inflorescencia esverdeada&quot; ## [388] &quot;ÁRVORE DE 8M DE ALTURA.&quot; ## [389] &quot;Árvore de 8m x 15cm de circunferencia. Fruto imaturo, verde. árvore de 8m x 15cm de circunferência. fruto imaturo, verde. coleta: xls: spsfantigo;&quot; ## [390] &quot;Árvore de 9 m de altura. Mata de terra firme, solo argiloso.&quot; ## [391] &quot;Árvore de aprox. 6 m alt. Copa plana, muitos ramos jovens. Flores alvas. Inflorescencia em panículas axilares a subterminais. árvore de aprox. 6,0 m de altura, copa ampla, muitos ramos jovens, flores alvas. inflorescencia em panículas axilares a subterminais. árvore de aprox. 6,0 m de altura, copa ampla, muitos ramos jovens, flores alvas. inflorescência em panículas axilares a subterminais. mata de piedade.borda com canavial.; habitat: mata de piedade.borda com canavial.&quot; ## [392] &quot;Árvore de apróx. 8 m de alt. Copa plana.&quot; ## [393] &quot;Árvore de aproximadamente 6 metros de altura. Copa ampla. ; DE&quot; ## [394] &quot;Árvore de aproximadamente 6,5m folhas simples, subcrassas. Exudado incolor pegajoso e cheiro amargoso. Material estéril. Parcela 31, indivíduo 1533. localizado em solo areno argiloso-pedregoso. habitat:terrestre no interior da mata. exudado incolor pegajoso e cheiro amargoso. parcela 31. ind. 1533.; árvore de + ou - 6,5 m. folhas simples, subcrassas. material estéril.; floresta estacional (mata d; ha&quot; ## [395] &quot;Árvore de aproximadamente 6m de altura. Botoes amarelados.&quot; ## [396] &quot;Árvore de aproximadamente 8 m de altura. copa ampla ; DE&quot; ## [397] &quot;árvore de até 5m de alt., flor alva&quot; ## [398] &quot;Árvore de até 60 m. fl. alvacenta.&quot; ## [399] &quot;ÁRVORE DE CA. 8 M DE ALT., FOLHA SIMPLES, INTEIRA, SOLTANDO-SE COM FACILIDADE&quot; ## [400] &quot;Árvore de frequencia relativa baixa com flores alvas e frutos ausentes.&quot; ## [401] &quot;Árvore de fuste linheiro, ca. 8 m de altura e 10 cm de diâmetro. Copa ampla e esgalhada. Flores sem perfume. Perianto amarelo-esverdeado. Madeireira. árvore de fuste linheiro, cerca de 8 m alt. e 10 cm de diâmetro. copa ampla e esgalhada. flôres sem perfume. perianto amarelo-esverdeado. madeireira.&quot; ## [402] &quot;Árvore de grande porte, flores alvo-esbranquiçadas, sem perfume, pequenas.&quot; ## [403] &quot;Árvore de grande porte, flores pequenas e amarelo com pouco perfume. árvore de grande porte; flores pequenas, de cor amarela com pouco perfume.&quot; ## [404] &quot;Árvore de grande porte, sem látex ou resina. Flor alva ou marrom, sem perfume. árvore de grande porte. sem látex ou resina. flor alva ou marrom, sem perfume. árvore de grande porte. sem latex ou resina. flor alva ou marron, sem perfume.&quot; ## [405] &quot;Árvore de grande porte. Flores amarelas pouco perfumadas, pequenas. árvore de grande porte. flores amarelas, pouco perfumadas, pequenas. folhas simples com nervura salientes na face ventral.&quot; ## [406] &quot;Árvore de grande porte. Flores mais ou menos roxas.&quot; ## [407] &quot;Árvore de grande porte. Flores pequenas de cor alva-esverdeada.&quot; ## [408] &quot;Árvore de mais ou menos 8 metros de altura.&quot; ## [409] &quot;Árvore de pequeno porte. Inflorescencia terminal com pequenas flores esverdeadas.; Solo arenoso encharcado.&quot; ## [410] &quot;Árvore de porte regular.&quot; ## [411] &quot;Árvore em moita.&quot; ## [412] &quot;Árvore flor amarela&quot; ## [413] &quot;Árvore florida (flores alvas) com 10 m de altura. Terra firme.&quot; ## [414] &quot;Árvore frondosa, isolada no pasto. Flores creme.&quot; ## [415] &quot;Árvore grande . Ref no O Genero Ocotea Aulb, no Nordeste do Brasil, Lauraceas). de Ida de Vattimo, Rodriguesia, ns.35 e 36, 1960, R. Jans .&quot; ## [416] &quot;Árvore mais ou menos 10m alt. Flores amarelas pouco perfumadas.&quot; ## [417] &quot;Árvore media, fl. esbranquiçada.&quot; ## [418] &quot;Árvore mediana de 10 a 15 m de altura, com flores esverdeadas aromáticas, na mata.&quot; ## [419] &quot;Árvore mediana.&quot; ## [420] &quot;Árvore na borda da mata, ca. de 5 m alt. Frutos verdes, cupula verde avermelhada.; Mata Atlântica. ; HA árvore na borda da mata, ca. de 5 m alt. frutos verdes, cupula verde avermelhada.; mata atlântica.; habitat: mata atlântica.; desc: árvore na borda da mata, ca. de 5 m alt. frutos verdes, cupula verde avermelhada.;Árvore na borda da mata, ca. de 5 m alt. Frutos verdes, cupula verde avermelhada.; Mata Atlântica. ; HA&quot; ## [421] &quot;Árvore Ns 126.; Floresta de terra-firme. ; HA&quot; ## [422] &quot;ÁRVORE PEQ. FL ALVACENTA&quot; ## [423] &quot;Árvore pequena de 4 m de altura; flores esverdeadas; frutos novos com o cálice marron.&quot; ## [424] &quot;Árvore pequena de 4 m de altura; flores esverdeadas; frutos novos com o cálice marron. Terra firme, úmida, solo arenoso.&quot; ## [425] &quot;Árvore pequena, fl verde - pardacenta.&quot; ## [426] &quot;Árvore pequena. (Arb.) Flôres amarelo pardo.&quot; ## [427] &quot;Árvore pequena. Flor amarelo pardo. árvore pequena. flor amarelo-pardo.&quot; ## [428] &quot;Árvore planta com ca. de 3m de alt. Botoes florais esverdeados.HABITAT:Mata Atlântica em encosta;&quot; ## [429] &quot;Árvore regular; flores creme; folhas com cheiro de canela sassafraz. Na mata.&quot; ## [430] &quot;àrvore rrvore;àrvore&quot; ## [431] &quot;Árvore tombada, folhas lisas, frutos verdes com cúpula marrom levemente avermelhada&quot; ## [432] &quot;Árvore, 1,5 m.. Flor amarela. arvore. 1.5. m. flor amarela.; borda da mata ; ha doaçao do herbário ase. universidade federal de sergipe. ase ns 9896&quot; ## [433] &quot;Árvore, 10 m, frutos imaturos verde claros. coleta: árvore 10 m, frutos verdes.; geografia: municipal.;;Árvore, 10 m, frutos imaturos verde claros.&quot; ## [434] &quot;Árvore, 10 metros; frutos imaturos verdes. Acima da pousada águas verdes, beira da estrada.&quot; ## [435] &quot;Árvore, 10m, fruto imaturo verde; Mata subperenifolia&quot; ## [436] &quot;arvore, 14 m, 14 cm DBH. fl. jaunes en forme de coupe r 3+3 tép. jaune recouvert de duvet brun, 3+3+3 ét., 6 glandes r la base de la fleur, slash r odeur trcs parfumée. récolte photographiée in situ, individu num. H0688 du relevé hecta&quot; ## [437] &quot;Árvore, 6m. Flores cremes árvore, 6m. flores cremes.; mata atlântica. ; ha árvore, 6m. flores cremes.; mata atlântica.; habitat: mata atlântica.; desc: árvore, 6m. flores cremes.;Árvore, 6m. Flores cremes.; Mata atlântica.; HABITAT: Mata atlântica.&quot; ## [438] &quot;Árvore, 7-10m, Comum na encosta e níveis superiores. Inflorescencia abundante, terminal; pequenas flores branco-amareladas.&quot; ## [439] &quot;Árvore, 8 m.&quot; ## [440] &quot;Árvore, abundante, flor branca árvore, flor branca, abundante.&quot; ## [441] &quot;Árvore, ca de 10m de altura.Frutos verdes.; Mata Atlântica árvore, ca. de 10m de altura. frutos verdes.habitat:mata atlântica;&quot; ## [442] &quot;Árvore, ca. de 4 m alt. Frutos verdes, cúpula vermelha.; Mata Atlântica. ; HA&quot; ## [443] &quot;Árvore, cerca de 5,0 m de altura; botoers florais verde-amarelos. Espécie comum no local. árvore, cerca de 5,0 m de altura; botõers florais verde-amarelos. espécie comum no local.&quot; ## [444] &quot;Árvore, construçao e carpintaria.&quot; ## [445] &quot;Árvore, construçao e carpintaria. folha larga.;Árvore, construçao e carpintaria&quot; ## [446] &quot;Árvore, em floraçao, ca. de 5 m de altura, botoes florais cremes, frutos ausentes. árvore, em floração, ca. de 5 m de altura, botões florais cremes, frutos ausentes.&quot; ## [447] &quot;Árvore, flor esbranquiçada.&quot; ## [448] &quot;Árvore, folhas semicrassas, levemente discolor com face adaxial verde brilhante, frutos imaturos verdes, cálice persistente alaranjado.&quot; ## [449] &quot;Árvore; 10 m; tronco com lenticelas redondas e odor forte.; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [450] &quot;Árvore; 11 m .; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [451] &quot;Árvore; 4,0 m; botoes florais; flores creme; folhas face adaxial verde-escuro e face abaxial verde-esbranquiçado.; Borda da capoeira. ; HA árvore; 4,0 m; botoes florais; flores creme; folhas face adaxial verde-escuro e face abaxial verde-esbranquiçado.; borda da capoeira.; habitat: borda da capoeira.; desc: árvore; 4,0 m; botoes florais; flores creme; folhas face adaxial v&quot; ## [452] &quot;Árvore; 4,0 m; flores e botoes cremes. ; DE&quot; ## [453] &quot;Árvore; 8 m; pecíolo com cera branca.; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [454] &quot;Árvore; 8 m.; Terra firme, floresta secundária sobre solo antropogenico (Terra Preta de Índio). ; HA&quot; ## [455] &quot;Árvore; flores brancas. Capoeiras e matas..Habitat: Terrestre&quot; ## [456] &quot;Árvore: 5,0m. Folhas coriáceas, discolores, face abaxial pubescente. Frutos imaturos verdes.; Floresta Estacional Semidecidual. ; HA&quot; ## [457] &quot;Árvore.&quot; ## [458] &quot;Árvore.&quot; ## [459] &quot;Árvore.&quot; ## [460] &quot;Árvore.&quot; ## [461] &quot;Árvore.&quot; ## [462] &quot;Árvore.&quot; ## [463] &quot;árvore. 10. m. folas alternas, flor amarela.; interior da mata ; HA&quot; ## [464] &quot;árvore. 12. m. folhas alternas.; Mata ; HA&quot; ## [465] &quot;árvore. 8. m. presença de frutos verdes e maduros, associaçao com formingas e ninfas de homoptera.; Mata (borda) ; HA&quot; ## [466] &quot;árvore. 9. m. presença de botoes florais e flores, floraçao intensa.; Mata (borda) ; HA&quot; ## [467] &quot;Árvore. Amostra 283 - Parcela 6 - Sao Joao. árvore. amostra 619 - parcela 4 - quizanga.&quot; ## [468] &quot;Árvore. Botoes e flores acastanhados. Solo argiloso.&quot; ## [469] &quot;Árvore. Botoes florais verdes-claro. árvore. botões florais verdes-claro.;Árvore. Botoes florais verdes-claro.&quot; ## [470] &quot;Árvore. ca. de 8 m de altura. Inflorescencia com flores amarelas,botoes florais amarelados.HABITAT:Mata Atlântica.;&quot; ## [471] &quot;Árvore. Flor creme; .; HABITAT: .; DESC: Árvore. Flor creme;Árvore. Flor creme.&quot; ## [472] &quot;Árvore. Flores com sépalas persistente verde-claras. Fruto imaturo verde escuro.&quot; ## [473] &quot;Árvore. Folhas coriáceas, discolores, face abaxial pubescente.; Floresta Estacional Semidecidual. ; HA&quot; ## [474] &quot;Árvore. Folhas simples, alternas, face abaxial discolor, simples, crassa.&amp;nf;; Floresta Ombrófila Densa.&quot; ## [475] &quot;Árvore. Frequencia alta. Flores cremes.&quot; ## [476] &quot;Árvore. Mata de terra firme. árvore.; mata de terra firme.&quot; ## [477] &quot;Árvore. Tronco circular de base dilatada. Ritidoma ocre e sob o ocre bordô, rígido, micro-escamoso, verrugoso. Lenticelas salientes, circulares, espocadas, dispersas, de ca. 5 mm, homogeneamente distribuídas. Alteraçao por estrias. Desprendimento por micro-escamas. Casca morta fina. Casca viva marrom-claro e bordô masi externamente. Oxidaçao lenta para marrom-claro, de 4 mm, odor forte. Alburno amarelado. Ráquis da inflorescencia amarelo-esverdeado; botoes florais verde-amarelados; flores com pétalas brancas, estames amarelos. árvore. tronco circular de base dilatada. ritidoma ocre e sob o ocre bordô, rígido, micro-escamoso, verrugoso. lenticelas salientes, circulares, espocadas, dispersas, de ca. 5 mm, homogeneamente distribuídas. alteração por estrias. desprendimento por micro-escamas. casca morta fina. casca viva marrom-claro e bordô masi externamente. oxidação lenta para marrom-claro, de 4 mm, odor forte. alburno amarelado. ráquis da inflorescência amarelo-esverdeado; botões florais verde-amarelados; flores com pétalas brancas, estames amarelos. ráquis da inflorescencia amarelo-esverdeado, botoes florais verde-amarelados, flores com pétalas brancas, estames amarelos solo argiloso, dossel, 18 cm dap. tronco circular de base dilatada. ritidoma ocre e sob o ocre bordô, rígido, micro-escamoso, verrugoso. lenticelas salientes, circulares, espocadas, dispersas, de +/- 5 mm, homogeneamente distribuída solo argiloso, dossel, 18 cm dap. tronco circular de base dilatada. ritidoma ocre e sob o ocre bordô, rígido, micro-escamoso, verrugoso. lenticelas salientes, circulares, espocadas, dispersas, de +/- 5 mm, homogeneamente distribuídas. alteração por estrias. desprendimento por micro-escamas. casca morta fina. casca viva marrom-claro e bordô mais externamente. oxidação lenta para marrom-claro, de 4 mm, odor forte. alburno amarelado. ráquis da inforescência amarelo-esverdeado; botões florais verde-amarelados; flores com pétalas brancas, estames amarelos.&quot; ## [478] &quot;Árvore.; Mata úmida&quot; ## [479] &quot;Árvore.; Mata úmida&quot; ## [480] &quot;Árvore.; Mata úmida árvore.; mata úmida.&quot; ## [481] &quot;Árvore.; Orla da mata&quot; ## [482] &quot;Árvore.Habitat: Terrestre&quot; ## [483] &quot;Árvore&amp;nf;Nome vulgar: Louro&quot; ## [484] &quot;Árvores com cercas de 12m altura na borda da mata, porém, comum no interior desta. Folhas elípticas-lanceoladas, velutinas, um tanto ferrugíneas, discolores. Inflorescencias terminais e axilares. Flores pardas, diminutas.; Floresta Um&quot; ## [485] &quot;Arvoreta , 4m alt., flores amareladas. Coleta de folhas para análises&quot; ## [486] &quot;Arvoreta ± 3.0m alt. Caule acinzentado. Frutos imaturos esverdeados. Freqüente. habitat:solo em grande parte arenoso. grande conjunto de serras e afloramentos rochosos. caatinga, área de tensao ecológica. neossolo litólico distrófico.; desc:arvoreta aprox. 3m de altura. caule acinzentado. frutos imaturos&quot; ## [487] &quot;Arvoreta 3-4m alt., frutos imaturos verdes.; Floresta Atlântica; HABITAT: Floresta Atlântica; DESC: Arvoreta 3-4m alt., frutos imaturos verdes.&quot; ## [488] &quot;Arvoreta 4m, flor creme. Encosta rochosa do morro&quot; ## [489] &quot;Arvoreta 5m alt., cálice vermelho; Floresta Atlântica; HABITAT: Floresta Atlântica; DESC: Arvoreta 5m alt., cálice vermelho&quot; ## [490] &quot;Arvoreta 9m. Dap 20cm. Fuste 3m. Flores esbranquiçadas. arvoreto 9 m. dap 20 cm. fuste 3 m. flores esbranquiçadas.&quot; ## [491] &quot;Arvoreta ca. 3 m de altura. Botoes cremes.HABITAT:Mata Atlântica em encosta.;&quot; ## [492] &quot;Arvoreta ca. 3,0 m, botoes florais esverdeados.; Cerrado (típico). Substrato areno-pedregoso. coleta: xls: spsfantigo; geografia: cerrado&amp;nf;;&quot; ## [493] &quot;Arvoreta ca. 4,0 m, flores amareladas.; Mata ciliar. Afloramento rochoso.&quot; ## [494] &quot;Arvoreta ca. 4,5 m, botoes florais esverdeados.; Mata ciliar.&amp;nf;Substrato areno-pedregoso.&quot; ## [495] &quot;Arvoreta ca. 4.0 m, frutos imaturos.; Cerrado Sujo. Substrato arenoso. coleta: cerrado sujo.&amp;nf;arvoreta 4m altura; frutos imaturos.; geografia: sítio da mao dos seis dedos.;;Arvoreta ca. 4.0 m, frutos imaturos.; Cerrado Sujo. Substrato arenoso.&quot; ## [496] &quot;Arvoreta ca. 4m alt., flores cremes&quot; ## [497] &quot;Arvoreta ca. 7m alt. Frutos verdes.&quot; ## [498] &quot;Arvoreta ca. de 3,5m de altura. Flores amarelas.HABITAT:Caatinga; arvoreta, ca. 3,5m. folhas discolores aromáticas, botoes amarelados, perianto alvo-amarelado. arvoreta, ca. de 3,5m de altura, folhas discolares aromáticas, botoes amarelados, perianto alvo-amarelado. arvoreta, ca. de 3,5m de altura, folhas discolares aromáticas, botoes amarelados, perianto alvo-amarelo. ambiente: caatinga arvoreta, ca. de3,5m de altura, folhas discolores aromáticas, botoes amarelos, perianto alvo-amarelado.; desc: arvoreta, ca. de3,5m de altura, folhas discolores aromáticas, botoes amarelos, perianto alvo-amarelado.&quot; ## [499] &quot;Arvoreta com +/- 3,5 de alt. Ramos acinzentado.Folhas cartáceas. Inflorescencia ferrugínea.Pré-frutos esverdeados .Planta aromática .Frequente.&quot; ## [500] &quot;Arvoreta com 1,80m de altura. Indivíduo n 44. Folhas discolores. Frequente.&quot; ## [501] &quot;Arvoreta com 2 m; (inflorescencia) frutescencia de cor creme amarelada retirada com uma película marrom; 3 amostras; coletada próximo a barragem da ZOO III. ; DE&quot; ## [502] &quot;Arvoreta de 2m de altura, flores cremes e aromáticas em terra firme e solo arenoso.&quot; ## [503] &quot;Arvoreta de 3m de altura com frutos imaturos verdes. Levantamento da campina e flora apícola (km-5).&quot; ## [504] &quot;Arvoreta de 4 m de altura; flores amarelas. Capoeira de terra firme de solo arenoso.&quot; ## [505] &quot;Arvoreta de 4 m de altura; flores cremes. Capoeira; solo arenoso.&quot; ## [506] &quot;Arvoreta de 4m de altura com botoes florais creme esverdeados e flores creme.; Mata de beira de rio.&quot; ## [507] &quot;Arvoreta de 4m de altura, frutos imaturos. Capoeira de solo argiloso.&quot; ## [508] &quot;Arvoreta de 4m de altura. Frutos verdes.&quot; ## [509] &quot;Arvoreta de 4m de altura. Frutos verdes. Terra firme e solo arenoso.&quot; ## [510] &quot;Arvoreta de 5 m de altura, flores cremes, botoes florais esverdeados.&quot; ## [511] &quot;Arvoreta de 5 m de altura; frutos imaturos, verdes. Mata de terra firme, solo argilo-arenoso.&quot; ## [512] &quot;Arvoreta de 5 m de altura; frutos verdes; folhas alternas.&quot; ## [513] &quot;Arvoreta de 5 m x 10 cm de diamêtro; flores amarelo-esverdeado. Madeira creme, pouco pesada; casca esverdeada. Solo arenoso. X = 5426 arvoreta de 5 m x 10 cm de diametro; flores amarelo-esverdeado. madeira creme, pouco pesada; casca esverdeada. solo arenoso.&amp;nf;x = 5426&quot; ## [514] &quot;Arvoreta de 5m de altura com botoes florais creme amarelados.; Mata de beira de rio.&quot; ## [515] &quot;Arvoreta de 5m de altura, inflorescencia axilares brancas sem perfume. Folhas alternas. Madeira dura, amarelo-clara perfumada. Terra firme, solo argilo-arenoso. Capoeira alta de terra firme e mata derrubada. arvoreta de 5m de altura, inflorescência axilares brancas sem perfume. folhas alternas. madeira dura, amarelo-clara perfumada. terra firme, solo argilo-arenoso. capoeira alta de terra firme e mata derrubada.&quot; ## [516] &quot;Arvoreta de 6 m de altura; botoes florais, amarelo-esverdeado. arvoreta de 6 m de altura; botões florais, amarelo-esverdeado.;Arvoreta de 6 m de altura; botoes florais, amarelo-esverdeado.&quot; ## [517] &quot;Arvoreta de 6 m de altura; flores esverdeadas; botoes floral esverdeados. Capoeira; solo argiloso. arvoreta de 6 m de altura; flores esverdeadas; botões floral esverdeados. capoeira; solo argiloso. arvoreta de 6m de altura; flores esverdeadas e botões florais esverdeados. capoeira de terra firme e solo argiloso. exemplar obtido por doaçao (inpa - rg. 95429 ). arvoreta de 6m de altura; flores esverdeadas e botoes florais esverdeados. capoeira de terra firme e solo argiloso.&quot; ## [518] &quot;Arvoreta de 6 m de altura; inflorescencia jovem; frutos imaturos, verde claros; folhas vistosas, alternas. Capoeira alta de terra firme, solo areno-argiloso. arvoreta de 6 m de altura; inflorescência jovem; frutos imaturos, verde claros; folhas vistosas, alternas. capoeira alta de terra firme, solo areno-argiloso.&quot; ## [519] &quot;Arvoreta de 6m de altura no igapó. Frutos verdes.&quot; ## [520] &quot;Arvoreta de 6m de altura, frutos imaturos verdes. Mata alta de terra firme e solo argilo-arenoso.&quot; ## [521] &quot;Arvoreta de 6m de altura, inflorescência jovem amarela, frutos imaturos jovens verdes. Mata de terra firme e solo argiloso úmido.&quot; ## [522] &quot;Arvoreta de 6m de altura; com botoes jovens amarelados. Adjacencia.&quot; ## [523] &quot;Arvoreta de 6m de altura; flores cremes. Solo argiloso com afloramento rochoso.&quot; ## [524] &quot;Arvoreta de 6m de altura; folhas alternas grandes, inflorescencia terminal, botoes brancos-esverdeados. Capoeira alta de terra firme e solo argilo-arenoso. arvoreta de 6m de altura; folhas alternas grandes, inflorescência terminal, botões brancos-esverdeados. capoeira alta de terra firme e solo argilo-arenoso.&quot; ## [525] &quot;Arvoreta de 6m de altura. Frutos verdes. Mata de terra firme e solo arenoso.&quot; ## [526] &quot;Arvoreta de 7 m de altura; flores amareladas. Terra firme.&quot; ## [527] &quot;Arvoreta de 7 m de altura; folhas alternas; inflorescencia em panícula, corola gamopétala creme.&quot; ## [528] &quot;Arvoreta de 7 m de altura; folhas alternas; inflorescência em panícula, corola gamopétala creme.&quot; ## [529] &quot;Arvoreta de 7 m de altura; frutos imaturos verdes. Mata de terra firme, solo argiloso.&quot; ## [530] &quot;Arvoreta de 7 m de altura; frutos imaturos verdes. Mata de terra firme, solo argiloso.&quot; ## [531] &quot;Arvoreta de 7m de altura; frutos imaturos verdes.&quot; ## [532] &quot;Arvoreta de 8 m de altura com flores amarelas.&quot; ## [533] &quot;Arvoreta de 8 m de altura; flores amareladas; frutos imaturos verdes. Capoeira de terra firme; solo argiloso.&quot; ## [534] &quot;Arvoreta de 8 m de altura; flores em botoes cremes; frutos imaturos verdes. Capoeira de terra firme, solo argilo-arenoso.&quot; ## [535] &quot;Arvoreta de 8m d ealtura. Botoes florais esverdeados. Mata de terra firme e solo argiloso.&quot; ## [536] &quot;arvoreta de 8m de alt, flores amarelas, botoes esverdeados arvoreta de 8m de alt, flores amarelas, botões esverdeados&quot; ## [537] &quot;Arvoreta de mais ou menos 4m de altura, flores cremes, inflorescencia e botoes florais cremes aromáticas.&quot; ## [538] &quot;Arvoreta de mais ou menos 4m de altura, flores cremes, inflorescência e botões florais cremes aromáticas.&quot; ## [539] &quot;Arvoreta em touceira densa; flores cremes. Frequente na capoeira de solo arenoso, perto da campina.&quot; ## [540] &quot;Arvoreta lenhosa com3,5m. Indivíduo n°2467. Folhas verdes discolores, material vegetativo.&quot; ## [541] &quot;Arvoreta pouco ramificada 3m. Flores alvas.&quot; ## [542] &quot;Arvoreta, ca. 4m, flor creme, inflorescencia e botoes florais cremes, aromáticas.&quot; ## [543] &quot;Arvoreta, ca. 5m. Folhas verde discolores, brilhosas. Inflorescencias verde, flores amareladas arvoreta, ca. 5m. folhas verde discolores, brilhosas. inflorescências verde, flores amareladas;Arvoreta, ca. 5m. Folhas verde discolores, brilhosas. Inflorescências verde, flores amareladas&quot; ## [544] &quot;Arvoreta, em floraçao, ca. 2.5 m. de altura, flores cremes, frutos ausentes&quot; ## [545] &quot;Arvoreta, flor branca aromática&quot; ## [546] &quot;Arvoreta; 3,0 m; frutos imaturos; base do revestimento em forma de cálice de cor marrom-escuro; na proximidade do ápice do ramo presença de fungos (cochonilhas). ; DE&quot; ## [547] &quot;Arvoreta; 3,0 m; pequenos frutos imaturos verde-cremes. PIBIC Jr. 2009/2010.; Vertente. ; HA&quot; ## [548] &quot;Arvoreta; 5 m; frutos com cálice amarronzados e frutos imaturos verdes; tronco cilíndrico. ; DE&quot; ## [549] &quot;Arvoreta; 7,0 m; frutos imaturos verdes com cúpula verde amarronzada. ; DE&quot; ## [550] &quot;Arvoreta; flor branca.&quot; ## [551] &quot;Arvoreta; frutos imaturos verdes e maduros roxos; material conservado com álcool.; Sub-bosque. ; HA&quot; ## [552] &quot;Arvoreta; Tabuleiro litorâneo&quot; ## [553] &quot;Arvoreta.&quot; ## [554] &quot;Arvoreta.&quot; ## [555] &quot;arvoreta. 2.5. m. botoes verdes, cálice castanho-claro, flores com pétalas brancas.; Mata (borda) ; HA&quot; ## [556] &quot;arvoreta. 2.5. m. flores com pétalas creme.; borda da mata ; HA&quot; ## [557] &quot;arvoreta. 6. m. botoes florais e flores com pétalas creme.; Mata (borda) ; HA&quot; ## [558] &quot;Arvoreto 5 m. Frutos verdes.&quot; ## [559] &quot;ARVOREZINHA COM RAMOS ESCANDENTED . FRUTOS COM RECEPTÁBULOS AVERMELHADOS , IMATUROS VERDES&quot; ## [560] &quot;Arvorezinha de 4-5m. Flores cremes. amostra quimica&quot; ## [561] &quot;Arvorezinha de 5m alt., 5 cm diam., flor branca&quot; ## [562] &quot;Árvrore 14 m. Frutos verdes. Interior da mata.&quot; ## [563] &quot;Beira de estrada, antropizada. Contato Savana Floresta/ Floresta Estacional/ Floresta Ombrófila. Arbóreo. Altura de 8,0m e com fruto imaturo verde.&quot; ## [564] &quot;Bl. creme. Schwarzwasser.&quot; ## [565] &quot;Botoes florais creme. Área de influencia direta da UHE Jirau.&quot; ## [566] &quot;Botões florais puberulentos. àrvore de 5-6m. Solo arenoso. Floresta semidecidual botoes florais puberulentos. rrvore de 5-6m. solo arenoso. floresta semidecidual&quot; ## [567] &quot;Botoes florais verdes.&quot; ## [568] &quot;Broto de árvore; flores cremes; frutos pretos. Mata de terra firme, argilosa.&quot; ## [569] &quot;ca. 12m de altura e 40cm de CAP.&quot; ## [570] &quot;Caatinga arbórea.&quot; ## [571] &quot;Cálice verde.&quot; ## [572] &quot;Cerca de 10 m de altura e 137 cm de CAP.&quot; ## [573] &quot;Cerrado&quot; ## [574] &quot;Cerrado / floresta ombrófila.&quot; ## [575] &quot;Cerrado sensu stricu. Solo arenoso.&quot; ## [576] &quot;Cheiro forte na casca e folhas. Verdes discolores. Botoes amarelos. Ausentes&quot; ## [577] &quot;Coleta de material estérial do projeto de doutorado do professor Aldenir.; Arvoreta; 6 m; CAP 16 cm; folhas jovens com face abaxial pratiada; nervuras de cor amarelada e ramos sulcados.; Platô. ; HA&quot; ## [578] &quot;COLETA: Árvore 11m; corola amarelo escuro; estames passados escurecidos.;&quot; ## [579] &quot;COLETA: Cerradao&amp;nf;Liana semi-ciófila; cálice avinosado; frutos imaturos verdes; GEOGRAFIA: Área da Sede Santa Luzia; solo argilo-arenoso.&amp;nf;Relevo plano.; folhas cor verde, cartáceas, presença de galhas escuras na superficie abaxial da folha. cálice avinosado. frutos imaturos cor verde. ocasional; cerradao; habitat: cerradao; desc: folhas cor verde, cartáceas, presença de galhas escuras liana semi-ciófita; folhas cor verde, cartáceas: presença de galhas escuras na superfície abaxial da folha; cálice avinosado; frutos imaturos cor verde. ocasional.&quot; ## [580] &quot;COLETA: Cerrado arenoso &amp;nf;Arbusto 80cm, flores bege.; GEOGRAFIA: A 13km do povoado Chapada Gaúcha; relevo plano. Margem de estrada de terra.;&quot; ## [581] &quot;COLETA: Cerrado com solo arenoso.&amp;nf;Semi arbusto formando moitas; flores cor amarelo claro.;&quot; ## [582] &quot;COLETA: Cerrado stricto sensu&amp;nf;Ex VIC-24000&amp;nf;Árvore 12m; flores de corola cor creme.;&quot; ## [583] &quot;COLETA: Cerrado&amp;nf;Solo com textura arenosa/argilosa; relevo plano.&amp;nf;Subarbusto heliófilo 40cm altura; flores de cálice verde e corola alvacenta.; habitat:cerrado. solo arenoso/argiloso, relevo plano.; desc:subarbusto heliófilo aprox. 40cm de altura; caule com casca lisa; folhas crassas, discolores verdes; flor com cálice verde e corola alvacenta, anteras creme.;;HABITAT:Cerrado. Solo arenoso/argiloso, relevo plano.; DESC:Subarbusto heliófilo aprox. 40cm de altura; caule com casca lisa; folhas crassas, discolores verdes; flor com cálice verde e corola alvacenta, anteras creme.;&quot; ## [584] &quot;COLETA: Flores brancas com glândulas vermelhas.&amp;nf;Árvores 11m.; GEOGRAFIA: (R.23, Praça 1), aol lado da Av. Jacarandas, próximo r Rua das Nogueiras.;&quot; ## [585] &quot;COLETA: Flores pequenas, esbranquiçadas a cremes.&amp;nf;Árvore 10m; GEOGRAFIA: (R.23, praça 1) ao lado da Av. dos Jacarandas, entre a Rua das Aroeiras e a Rua das Nogueiras.;&quot; ## [586] &quot;COLETA: Fragmento Florestal, interior da mata.&amp;nf;Árvore 14m altura; frutos; GEOGRAFIA: Propriedade do Sr. Paulo Sick;&quot; ## [587] &quot;COLETA: Fragmento Florestal, interior da mata.&amp;nf;Árvore 20m altura; frutos; GEOGRAFIA: Propriedade do Sr. Paulo Sick;&quot; ## [588] &quot;COLETA: Mata Atlântica.&amp;nf;Árvore 8m;&quot; ## [589] &quot;COLETA: Mata Atlântica.&amp;nf;Árvore, parte inferior do fruto vermelha.; GEOGRAFIA: Arvore 4012.;&quot; ## [590] &quot;COLETA: Mata de Altitude&amp;nf;Árvore 12m; frutos imaturos verdes.; GEOGRAFIA: Beira da mata;&quot; ## [591] &quot;COLETA: Mata de Galeria nao inundável&amp;nf;Árvore 12m altura; frutos imaturos verdes.;&quot; ## [592] &quot;COLETA: Mata estacional antropizada.&amp;nf;Arbusto 1m altura; flores amarelo esverdeadas.; GEOGRAFIA: A 35km L de Morro do Chapéu.; mata estacional antropizada.&quot; ## [593] &quot;COLETA: Mata secundária.&amp;nf;Árvore 3m; frutos verde escuros, cúpula avermelhada.; GEOGRAFIA: Beira da Lagoa Dom Helvétio.;&quot; ## [594] &quot;COLETA: Vegetaçao arbustivo-arbórea aberta.&amp;nf;Árvore 5m, corola branca, frutos imaturos verdes.; GEOGRAFIA: A ca. De 28km oeste na BR-430.&amp;nf;Beira de estrada.; vegetaçao arbustivo-arbórea aberta. beira de estrada.&quot; ## [595] &quot;COLETA: XLS: SPSFAntigo;&quot; ## [596] &quot;COLETA: XLS: SPSFAntigo; GEOGRAFIA: cerrado&amp;nf;;&quot; ## [597] &quot;COLETA: XLS: SPSFAntigo&amp;nf;Árvore; GEOGRAFIA: trilha do vinhatico;&quot; ## [598] &quot;COLETA: XLS: SPSFAntigo&amp;nf;Árvore. Exemplar ns 19374; GEOGRAFIA: Mata;&quot; ## [599] &quot;COLETA: XLS: SPSFAntigo&amp;nf;Floresta secundária&amp;nf;Árvore flores creme;&quot; ## [600] &quot;Cúpulas imaturas verde-marrons, ramos da inflorescencia verdes. Cheiro típico de Lauraceae na entrecasca dos ramos.; Árvore 4m. Fruto imaturo verde.; .; HABITAT: .; DESC: Árvore 4m. Fruto imaturo verde.&quot; ## [601] &quot;DESC:Arvoreta 2,2m; flor creme-esverdeada; cupulos persistentes negros; botoes florais creme-esverdeados.;&quot; ## [602] &quot;DESC:Subarbusto 40cm; fruto imaturo verde. Rara no local.;&quot; ## [603] &quot;Erva ereta. Folhas papiráceas. Flores com corola branca.&quot; ## [604] &quot;Espécie ameaçada de extinçao (Em perigo). material sem dados da planta. solo pobre, arenoso. formaçao campina. material sem dados da planta. solo pobre, arenoso. formação campina.&quot; ## [605] &quot;Estrada Manaus - Carcaraí Km 39, Reserva Experimental de Silvicultura Tropical. Terra firme, solo arenoso campina. Arvoreta de 5m de altura, botoes florais.&quot; ## [606] &quot;Estrada Manaus - Carcaraí Km 44. Estaçao Experimental de Silvicultura Tropical. Terra firme, solo arenoso, campina. Arvoreta de 5m de altura, frutos jovens. estrada manaus - carcaraí km 44. estação experimental de silvicultura tropical. terra firme, solo arenoso, campina. arvoreta de 5m de altura, frutos jovens.;Estrada Manaus - Carcaraí Km 44. Estaçao Experimental de Silvicultura Tropical. Terra firme, solo arenoso, campina. Arvoreta de 5m de altura, frutos jovens.&quot; ## [607] &quot;Flores alvas. Floresta preservada, dossel médio 20m.&quot; ## [608] &quot;Flores alvas. Mata de terra firme.&quot; ## [609] &quot;Flores amarelas com perfume agradável.&quot; ## [610] &quot;Flores amarelas solo arenoso. árvore. ritidoma verrucoso, por lenticelas elípticas horizontais, salientes, as vezes formando linhas transversais proeminentes, espocadas (fendidas verticalmente), dispersas. tronco inclinado, de 10 cm dap, 8 m de altura com rebrotas n; de solo arenoso. ritidoma verrucoso, por lenticelas elípticas horizontais, salientes, as vezes formando linhas transversais proeminentes, espocadas (fendidas verticalmente), dispersas. tronco inclinado, de 10 cm dap, 8 m de altura com r solo arenoso. ritidoma verrucoso, por lenticelas elípticas horizontais, salientes, as vezes formando linhas transversais proeminentes, espocadas (fendidas verticalmente), dispersas. tronco inclinado, de 10 cm dap, 8 m de altura com rebrotas na base. ao corte: casca morta fina, cobre camada verde fina; casca viva bege claro, odor suave, de 3 mm, pouco contrastante alburno. flores amarelas.&quot; ## [611] &quot;Flores amarelas, pedicelo verde&quot; ## [612] &quot;Flores pequenas, amarelo-claro, com perfume. flores pequenas, de cor amarelo-claro com perfume.&quot; ## [613] &quot;Floresta Atlântica. Arbóreo. Coletada no Porto Capim.; DESC: Floresta Atlântica. Arbóreo. Coletada no Porto Capim.&quot; ## [614] &quot;Floresta estacional&quot; ## [615] &quot;Floresta estacional decidual.&quot; ## [616] &quot;Floresta estacional semidecidual submontana.&quot; ## [617] &quot;Floresta Estacional Semidecidual Submontana. ; HA&quot; ## [618] &quot;Floresta Estacional Semidecidual Submontana. ; HA&quot; ## [619] &quot;Floresta estacional troca de material.; árvore ca 8,0 m. folhas cartáceas, discolores com a face abaxial verde claro, nervuras ferrugíneas. botoes amarelos.; floresta estacional. ; ha;Troca de material.; Árvore ca 8,0 m. Folhas cartáceas, discolores com a face abaxial verde claro, nervuras ferrugíneas. Botoes amarelos.; Floresta Estacional. ; HA&quot; ## [620] &quot;Floresta Ombrófila Densa&quot; ## [621] &quot;Floresta Ombrófila Densa&quot; ## [622] &quot;Floresta Ombrófila Densa&quot; ## [623] &quot;Floresta Ombrófila Densa&quot; ## [624] &quot;Floresta Ombrófila Densa&quot; ## [625] &quot;Floresta ombrófila densa em regeneraçao.&quot; ## [626] &quot;Floresta Ombrófila Montana&quot; ## [627] &quot;Floresta Ombrófila Montana&quot; ## [628] &quot;Floresta ombrófila.&quot; ## [629] &quot;Floresta ombrófila.&quot; ## [630] &quot;Floresta ombrófila.&quot; ## [631] &quot;Floresta ombrófila.&quot; ## [632] &quot;Floresta ombrófila.&quot; ## [633] &quot;Floresta ombrófila.&quot; ## [634] &quot;Floresta ombrófila.&quot; ## [635] &quot;Flws. yellow. Male.&quot; ## [636] &quot;Folhas alternas, glabras.&quot; ## [637] &quot;Folhas coriáceas, discolores,inflorescencia axilar, ferruginosa, raque esverdeadao, botoes creme, Doaçao do Projeto Flora da Bahia. Herbário Alexandre Leal Costa - ALCB (48550). Projeto Financiado pelo CNPq. mata.&quot; ## [638] &quot;Folhas simples, alternas, alongadas, oblongas, cheiro agradável. P8 I36&quot; ## [639] &quot;fruto maduro&quot; ## [640] &quot;Frutos ainda jovens&quot; ## [641] &quot;frutos verdes&quot; ## [642] &quot;Grand arbor.&quot; ## [643] &quot;HABITAT:Caatinga. Cerrado, arbóreo-arbustivo.; DESC:Árvore apro. 4m de altura. Caule cinzento. Frutos enegrecidos, com receptáculo do fruto avermelhado.;&quot; ## [644] &quot;HABITAT:Cerrado.; DESC:Árvore, frutos verdes.;&quot; ## [645] &quot;Ident. ant.: o. organensis (Meis.) Mez&quot; ## [646] &quot;Inflorescencia com pedúnculo verde-limao, flores com pedicelos, cálice e corola branco-amarelados, androceu e gineceu amarelos, cheiro doce agradável inflorescencia com pedúnculo verde-limao. flores com pedicelos, cálice e corola branco-amarelados. androceu e gineceu amarelos, cheiro doce agradável. inflorescência com pedúnculo verde-limão. flores com pedicelos, cálice e corola branco-amarelados. androceu e gineceu amarelos, cheiro doce agradável.;Inflorescencia com pedúnculo verde-limao. Flores com pedicelos, cálice e corola branco-amarelados. Androceu e gineceu amarelos, cheiro doce agradável.&quot; ## [647] &quot;Lago do Castanho - Mirim. arvoreta de 3m de altura acima do nível da água do igapó, frutos em fase inicial de desenvolvimento.&quot; ## [648] &quot;Linha de transmissao Jirau/Sts Antonio.&quot; ## [649] &quot;Linha de transmissao Jirau/Sts Antonio.&quot; ## [650] &quot;Localizado em solo areno argiloso-pedregoso. Habitat:Terrestre no interior da mata. Cálice persistente vináceo. Ind. 2216. Parcela 45.; Árvore de 7,0 m. Folhas discolor, cartáceas, glabras. Frutos imaturos verdes.; Floresta Estacional (Mata de Cipó) ; HA&quot; ## [651] &quot;Localizado em solo areno argiloso-pedregoso. Habitat:Terrestre no interior da mata. Exudado incolor pegajoso, cheiro amargoso. Ind. 1533. Parcela 31.; Árvore perfilhada de 7,0 m, 7,0 m e 7,0 m. Folhas levemente discolor, crassas.; Floresta Estacional; HA&quot; ## [652] &quot;Localizado em solo areno argiloso-pedregoso. Habitat:Terrestre no interior da mata. Ind. 1290. Parcela 26.; Árvore de 7,0 m. Folhas alternas, coriáceas, levemente discolor.; Floresta Estacional (Mata de Cipó) em zona de transiçao. ; HA&quot; ## [653] &quot;Localizado em solo areno argiloso-pedregoso. Habitat:Terrestre no interior da mata. Ind. 1580. Parcela 32.; Árvore perfilhada de 5,0 m. Folhas alternas, discolor, crassas.; Floresta Estacional (Mata de Cipó) em zona de transiçao. ; HA&quot; ## [654] &quot;Localizado em solo areno argiloso-pedregoso. Habitat:Terrestre no interior da mata. Ind. 2208. UTM: 8457360.; Árvore de 8,0 m. Folhas crassas, discolor.; Floresta Estacional (Mata de Cipó) em zona de transiçao. ; HA&quot; ## [655] &quot;Localizado em solo areno argiloso-pedregoso. Habitat:Terrestre no interior da mata. Ind. 2360. Parcela 50.; Árvore de 8,0 m. Folhas alternas, discolor, crassas, glabras.; Floresta Estacional (Mata de Cipó) em zona de transiçao. ; HA&quot; ## [656] &quot;Mata Atlântica&quot; ## [657] &quot;Mata Atlântica&quot; ## [658] &quot;Mata Atlântica&quot; ## [659] &quot;Mata Atlântica (Floresta Estacional Semidecidual); HABITAT: Mata Atlântica (Floresta Estacional Semidecidual)&quot; ## [660] &quot;Mata Atlântica de encosta.&quot; ## [661] &quot;Mata Atlântica em vale de tabuleiro.&quot; ## [662] &quot;Mata Atlântico, beira da lagoa.&quot; ## [663] &quot;Mata Ciliar&quot; ## [664] &quot;Mata ciliar.&quot; ## [665] &quot;Mata de Chaves.Borda com canavial.; HABITAT: Mata de Chaves.Borda com canavial.&quot; ## [666] &quot;Mata de terra firme.&quot; ## [667] &quot;Mata em leito de córrego.&quot; ## [668] &quot;Mata ombrófila secundária. Solo arenoso.&quot; ## [669] &quot;Mata perenifólia sob latosolos&quot; ## [670] &quot;Material sem dados da planta e sem data de coleta.&quot; ## [671] &quot;Material sem dados da planta.&quot; ## [672] &quot;Material sem dados da planta.&quot; ## [673] &quot;Município de Humaitá, Pixuna, Km 40 da Rodovia Transamazônica. Campina, flores alvas.&quot; ## [674] &quot;Município de Oriximiná, rio Paru do Oete, entre cachoeira pancada e rio Trombetas. Campina, solo arenoso úmido. Aarvoreta de 7m de altura, frutyos imaturos de cor verde.&quot; ## [675] &quot;Município de Oriximiná, rio Paru do Oete, entre cachoeira pancada e rio Trombetas. Campina, solo arenoso úmido. Aarvoreta de 7m de altura, frutyos imaturos de cor verde.&quot; ## [676] &quot;Municípiuo de Oriximiná, rio Trombetas, margem esquerda, a 5Km abaixo da cachoeira Porteira. Mata de terra firme, solo argiloso úmido. Arvoreta de 7m de altura, inflorescência amarelada.&quot; ## [677] &quot;Muy alto y ranudo; hoja verde clara; flor amarilla; fruto ovalado, verde claro.&quot; ## [678] &quot;old secondary forest with few primary remnants&quot; ## [679] &quot;open uplands, \\\\muena\\\\, 3 m, cupule green, fr. green.&quot; ## [680] &quot;pequena árvore de formaçao rupestre em frutos. pequena árvore de formação rupestre em frutos. pequena árvore de formação rupestre em frutos. pequena árvore de formaçao rupestre em frutos.; sem dados.;Pequena árvore de formaçao rupestre em frutos.; Sem dados.&quot; ## [681] &quot;Pétalas creme, anteras amarelada. Área de influencia direta (canteiro).&quot; ## [682] &quot;Planta c/ 6m de altura. N. V - Canela Sabiá.&quot; ## [683] &quot;Planta com 6,0 metros de altura. Fruto e cáile verdes.&quot; ## [684] &quot;Planta com fruto.&quot; ## [685] &quot;Planta com grossa casca fissurada de coloraçao cinza. A espécie possuiindivíduos de grande porte (para o padrao da regiao), altos e grossos no DAP. Doaçao do Herbário do IBGE - Reserva Ecológica do IBGE. Plantas da Bahia.&quot; ## [686] &quot;Pole ca. 1.3 m. Receptacle and fruits green. Mata de terra firme.&quot; ## [687] &quot;Pole ca. 1.5-2 m; fruits and receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits. pole ca. 1.5-2 m; fruits and receptacle green. disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.; disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.;Pole ca. 1.5-2 m; fruits and receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits.&quot; ## [688] &quot;Pole-like tree 1.5-2.5m tall. Receptacle green, fruits light green. Pickled fruits &amp; flowers. Trail on the way back from the campo. Lecythis - Coumarouma forest.&quot; ## [689] &quot;Possui acúleos.&quot; ## [690] &quot;Restinga. Floresta.&quot; ## [691] &quot;Rio Trombetas, Monte Branco, jazida de Bauxita de Alcoa - Mineraçao, mata de campina, solo arenoso. Árvore de 3-6m, flores alvas na campina. rio trombetas, monte branco, jazida de bauxita de alcoa - mineração, mata de campina, solo arenoso. árvore de 3-6m, flores alvas na campina.&quot; ## [692] &quot;Secondary vegetation on road to airstrip. Tree to 10m tall; cupule green, immature fruits greenish-yellow.&quot; ## [693] &quot;Sem dados. sem dados.; sem dados.&quot; ## [694] &quot;Shrub 2,5 m tall in disturbed white sand near gravel pits; flowers pale yellow. shrub 2,5 m tall in disturbed white sand near gravel pits; flowers pale yellow. ; de&quot; ## [695] &quot;Shrub 20 ft. high, 3 inches in dia.&quot; ## [696] &quot;Shrub 3 1/2 tall. Brushy clearing and secondary rain forest, sandy soil.&quot; ## [697] &quot;Shrub 3 m tall; flowers cream.&quot; ## [698] &quot;Shrub 3 m. Immature fruit (includng cupule) green.&quot; ## [699] &quot;Shrub 3m tall to tree 10m tall in forest margin. Flowers dirty yellow. shrub 3m, to tree 10, tall in forest margin, flowers dirty yellow&quot; ## [700] &quot;Shrub 5 m tall; brances and leaves ascendeing; stems carinate; midveins yellowish; inflorescence ascending with green axes; flores yellowish.&quot; ## [701] &quot;Shrub ca. 2m tall. Receptacle dark green. Fruits light green. Flowers cream-white. Flowers in alcohol.&quot; ## [702] &quot;Shrub to 2 m. high.&quot; ## [703] &quot;Shrub, 2 m tall; corolla green. Capoeira.&quot; ## [704] &quot;Shrub, 3 m tall; cupule dark green, fruit light green.&quot; ## [705] &quot;Shrub, 3 m tall; cupule dark green, fruit light green. Capoeira on white sand.&quot; ## [706] &quot;Shrub. Brushy clearings and secondary rain forest, sandy soil.&quot; ## [707] &quot;Shrubs and tree of indeterminable size pendent or leaning out over cliff; fruit green; flowers greenish-white. Common pole along the river. N to NE bank-shale cliffs to terra firme.&quot; ## [708] &quot;Shruv, 2 m tall; fruit green.&quot; ## [709] &quot;Small tree 5 m; flowers cream.&quot; ## [710] &quot;Small tree 5-6 m; flowers yellowish; receptacle red. Riverbank and cliff vegetation.&quot; ## [711] &quot;Small tree to 10 m. tall, young stems strongly alate.&quot; ## [712] &quot;Small tree to 4 m. tall. Flowers white, fragrant.&quot; ## [713] &quot;Small tree, 5 m high. Leaves glossy green above, greyish sheen beneath. Terminal inflorescence; flowers yellow. perianth trimerous, stamens numerous.&quot; ## [714] &quot;Small tree; 4 cm. dbh.&quot; ## [715] &quot;Término coleta 02.04.1979&quot; ## [716] &quot;Terrestre, arbórea, fruto maduro e cor roxa, fruto imaturo de cor verde, exsudaçao incolor, descamaçao ausente, fuste cilíndrico, superfície das casca áspera, altura total 10m.altura do fuste 6m, cap fuste 68cm, diâmetro copa 5m, exsudaçao seiva. terrestre, arbórea, fruto maduro e cor roxa, fruto imaturo de cor verde, exsudação incolor, descamação ausente, fuste cilíndrico, superfície das casca áspera, altura total 10m.altura do fuste 6m, cap fuste 68cm, diâmetro copa 5m, exsudação seiva.;Terrestre, arbórea, fruto maduro e cor roxa, fruto imaturo de cor verde, exsudação incolor, descamação ausente, fuste cilíndrico, superfície das casca áspera, altura total 10m.altura do fuste 6m, cap fuste 68cm, diâmetro copa 5m, exsudação seiva.&quot; ## [717] &quot;Tierra firma; lomas de 30-50 m, de arcilla rojiza. Árbol de 20 m. Flores amarillentas, pétalos erectos. Corteza oscura, en estado juvenil las ramas tienen alas;Árbol de 20 m. Flores amarillentas, pétalos erectos. Corteza oscura, en estado juvenil las ramas tienen alas&quot; ## [718] &quot;Trabalho de Conclusao de Curso&quot; ## [719] &quot;Track from Km 63, Manaus - Itacoatiara Road. Savanna forest on white sand. Treelet, 4m tall. Flowers white.&quot; ## [720] &quot;Tree # 2685, 14-15m; fruit lighter green in darker green cup.&quot; ## [721] &quot;Tree +- tall, leaves coriaceous, glossy and dark green above, lustrous pale brown beneath, flower pale green&quot; ## [722] &quot;Tree 10 m, flowers cream.&quot; ## [723] &quot;Tree 10 m., flowers white, fruits black with red cupule.&quot; ## [724] &quot;Tree 10m tall x 15cm daiemter. Fruit green. Primary forest.&quot; ## [725] &quot;Tree 10m tall. Flowers cream. Fruit ( in cups ) green. Terra firme; high forest near black water.&quot; ## [726] &quot;Tree 15 m, diam. 20 cm. Bark dark brown warty lenticls and looping pattern of fine ridges from trunk to twigs. Inner bark cream darkening to orange brown, faint aromatic smell. Wood white. Mature fruit black, red cupule. Terra firme tree 15 m, diam. 20 cm. bark dark brown warty lenticls and looping pattern of fine ridges from trunk to twigs. inner bark cream darkening to orange brown, faint aromatic smell. wood white. mature fruit black, red cupule. terra firme forest on yellow clay latosol.&quot; ## [727] &quot;Tree 15 m, flowers white&quot; ## [728] &quot;Tree 15 m. tall, 80 cm. circum. fls. minute; tepals yellow; stamens and stigma brown.&quot; ## [729] &quot;Tree 15-25m, fls cream&quot; ## [730] &quot;Tree 16 ft. high, 4 inches in diameter.&quot; ## [731] &quot;Tree 18. bole 12m, straight, cylindrical. Fruits, flower small&quot; ## [732] &quot;Tree 18m tall, flowers cream.&quot; ## [733] &quot;Tree 18m tall, flowers greenish-white. Occasional. Edge of forest. Hilly forest on terra firme.&quot; ## [734] &quot;Tree 2.5m tall. Buds cream.&quot; ## [735] &quot;Tree 20m tall x 40cm diameter, cupule dark green, fruit pale green. tree 20m tall x 40cm diameter, cupule dark green, fruit pale green. forest on terra firme.;Tree 20m tall x 40cm diameter, cupule dark green, fruit pale green. Forest on terra firme.&quot; ## [736] &quot;Tree 30 ft. high, 5 inches in dia. tree 50 ft. high, 6 inches in dia.&quot; ## [737] &quot;TREE 30 M X 80 CM DIAM. CUPULE DARK GREEN, FRUIT PALE GREEN.&quot; ## [738] &quot;Tree 4 meters&quot; ## [739] &quot;Tree 5 m. tall; fruit green.&quot; ## [740] &quot;Tree 5m tall, cupule red, fruit green turning red.&quot; ## [741] &quot;TREE 6 M X 10 CM DIAM, BUDS GREEN.&quot; ## [742] &quot;Tree 6 m. Flowers greenish-white.&quot; ## [743] &quot;Tree 70 ft. high, 8 inches in diameter.&quot; ## [744] &quot;Tree 8 m tall; inflorescence yellow, very fragrant. Margins of forest on terra firme.&quot; ## [745] &quot;Tree 8 m, flowers whitish.&quot; ## [746] &quot;Tree 8m tall, perianth greenish-white, outer whorl of stamens pale green, inner whorl of stamens orange, stigma black. Occasional. Riverside vegetation, riverside vegetation, river level between high and low water.&quot; ## [747] &quot;TREE CA 5 M. FRUITS LIGHT GREEN, RECEPTACLE DARKER GREEN. FLOWERS CREAM WHITE.&quot; ## [748] &quot;Tree ca. 2.5-3 m; flowers cream-white. Disturbed roadside margins in tall forest, terra firme; laterized clay with sand deposite. tree ca. 2.5-3 m; flowers cream-white. disturbed roadside margins in tall forest, terra firme; laterized clay with sand deposite.; disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.&quot; ## [749] &quot;Tree ca. 3 m; fruits green, becoming red-tinged; receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits. tree ca. 3 m; fruits green, becoming red-tinged; receptacle green. disturbed roadside margins in tall forest, terra firme. laterized clay with sand deposits.; disturbed roadside margins in tall forest, terra firme. laterized clay wit tree ca. 3 m. fruits green, becoming red-tinged; recepctacle green.;Tree ca. 3 m; fruits green, becoming red-tinged; receptacle green. Disturbed roadside margins in tall forest, terra firme. Laterized clay with sand deposits.&quot; ## [750] &quot;Tree ca. 6m tall. Buds cream-white; fruits green. Terra firme ( Assoc.: Dipteryx, Bertholletia, Couratari, a few bamboos ).&quot; ## [751] &quot;Tree formerly 15 m. tall or more. Now broken off at top and resprouting. Petals cream.&quot; ## [752] &quot;Tree shrub juvenile... revisar;Tree shrub juvenile&quot; ## [753] &quot;tree shurb juvenile&quot; ## [754] &quot;Tree to 25m.tall, 70cm. DBH;wood medium soft. Bark smooth;lvs. glaucous beneath, not aromatic. Laurelillo. Fruit green. Individuals and timber volume per sq.Km. for trees over 30cm.DBH;8and 16 cu meters.&quot; ## [755] &quot;Tree to 4 m. Leaves coriaceous, mid green, paler beneath. Fruit green with paler elongate lenticels&quot; ## [756] &quot;tree to 6m tall: cupula green with white scales; youngs fruits light green.&quot; ## [757] &quot;Tree, 10 m; flowers greenish-brown; leaves sub-coriaceous, lustrous above; leaf rachis and young stem greenish-tan&quot; ## [758] &quot;Tree, 18 m. x 20 cm. diameter. Flowers green.&quot; ## [759] &quot;Tree, 18 m. x 25 cm. diameter. Flowers cream.&quot; ## [760] &quot;Tree, 5 m tall; cupule dark green; fruit light green. Swamp beside stream.&quot; ## [761] &quot;Tree, 5 m. x 8 cm. diameter. Buds green.&quot; ## [762] &quot;Tree, 6 m tall; fruit green. Secondary forest by airstrip.&quot; ## [763] &quot;Tree, 6 m tall; fruit pale green, cupule dark green.&quot; ## [764] &quot;Tree, 6 m tall; petals yellow, stames yellow; fruit green. Capoeira.&quot; ## [765] &quot;Tree, 6 m; inflorescence pale green, flowers pale green&quot; ## [766] &quot;Tree, 60cm dbh. Leaves collected from forest floor. Transect tree 2:7/4a. Vegetative ecological voucher. In terra firme forest.&quot; ## [767] &quot;Tree, 8-10 m tall; cupule greenish brown; fruit ellipsoid, green.&quot; ## [768] &quot;Tree, fruits immature. Height: 10.0 m; DBH: 10.0 cm.&quot; ## [769] &quot;Treelet 2m tall. Cupule dark green, fruit pale green.&quot; ## [770] &quot;Treelet 3m tall. Buds and flowers yellow. Low forest on terra firme.&quot; ## [771] &quot;Treelet 4m tall. Fruit green. Forest on terra firme.&quot; ## [772] &quot;Treelet, 15 m; buds pale green. Primary forest.&quot; ## [773] &quot;Treelet, 3 m tall; flowers cream, cupule dark green, fruit maturing red. Disturbed forest on terra firme.&quot; ## [774] &quot;Treelet, 4 m DBH; 3 cm, bark gray, brts grayed green with slight bloom; lvs yellow-green, shining above, paler, more or less glaucous beneath; fls orange-yellow. Same as no. 328.&quot; ## [775] &quot;Treelet, 4 m tall; flowers yellow-green, young leaves sericeous, silver. White sand capoeira.&quot; ## [776] &quot;Treelet, 4 m. tall. Buds green.&quot; ## [777] &quot;Treelet, 4 m. tall. Corolla cream.&quot; ## [778] &quot;Treelet, 4 m. tall. Fruit red. Cupule green.&quot; ## [779] &quot;Treelet, 5 m tall. Forest on terra firme.&quot; ## [780] &quot;Tronco com a base reta. Casca externa cinza. Ramos jovens com quinas.&quot; ## [781] &quot;UHE Teles Pires&quot; ## [782] &quot;UHE Teles Pires&quot; ## [783] &quot;UHE Teles Pires&quot; ## [784] &quot;Very common treelet, 1-5 m tall, fls. white, fruit black. Secondary forest.&quot; ## [785] &quot;VINY SHRUB, CA 4.5M TALL. WOOD IN ALCOHOL&quot; # histograma hist(daps) # adiciona ao conjunto de dados dados$DAPcm &lt;- daps Reparem que ambas as funções ainda precisam de alguns ajustes. Retirar variáveis de vetores de texto é algo complexo, especialmente quando não se há um padrão, fato observado comumente nas etiquetas de espécimes coletados e depositados em herbários. Ainda assim, conseguimos extrair bastante informação da coluna de notas de texto estocada em txt.org. "],["aed-checa-dados.html", "Capítulo 11 Checagem dos dados", " Capítulo 11 Checagem dos dados No tutorial abaixo vamos usar dados de avistamento de aves em fisionomias de cerrado. Baixem o arquivo contendo esses dados (https://github.com/LABOTAM/IntroR/blob/main/dados/aves_cerrado.csv) para a sua pasta de trabalho. Vamos praticar neste tutorial o uso de funções que nos mostram a estrutura e resumo dos dados. Já vimos como utilizar essas funções na parte I deste livro. str() - mostra a estrutura do objeto dos dados; head() e tail()- mostra a cabeça ou a cauda da sua tabela de dados, respectivamente; summary() - faz um resumo de todas as variáveis nos seus dados. Vamos começar importando os dados ao R: ## Lendo a planilha com read.table avesc &lt;- read.table(&quot;aves_cerrado.csv&quot;, row.names = 1, header = T, sep = &quot;;&quot;, dec = &quot;,&quot;, as.is = T, na.strings = c(&quot;NA&quot;, &quot;&quot;, &quot;NULL&quot;)) Repare no argumento na.strings da função read.table(). Ele é importante na importação de dados pois garante a codificação de valores ausentes usando a constante lógica NA do R. Se você não definir isso, o padrão é reconhecer apenas células que tenham o texto NA como valor faltante. Veja também o uso do argumento as.is = TRUE, que indica que não se deve converter colunas de texto em fatores (ou você pode usar o argumento stringsAsFactors para isso; este mesmo argumento é utilizado também na função data.frame()). Vamos ver as primeiras 10 linhas do objeto avesc: head(avesc, 10) fisionomia urubu carcara seriema Ce1 Ce 5 18 6 Ce2 Ce 7 7 6 Ce3 Ce 5 14 4 Ce4 Ce 3 12 5 Ce5 Ce 4 16 4 Ce6 Ce NA 20 NA Ce7 Ce 6 19 4 Ce8 Ce 4 21 10 Ce9 Ce 2 11 6 Ce10 Ce 5 9 7 Vamos criar uma cópia para usarmos depois. aves2 &lt;- avesc É sempre bom verificar se os dados foram importados corretamente. É sempre um bom procedimento checarmos as dimensões do objeto com a função dim(), primeiras e últimas linhas e colunas do objeto com funções head() e tail() respectivamente dim(avesc) # a dimensao do objeto (linhas e colunas) ## [1] 60 4 head(avesc, 3) # a cabeca do objeto (tres primeiras linhas) fisionomia urubu carcara seriema Ce1 Ce 5 18 6 Ce2 Ce 7 7 6 Ce3 Ce 5 14 4 tail(avesc, 3) # a cauda do objeto (tres ultimas linhas) fisionomia urubu carcara seriema CL18 CL 12 6 7 CL19 CL 18 5 4 CL20 CL 19 4 4 avesc[nrow(avesc), ] # ultima linha fisionomia urubu carcara seriema CL20 CL 19 4 4 Parece que está tudo certo! Vamos checar a estrutura do objeto: # mostra a estrutura do data.frame str(avesc) ## &#39;data.frame&#39;: 60 obs. of 4 variables: ## $ fisionomia: chr &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; ... ## $ urubu : int 5 7 5 3 4 NA 6 4 2 5 ... ## $ carcara : int 18 7 14 12 16 20 19 21 11 9 ... ## $ seriema : int 6 6 4 5 4 NA 4 10 6 7 ... Reparem que há uma variável de texto (chr) e três variáveis de números inteiros (int). Próximo passo é sempre checar um sumário estatístico das variáveis presentes no objeto usando a função summary(): # mostra um resumo da variacao nas colunas summary(avesc) fisionomia urubu carcara seriema Length:60 Min. : 2.00 Min. : 3.00 Min. : 2.000 Class :character 1st Qu.: 7.00 1st Qu.: 5.50 1st Qu.: 4.000 Mode :character Median :12.00 Median : 9.00 Median : 5.000 NA Mean :11.93 Mean :10.25 Mean : 5.345 NA 3rd Qu.:16.50 3rd Qu.:14.00 3rd Qu.: 6.000 NA Max. :22.00 Max. :24.00 Max. :12.000 NA NA’s :1 NA’s :1 NA’s :2 Há indicação de presença de valores NA nas variáveis numéricas, que são valores faltantes. "],["tem-valores-ausentes.html", "11.1 Tem valores ausentes?", " 11.1 Tem valores ausentes? Há valores ausentes em nossos dados? Eles são mesmo faltantes? Ou seja, o que significam valores ausentes no seu conjunto de dados? Podemos utilizar a função is.na() para encontrar a constante lógica NA, ou seja, a constante que indica valores ausentes (reveja o uso da função is.na() na seção 2.6.3). Vejam o ? da constante lógica NA para entender o significado dela no R: ?NA Continuemos de onde paramos na seção anterior. Vimos que há a presença de NA no data.frame avesc. Chequemos quais registros (linhas) têm valores NA. Vamos checar primeiramanete a variável avesc$urubu: avesc$urubu == NA ## erro: não retorna verdadeiro ou falso avesc[avesc$urubu == NA, ] ## também não funciona Reparem que os comandos acima, apesar de funcionarem, não respondem à nossa pergunta que é saber quais linhas possuem NA. Para isso, devemos nos valer da função is.na(): is.na(avesc) # pergunta em todo o data frame: quem é NA? fisionomia urubu carcara seriema Ce1 FALSE FALSE FALSE FALSE Ce2 FALSE FALSE FALSE FALSE Ce3 FALSE FALSE FALSE FALSE Ce4 FALSE FALSE FALSE FALSE Ce5 FALSE FALSE FALSE FALSE Ce6 FALSE TRUE FALSE TRUE Ce7 FALSE FALSE FALSE FALSE Ce8 FALSE FALSE FALSE FALSE Ce9 FALSE FALSE FALSE FALSE Ce10 FALSE FALSE FALSE FALSE Ce11 FALSE FALSE FALSE FALSE Ce12 FALSE FALSE FALSE FALSE Ce13 FALSE FALSE FALSE FALSE Ce14 FALSE FALSE FALSE FALSE Ce15 FALSE FALSE FALSE FALSE Ce16 FALSE FALSE FALSE FALSE Ce17 FALSE FALSE FALSE FALSE Ce18 FALSE FALSE FALSE FALSE Ce19 FALSE FALSE FALSE FALSE Ce20 FALSE FALSE FALSE FALSE CC1 FALSE FALSE FALSE FALSE CC2 FALSE FALSE FALSE FALSE CC3 FALSE FALSE FALSE FALSE CC4 FALSE FALSE FALSE FALSE CC5 FALSE FALSE FALSE TRUE CC6 FALSE FALSE FALSE FALSE CC7 FALSE FALSE FALSE FALSE CC8 FALSE FALSE FALSE FALSE CC9 FALSE FALSE FALSE FALSE CC10 FALSE FALSE FALSE FALSE CC11 FALSE FALSE FALSE FALSE CC12 FALSE FALSE FALSE FALSE CC13 FALSE FALSE FALSE FALSE CC14 FALSE FALSE FALSE FALSE CC15 FALSE FALSE FALSE FALSE CC16 FALSE FALSE FALSE FALSE CC17 FALSE FALSE FALSE FALSE CC18 FALSE FALSE FALSE FALSE CC19 FALSE FALSE FALSE FALSE CC20 FALSE FALSE FALSE FALSE CL1 FALSE FALSE FALSE FALSE CL2 FALSE FALSE FALSE FALSE CL3 FALSE FALSE FALSE FALSE CL4 FALSE FALSE FALSE FALSE CL5 FALSE FALSE FALSE FALSE CL6 FALSE FALSE FALSE FALSE CL7 FALSE FALSE FALSE FALSE CL8 FALSE FALSE FALSE FALSE CL9 FALSE FALSE TRUE FALSE CL10 FALSE FALSE FALSE FALSE CL11 FALSE FALSE FALSE FALSE CL12 FALSE FALSE FALSE FALSE CL13 FALSE FALSE FALSE FALSE CL14 FALSE FALSE FALSE FALSE CL15 FALSE FALSE FALSE FALSE CL16 FALSE FALSE FALSE FALSE CL17 FALSE FALSE FALSE FALSE CL18 FALSE FALSE FALSE FALSE CL19 FALSE FALSE FALSE FALSE CL20 FALSE FALSE FALSE FALSE !is.na(avesc) # inverte: quem não é NA? fisionomia urubu carcara seriema Ce1 TRUE TRUE TRUE TRUE Ce2 TRUE TRUE TRUE TRUE Ce3 TRUE TRUE TRUE TRUE Ce4 TRUE TRUE TRUE TRUE Ce5 TRUE TRUE TRUE TRUE Ce6 TRUE FALSE TRUE FALSE Ce7 TRUE TRUE TRUE TRUE Ce8 TRUE TRUE TRUE TRUE Ce9 TRUE TRUE TRUE TRUE Ce10 TRUE TRUE TRUE TRUE Ce11 TRUE TRUE TRUE TRUE Ce12 TRUE TRUE TRUE TRUE Ce13 TRUE TRUE TRUE TRUE Ce14 TRUE TRUE TRUE TRUE Ce15 TRUE TRUE TRUE TRUE Ce16 TRUE TRUE TRUE TRUE Ce17 TRUE TRUE TRUE TRUE Ce18 TRUE TRUE TRUE TRUE Ce19 TRUE TRUE TRUE TRUE Ce20 TRUE TRUE TRUE TRUE CC1 TRUE TRUE TRUE TRUE CC2 TRUE TRUE TRUE TRUE CC3 TRUE TRUE TRUE TRUE CC4 TRUE TRUE TRUE TRUE CC5 TRUE TRUE TRUE FALSE CC6 TRUE TRUE TRUE TRUE CC7 TRUE TRUE TRUE TRUE CC8 TRUE TRUE TRUE TRUE CC9 TRUE TRUE TRUE TRUE CC10 TRUE TRUE TRUE TRUE CC11 TRUE TRUE TRUE TRUE CC12 TRUE TRUE TRUE TRUE CC13 TRUE TRUE TRUE TRUE CC14 TRUE TRUE TRUE TRUE CC15 TRUE TRUE TRUE TRUE CC16 TRUE TRUE TRUE TRUE CC17 TRUE TRUE TRUE TRUE CC18 TRUE TRUE TRUE TRUE CC19 TRUE TRUE TRUE TRUE CC20 TRUE TRUE TRUE TRUE CL1 TRUE TRUE TRUE TRUE CL2 TRUE TRUE TRUE TRUE CL3 TRUE TRUE TRUE TRUE CL4 TRUE TRUE TRUE TRUE CL5 TRUE TRUE TRUE TRUE CL6 TRUE TRUE TRUE TRUE CL7 TRUE TRUE TRUE TRUE CL8 TRUE TRUE TRUE TRUE CL9 TRUE TRUE FALSE TRUE CL10 TRUE TRUE TRUE TRUE CL11 TRUE TRUE TRUE TRUE CL12 TRUE TRUE TRUE TRUE CL13 TRUE TRUE TRUE TRUE CL14 TRUE TRUE TRUE TRUE CL15 TRUE TRUE TRUE TRUE CL16 TRUE TRUE TRUE TRUE CL17 TRUE TRUE TRUE TRUE CL18 TRUE TRUE TRUE TRUE CL19 TRUE TRUE TRUE TRUE CL20 TRUE TRUE TRUE TRUE avesc[!is.na(avesc)] ## [1] &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; ## [16] &quot;Ce&quot; &quot;Ce&quot; &quot;ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; ## [31] &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; ## [46] &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; ## [61] &quot; 5&quot; &quot; 7&quot; &quot; 5&quot; &quot; 3&quot; &quot; 4&quot; &quot; 6&quot; &quot; 4&quot; &quot; 2&quot; &quot; 5&quot; &quot; 6&quot; &quot; 6&quot; &quot; 7&quot; &quot; 6&quot; &quot; 5&quot; &quot; 5&quot; ## [76] &quot; 3&quot; &quot;13&quot; &quot; 8&quot; &quot; 7&quot; &quot;22&quot; &quot;10&quot; &quot;17&quot; &quot;16&quot; &quot;20&quot; &quot;18&quot; &quot;16&quot; &quot;14&quot; &quot;12&quot; &quot;15&quot; &quot; 9&quot; ## [91] &quot;11&quot; &quot;20&quot; &quot;18&quot; &quot; 8&quot; &quot;15&quot; &quot;17&quot; &quot;17&quot; &quot;12&quot; &quot;12&quot; &quot;11&quot; &quot;10&quot; &quot;19&quot; &quot;15&quot; &quot;13&quot; &quot;12&quot; ## [106] &quot;16&quot; &quot;13&quot; &quot;19&quot; &quot;19&quot; &quot;11&quot; &quot;18&quot; &quot;15&quot; &quot;19&quot; &quot;13&quot; &quot;16&quot; &quot;10&quot; &quot;12&quot; &quot;18&quot; &quot;19&quot; &quot;18&quot; ## [121] &quot; 7&quot; &quot;14&quot; &quot;12&quot; &quot;16&quot; &quot;20&quot; &quot;19&quot; &quot;21&quot; &quot;11&quot; &quot; 9&quot; &quot;12&quot; &quot;24&quot; &quot;17&quot; &quot;16&quot; &quot;15&quot; &quot;12&quot; ## [136] &quot;14&quot; &quot;14&quot; &quot;21&quot; &quot;13&quot; &quot; 8&quot; &quot;16&quot; &quot;14&quot; &quot;16&quot; &quot;10&quot; &quot; 7&quot; &quot; 8&quot; &quot; 8&quot; &quot; 7&quot; &quot;14&quot; &quot;11&quot; ## [151] &quot;12&quot; &quot;11&quot; &quot;11&quot; &quot; 7&quot; &quot;14&quot; &quot; 8&quot; &quot;14&quot; &quot; 7&quot; &quot; 9&quot; &quot; 3&quot; &quot; 5&quot; &quot; 5&quot; &quot; 8&quot; &quot; 6&quot; &quot; 5&quot; ## [166] &quot; 5&quot; &quot; 3&quot; &quot; 5&quot; &quot; 3&quot; &quot; 3&quot; &quot; 6&quot; &quot; 4&quot; &quot; 4&quot; &quot; 5&quot; &quot; 3&quot; &quot; 6&quot; &quot; 5&quot; &quot; 4&quot; &quot; 6&quot; &quot; 6&quot; ## [181] &quot; 4&quot; &quot; 5&quot; &quot; 4&quot; &quot; 4&quot; &quot;10&quot; &quot; 6&quot; &quot; 7&quot; &quot; 8&quot; &quot; 5&quot; &quot; 6&quot; &quot; 4&quot; &quot; 6&quot; &quot; 8&quot; &quot; 3&quot; &quot; 4&quot; ## [196] &quot; 2&quot; &quot; 4&quot; &quot; 5&quot; &quot; 3&quot; &quot; 3&quot; &quot; 6&quot; &quot; 3&quot; &quot; 5&quot; &quot; 4&quot; &quot; 4&quot; &quot; 4&quot; &quot; 8&quot; &quot; 4&quot; &quot; 4&quot; &quot; 3&quot; ## [211] &quot; 6&quot; &quot; 5&quot; &quot; 5&quot; &quot; 6&quot; &quot; 6&quot; &quot;12&quot; &quot; 9&quot; &quot; 6&quot; &quot; 5&quot; &quot; 4&quot; &quot; 6&quot; &quot; 4&quot; &quot; 5&quot; &quot; 6&quot; &quot; 5&quot; ## [226] &quot; 4&quot; &quot; 9&quot; &quot; 7&quot; &quot; 5&quot; &quot; 4&quot; &quot; 6&quot; &quot; 2&quot; &quot;10&quot; &quot; 7&quot; &quot; 4&quot; &quot; 4&quot; Proceder com o último comando gera um resultado confuso, pois o data.frame é convertido em um vetor de dimensão de 236 valores. Podemos investigar da maneira abaixo. Checamos qual é o tamanho total de valores presentes no objeto avesc, multiplicando o número de linhas pelo número de colunas através da expressão (nrow(avesc) * ncol(avesc)). Temos então um número total de 240 valores possíveis em avesc. E comparamos essa valor com o número de valores não faltantes em avesc através da expressão length(avesc[!is.na(avesc)]), que retorna 236. Portanto, se não houver valores faltantes, a primeira expressão abaixo deve retornar verdadeiro (TRUE), e falso (FALSE) se houver valores faltantes: (nrow(avesc) * ncol(avesc)) == length(avesc[!is.na(avesc)]) ## [1] FALSE Então quantos valores faltantes existem em nossos dados? # ou então, o número de valores NA no data.frame é de: (nrow(avesc) * ncol(avesc)) - length(avesc[!is.na(avesc)]) ## [1] 4 O procedimento adotado acima pode ser difícil de entender. Fazer essa pergunta por colunas torna o entendimento mais fácil: is.na(avesc$urubu) # quais são NA, vetor lógico ## [1] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # mesmo que is.na(avesc$urubu) == T ## [1] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # e o contrário é (quem não é NA) is.na(avesc$urubu) == F ## [1] TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE ## [13] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [25] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [37] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [49] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE # ou simplesmente !is.na(avesc$urubu) ## [1] TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE ## [13] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [25] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [37] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [49] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Vetores lógicos TRUE e FALSE podem ser somados. TRUE corresponde a 1, e FALSE a 0. Usando o resultado de is.na(avesc$urubu) (ou qualquer outra variável de avesc) junto à função sum(), teremos então o número de valores faltantes na variável escolhida: sum(is.na(avesc$urubu)) # quantos sao? ## [1] 1 sum(!is.na(avesc$urubu)) # quantos não são? ## [1] 59 # e, isso é verdadeiro, né? (sum(is.na(avesc$urubu)) + sum(!is.na(avesc$urubu))) == nrow(avesc) ## [1] TRUE Podemos perguntar quais posições do vetor lógico oriundo de is.na(avesc$urubu) são correspondentes a NA por meio da função which(). Teremos como resposta um vetor de números inteiros indicando o número das linhas com valores NA na urubu: which(is.na(avesc$urubu)) # vetor com indices das posições que são NA ## [1] 6 Vamos utilizar agora este resultado para filtrar o data.frame avesc e checar que linha é essa: avesc[which(is.na(avesc$urubu)), ] # mesma coisa, mas precisa de uma segunda função, então menos parcimonioso fisionomia urubu carcara seriema Ce6 Ce NA 20 NA Podemos filtrar também sem a função which(), usando apenas os vetores lógicos TRUE e FALSE oriundos da função is.na(): avesc[is.na(avesc$urubu), ] # mostra as linhas completas para os registros com NA na coluna urubu fisionomia urubu carcara seriema Ce6 Ce NA 20 NA ## para ver se tem NA em uma das tres colunas com nomes de aves: usamos o operador | (quer dizer &#39;ou&#39;) meufiltro &lt;- is.na(avesc$urubu) | is.na(avesc$carcara) | is.na(avesc$seriema) sum(is.na(avesc)) # soma dos valores NA nas tres colunas ## [1] 4 avesc[meufiltro, ] # mostra todas as linhas que tem algum valor NA fisionomia urubu carcara seriema Ce6 Ce NA 20 NA CC5 CC 20 10 NA CL9 CL 19 NA 5 # Esses valores NA, na verdade são AUSENCIA da ave (não avistamento) numa determinada localidade (linha no dado). Portanto, NA neste caso deveria ser de fato 0. ## Então, vamos corrigir estes valores vl &lt;- is.na(avesc$urubu) ## Podemos ver os valores de vários jeitos avesc$urubu[vl] # assim ## [1] NA avesc[vl, &quot;urubu&quot;] # ou assim ## [1] NA avesc[, &quot;urubu&quot;][vl] # ou assim... ## [1] NA # se podemos ver, podemos atribuir 0 para esse valor ausentes avesc$urubu[vl] &lt;- 0 ## Continuando, para as outras aves, mostrando variacoes de códigos avesc$carcara[is.na(avesc$carcara)] &lt;- 0 avesc$seriema[is.na(avesc$seriema) == T] &lt;- 0 ## Verificando se substituimos corretamente avesc[meufiltro, ] fisionomia urubu carcara seriema Ce6 Ce 0 20 0 CC5 CC 20 10 0 CL9 CL 19 0 5 # poderiamos ter feito a mudanca de uma vez aves2[meufiltro, ] # a cópia que fiz no início fisionomia urubu carcara seriema Ce6 Ce NA 20 NA CC5 CC 20 10 NA CL9 CL 19 NA 5 aves2[meufiltro, ][is.na(aves2[meufiltro, ])] # visualizo só os NAs ## [1] NA NA NA NA aves2[meufiltro, ][is.na(aves2[meufiltro, ])] &lt;- 0 # atribuo 0 ## Agora esses valores são zero, certo? avesc[avesc$urubu == 0 | avesc$carcara == 0 | avesc$seriema == 0, ] fisionomia urubu carcara seriema Ce6 Ce 0 20 0 CC5 CC 20 10 0 CL9 CL 19 0 5 "],["colunas-com-fatores.html", "11.2 Colunas com fatores", " 11.2 Colunas com fatores As colunas com fatores estão codificadas corretamente? Temos algumas funções úteis para se trabalhar com fatores. A primeira delas se chama table() e é responsável por fazer contagens de valores em fatores ou vetores de texto. Já as funções factor() e as.factor() permitem criar ou definir fatores. # agora vamos ver a nossa coluna fisionomia, que não importamos como fator str(avesc) ## &#39;data.frame&#39;: 60 obs. of 4 variables: ## $ fisionomia: chr &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; ... ## $ urubu : num 5 7 5 3 4 0 6 4 2 5 ... ## $ carcara : num 18 7 14 12 16 20 19 21 11 9 ... ## $ seriema : num 6 6 4 5 4 0 4 10 6 7 ... avesc$fisionomia ## [1] &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;Ce&quot; ## [16] &quot;Ce&quot; &quot;Ce&quot; &quot;ce&quot; &quot;Ce&quot; &quot;Ce&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; ## [31] &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CC&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; ## [46] &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; &quot;CL&quot; class(avesc$fisionomia) ## [1] &quot;character&quot; As categorias da variável avesc$fisionomia significam: “CL” = campo limpo; “CC” = campo cerrado; “Ce” = cerrado. Vamos tabular essa coluna e verificar quantos valores temos para cada categoria: table(avesc$fisionomia) CC ce Ce CL 20 1 19 20 Reparem que a categoria ce e Ce são tratadas como diferentes pois o R6 interpreta letras minúsculas e maiúsculas diferentemente. A falta de padronização em dados biológicos tabulados é muito frequente, e trabalhar com scripts permite ao usuário documentar todas as mudanças em etapas que precedem o momento da análise. Por isso, fique sempre atento à padronização e a checagem de dados durante a AED. Antes de proceder com a correção, vamos fazer uma cópia da variável avesc$fisionomia para fins deste exercício: fisionomia.copia &lt;- avesc$fisionomia Digamos que o padrão deve ser Ce, então vamos filtrar os valores presentes em avesc que não correspondem a Ce, isto é, o valor ce: vl &lt;- avesc$fisionomia == &quot;ce&quot; # quem tem esse valor avesc$fisionomia[vl] &lt;- &quot;Ce&quot; # corrigindo table(avesc$fisionomia) CC Ce CL 20 20 20 Tendo em vista que a diferença é apenas de capitalização entre ce e Ce, poderíamos ter feito simplesmente o exposto abaixo para efeito de correção: avesc$fisionomia &lt;- fisionomia.copia # volto ao valor original Primeiro, usamos a cópia dos valores originais e o atribuímos aos valores modificados. Em seguida, mudamos a capitalização das palavras para caixa alta com a função toupper(). Em seguida, tabulamos as categorias: # corrijo, simplesmente mudando tudo para maiúsculo: avesc$fisionomia &lt;- toupper(avesc$fisionomia) table(avesc$fisionomia) CC CE CL 20 20 20 Porém, se nós tivéssemos importado os dados transformando vetores de texto como fatores, por meio dos argumentos as.is = FALSE OU stringsAsFactors = FALSE, poderíamos proceder da seguinte maneira: # digamos no entanto, que eu tivesse importado a coluna como fator avesc$fisionomia &lt;- as.factor(fisionomia.copia) class(avesc$fisionomia) ## [1] &quot;factor&quot; levels(avesc$fisionomia) # os níveis ou categorias do fator ## [1] &quot;CC&quot; &quot;ce&quot; &quot;Ce&quot; &quot;CL&quot; # isso é verdadeiro, certo?: sort(unique(avesc$fisionomia)) == levels(as.factor(avesc$fisionomia)) ## [1] TRUE TRUE TRUE TRUE # sendo um fator, para corrigir, eu precisaria apenas: levels(avesc$fisionomia)[2] &lt;- &quot;Ce&quot; levels(avesc$fisionomia) # pronto, corrigido ## [1] &quot;CC&quot; &quot;Ce&quot; &quot;CL&quot; table(avesc$fisionomia) CC Ce CL 20 20 20 ## Verificando novamente str(avesc) ## &#39;data.frame&#39;: 60 obs. of 4 variables: ## $ fisionomia: Factor w/ 3 levels &quot;CC&quot;,&quot;Ce&quot;,&quot;CL&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ urubu : num 5 7 5 3 4 0 6 4 2 5 ... ## $ carcara : num 18 7 14 12 16 20 19 21 11 9 ... ## $ seriema : num 6 6 4 5 4 0 4 10 6 7 ... summary(avesc) fisionomia urubu carcara seriema CC:20 Min. : 0.00 Min. : 0.00 Min. : 0.000 Ce:20 1st Qu.: 6.75 1st Qu.: 5.00 1st Qu.: 4.000 CL:20 Median :12.00 Median : 9.00 Median : 5.000 NA Mean :11.73 Mean :10.08 Mean : 5.167 NA 3rd Qu.:16.25 3rd Qu.:14.00 3rd Qu.: 6.000 NA Max. :22.00 Max. :24.00 Max. :12.000 Isso ocorre na maioria das linguagens de programação. Vejam esta postagem: https://softwareengineering.stackexchange.com/questions/9965/why-is-there-still-case-sensitivity-in-some-programming-languages.↩︎ "],["aed-univar.html", "Capítulo 12 AED de univariadas ", " Capítulo 12 AED de univariadas "],["qual-a-distribuição-dos-valores-numéricos.html", "12.1 Qual a distribuição dos valores numéricos?", " 12.1 Qual a distribuição dos valores numéricos? Onde os dados estão centrados? Como eles estão espalhados? Eles são simétricos, i.e., a distribuição é normal? São enviesados, bi-modais? Existem valores extremos? Já vimos algumas operações matemáticas com vetores e também como usar as funções hist() e boxplot() para gerar figuras de distribuição de variáveis numéricas individualmente. Vimos também como fazer iterações usando funções da família apply(). Também já aprendemos sobre a função summary(), que faz um resumo de todas as variáveis nos seus dados e aqui vamos entender isso melhor, apresentando a função quantile(), que permite extrair os quantis, que são valores que dividem uma distribuição probabilística em intervalos iguais de probabilidade. Com essas ferramentas, podemos descrever a distribuição de nossas variáveis numéricas. 12.1.1 Dados do tutorial Vamos importar novamente os conjuntos de dados de avistamento de aves do cerrado (utilizado no capítulo 11) e de parcelas em caixetais (utilizado no capítulo 7): ## Lendo a planilha com read.table avesc &lt;- read.table(&quot;aves_cerrado.csv&quot;, row.names = 1, header = T, sep = &quot;;&quot;, dec = &quot;,&quot;, as.is = T, na.strings = c(&quot;NA&quot;, &quot;&quot;, &quot;NULL&quot;)) caixeta &lt;- read.csv(&quot;caixeta.csv&quot;) ## arquivo caixeta.csv deve estar no diretorio de trabalho # note que mantemos todos os argumentos padrão (veja o formato do arquivo caixeta) ## Resumo estatistico: medias, media truncada e mediana, quantis # pegando apenas as variáveis numéricas avesc[, 2:4] urubu carcara seriema Ce1 5 18 6 Ce2 7 7 6 Ce3 5 14 4 Ce4 3 12 5 Ce5 4 16 4 Ce6 NA 20 NA Ce7 6 19 4 Ce8 4 21 10 Ce9 2 11 6 Ce10 5 9 7 Ce11 6 12 8 Ce12 6 24 5 Ce13 7 17 6 Ce14 6 16 4 Ce15 5 15 6 Ce16 5 12 8 Ce17 3 14 3 Ce18 13 14 4 Ce19 8 21 2 Ce20 7 13 4 CC1 22 8 5 CC2 10 16 3 CC3 17 14 3 CC4 16 16 6 CC5 20 10 NA CC6 18 7 3 CC7 16 8 5 CC8 14 8 4 CC9 12 7 4 CC10 15 14 4 CC11 9 11 8 CC12 11 12 4 CC13 20 11 4 CC14 18 11 3 CC15 8 7 6 CC16 15 14 5 CC17 17 8 5 CC18 17 14 6 CC19 12 7 6 CC20 12 9 12 CL1 11 3 9 CL2 10 5 6 CL3 19 5 5 CL4 15 8 4 CL5 13 6 6 CL6 12 5 4 CL7 16 5 5 CL8 13 3 6 CL9 19 NA 5 CL10 19 5 4 CL11 11 3 9 CL12 18 3 7 CL13 15 6 5 CL14 19 4 4 CL15 13 4 6 CL16 16 5 2 CL17 10 3 10 CL18 12 6 7 CL19 18 5 4 CL20 19 4 4 # podemos fazer um resumo estatístico da distribuição de cada uma dessas colunas summary(avesc[, 2:4]) urubu carcara seriema Min. : 2.00 Min. : 3.00 Min. : 2.000 1st Qu.: 7.00 1st Qu.: 5.50 1st Qu.: 4.000 Median :12.00 Median : 9.00 Median : 5.000 Mean :11.93 Mean :10.25 Mean : 5.345 3rd Qu.:16.50 3rd Qu.:14.00 3rd Qu.: 6.000 Max. :22.00 Max. :24.00 Max. :12.000 NA’s :1 NA’s :1 NA’s :2 # essa função me retorna várias estatísticas da distribuição de cada variável # os valores mínimos e máximos # a tendência central pela média e pela mediana # e o 1 e o 3 quartil, que juntamente com o mínimo, o máximo e mediana, # indicam as divisões dos dados em quatro partes identicas (vamos ver isso melhor abaixo) # funcao summary, mas não retorna por, exemplo, o desvio padrão ou a variância das colunas. # e não podemos fazer isso apenas com a função sd para todas as colunas sd(avesc[, 2:4]) # ops deprecado (eu estou trabalhando com uma matriz) # mas posso usar a funcao apply (para cada coluna, argumento MARGIN) apply(avesc[, 2:4], 2, sd, na.rm = TRUE) ## urubu carcara seriema ## 5.429372 5.383862 2.013566 # summary já retorna isso, mas eu poderia usar para qualquer funcao apply(avesc[, 2:4], 2, median, na.rm = TRUE) ## urubu carcara seriema ## 12 9 5 apply(avesc[, 2:4], 2, mean, na.rm = TRUE) ## urubu carcara seriema ## 11.932203 10.254237 5.344828 apply(avesc[, 2:4], 2, min, na.rm = TRUE) ## urubu carcara seriema ## 2 3 2 apply(avesc[, 2:4], 2, max, na.rm = TRUE) ## urubu carcara seriema ## 22 24 12 apply(avesc[, 2:4], 2, quantile, na.rm = TRUE) urubu carcara seriema 0% 2.0 3.0 2 25% 7.0 5.5 4 50% 12.0 9.0 5 75% 16.5 14.0 6 100% 22.0 24.0 12 # note que os valores dos quartis: quantile(avesc$urubu, na.rm = TRUE) ## 0% 25% 50% 75% 100% ## 2.0 7.0 12.0 16.5 22.0 # aparecem também quando usamos summary, que no entanto, retorna a média artimética, # que é o único valor que não é um quartil. summary(avesc$urubu) Min. 1st Qu. Median Mean 3rd Qu. Max. NA’s 2 7 12 11.9322 16.5 22 1 # para entender melhor isso vamos graficar: # primeiro num histograma hist(avesc$urubu, main = &quot;Avistamentos de Urubu&quot;, xlab = &quot;Número de aves observadas por local&quot;) # melhorando um pouco hist(avesc$urubu, main = &quot;Avistamentos de Urubu&quot;, xlab = &quot;Número de aves observadas por local&quot;, breaks = 22, col = &quot;gray&quot;) # agora adicionamos em azul os quartis abline(v = quantile(avesc$urubu, na.rm = TRUE), col = &quot;blue&quot;, lwd = 5) # note que as barras azuis estão igualmente espaçadas no eixo X, pois elas dividem a distribuição em partes iguais # vamos plotar a média abline(v = mean(avesc$urubu, na.rm = TRUE), col = &quot;red&quot;, lty = &quot;dotted&quot;, lwd = 6) # e a mediana abline(v = median(avesc$urubu, na.rm = TRUE), col = &quot;green&quot;, lty = &quot;dotted&quot;, lwd = 6) # note como a mediana é equivalente ao quartil que indica 50% na divisão simétrica dos dados e que neste caso a diferença entre média e mediana é muito pequena, pois os dados são bem simétricos em relação à tendência central # vamos adicionar o desvio padrão: v1 &lt;- sd(avesc$urubu, na.rm = TRUE) + mean(avesc$urubu, na.rm = TRUE) v2 &lt;- mean(avesc$urubu, na.rm = TRUE) - sd(avesc$urubu, na.rm = TRUE) abline(v = c(v1, v2), col = &quot;yellow&quot;, lty = &quot;solid&quot;, lwd = 4) # agora com um box plot: boxplot(avesc$urubu) abline(h = quantile(avesc$urubu, na.rm = TRUE), col = &quot;blue&quot;, lwd = 2) # Média truncada = e.g. TIRANDO 10% DOS VALORES NOS EXTREMOS (posso ver como muda, caso tenha valores extremos, vai mudar muito) ?mean # veja o argumento trim apply(avesc[, 2:4], 2, mean, trim = 0.1, na.rm = TRUE) # truncando ## urubu carcara seriema ## 12.000000 9.897959 5.145833 apply(avesc[, 2:4], 2, mean, trim = 0, na.rm = TRUE) # sem truncar ## urubu carcara seriema ## 11.932203 10.254237 5.344828 # valores de quantils em outras probabilidades quantile(avesc$urubu, probs = seq(from = 0, to = 1, by = 0.1), na.rm = TRUE) # a cada 10% ## 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% ## 2.0 5.0 6.0 8.0 11.0 12.0 13.8 16.0 17.4 19.0 22.0 dim(caixeta) # dimensões ## [1] 1027 7 names(caixeta) # colunas ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; head(caixeta) # cabeça local parcela arvore fuste cap h especie chauas 1 1 1 210 80 Myrcia sulfiflora chauas 1 3 1 170 80 Myrcia sulfiflora chauas 1 4 1 720 70 Syagrus romanzoffianus chauas 1 5 1 200 80 Tabebuia cassinoides chauas 1 6 1 750 170 indet.1 chauas 1 7 1 320 80 Myrcia sulfiflora str(caixeta) ## &#39;data.frame&#39;: 1027 obs. of 7 variables: ## $ local : chr &quot;chauas&quot; &quot;chauas&quot; &quot;chauas&quot; &quot;chauas&quot; ... ## $ parcela: int 1 1 1 1 1 1 1 1 1 1 ... ## $ arvore : int 1 3 4 5 6 7 8 9 10 10 ... ## $ fuste : int 1 1 1 1 1 1 1 1 1 2 ... ## $ cap : int 210 170 720 200 750 320 480 240 290 310 ... ## $ h : int 80 80 70 80 170 80 160 140 120 120 ... ## $ especie: chr &quot;Myrcia sulfiflora&quot; &quot;Myrcia sulfiflora&quot; &quot;Syagrus romanzoffianus&quot; &quot;Tabebuia cassinoides&quot; ... # vamos calcular o DAP a partid o CAP (circunferencia a altura do peito) # se cap = 2*pi*dap/2 portanto dap = cap/pi dap &lt;- caixeta$cap / pi hist(dap) # veja distribuição diametrica desses dados (é uma típica log-normal) # adicionando a nova coluna aos dados caixeta$dap &lt;- dap head(caixeta, 2) local parcela arvore fuste cap h especie dap chauas 1 1 1 210 80 Myrcia sulfiflora 66.84508 chauas 1 3 1 170 80 Myrcia sulfiflora 54.11268 # resume localidade levels(caixeta$local) ## NULL # altura das arvore em cada localidade chauas.h &lt;- caixeta[caixeta$local == &quot;chauas&quot;, &quot;h&quot;] jureia.h &lt;- caixeta[caixeta$local == &quot;jureia&quot;, &quot;h&quot;] retiro.h &lt;- caixeta[caixeta$local == &quot;retiro&quot;, &quot;h&quot;] # para a localidade chauas hist(chauas.h, breaks = 20) # ops tem um valor extremo, que era um erro chauas.h[chauas.h &gt; 300] ## [1] 480 # deveria ser 48 hist(caixeta$h) # um valor extremo de todo o conjunto de dados chauas.h[chauas.h &gt; 300] &lt;- 48 # corrigimos esse valor hist(chauas.h) hist(jureia.h) hist(retiro.h) range(chauas.h) # aplitude de variacao ## [1] 20 230 range(jureia.h) ## [1] 30 220 range(retiro.h) ## [1] 5 170 xl &lt;- c(0, 250) # limitando o grafico aos extremos de todo o conjunto de dados yl &lt;- c(0, 150) hist(chauas.h, breaks = 30, xlim = xl, ylim = yl) hist(jureia.h, add = TRUE, breaks = 30, col = &quot;blue&quot;) hist(retiro.h, add = TRUE, breaks = 30, col = &quot;green&quot;) # mas seria melhor ver cada distribuicao individualmente por localidade # dividimos o dispositivo em 3 linhas e uma coluna par(mfrow = c(3, 1)) hist(chauas.h, breaks = 20, xlim = xl, ylim = yl, col = &quot;green&quot;) hist(jureia.h, breaks = 20, xlim = xl, ylim = yl, col = &quot;blue&quot;) hist(retiro.h, breaks = 20, xlim = xl, ylim = yl, col = &quot;red&quot;) par(mfrow = c(1, 1)) # retorna o dispositivo "],["tabelas-de-variáveis-categóricas.html", "12.2 Tabelas de variáveis categóricas", " 12.2 Tabelas de variáveis categóricas A função table() permite contar valores em fatores e vetores e você pode relembrar como usar a função barplot() para gerar gráficos de barra simples: # continuando com os dados de caixeta.csv head(caixeta) local parcela arvore fuste cap h especie dap chauas 1 1 1 210 80 Myrcia sulfiflora 66.84508 chauas 1 3 1 170 80 Myrcia sulfiflora 54.11268 chauas 1 4 1 720 70 Syagrus romanzoffianus 229.18312 chauas 1 5 1 200 80 Tabebuia cassinoides 63.66198 chauas 1 6 1 750 170 indet.1 238.73241 chauas 1 7 1 320 80 Myrcia sulfiflora 101.85916 # tem a coluna especie # podemos resumir quantos individuos tem de cada espécie (considerando que cada linha é um individuo) table(caixeta$especie) Alchornea triplinervia Andira fraxinifolia bombacaceae Cabralea canjerana Callophyllum brasiliensis Calophyllum brasiliensis Cecropia sp Coussapoa macrocarpa Coussapoa micropoda Cryptocaria moschata Cyathea sp Eugenia oblongata eugenia3 fabaceae1 Ficus sp Gomidesia sp Ilex durosa Ilex sp indet.1 indet.2 indet.3 Inga sp Jacaranda puberula jussara Matayba sp Mela 1 Mela 2 Myrcia sulfiflora Myrtaceae 3 myrtaceae1 myrtaceae2 myrtaceae4 Pera glabrata Persea sp Pisonia sp Psidium sp Simplocos sp Solanum sp1 Solanum sp2 Syagrus romanzoffianus Tabebuia 1 Tabebuia cassinoides Tibouchina nutticeps 15 4 1 4 7 4 1 3 9 2 2 2 1 1 2 1 8 2 1 1 1 4 2 37 1 63 2 96 3 4 1 1 1 3 2 20 2 1 1 1 10 698 2 sort(table(caixeta$especie), decreasing = T)[1:3] # quais são as tres especies mais abundantes Tabebuia cassinoides Myrcia sulfiflora Mela 1 698 96 63 table(caixeta$local) # quantas localidades? chauas jureia retiro 426 241 360 ## Graficos de barra para representar uma tabela op &lt;- par(no.readonly = TRUE) # pega parametros gráficos atual par(mar = c(10, 3, 0, 0)) # mudando as margens vv &lt;- sort(table(caixeta$especie), decreasing = T) vv[1:5] # cinco especies mais abundantes Tabebuia cassinoides Myrcia sulfiflora Mela 1 jussara Psidium sp 698 96 63 37 20 # gráfico de barras disso barplot(vv, cex.names = 0.5) par(las = 2, mar = c(10, 5, 5, 1)) # mudando margens e orientacao dos eixos barplot(sort(table(caixeta$especie), decreasing = T), cex.names = 0.8) # muita coisa, pegando apenas as especies mais abundantes barplot(sort(table(caixeta$especie), decreasing = T)[1:10], cex.names = 0.8) # note como Tabebuia cassonoides é muito mais abundante que qualquer outra espécie nessas comunidades par(op) # volta aos parametros # numero de individuos por localidade barplot(table(caixeta$local), ylab = &quot;Número de indivíduos&quot;) 12.2.1 Resumo de gráficos univariados Além das funções gráficas apresentadas acima, vamos ver aqui as funções dotchart() e stripchart(), úteis para visualizar dados brutos. # para visualizar dados brutos head(caixeta) local parcela arvore fuste cap h especie dap chauas 1 1 1 210 80 Myrcia sulfiflora 66.84508 chauas 1 3 1 170 80 Myrcia sulfiflora 54.11268 chauas 1 4 1 720 70 Syagrus romanzoffianus 229.18312 chauas 1 5 1 200 80 Tabebuia cassinoides 63.66198 chauas 1 6 1 750 170 indet.1 238.73241 chauas 1 7 1 320 80 Myrcia sulfiflora 101.85916 # plotar a coluna altura (h) plot(caixeta$h, xlab = &quot;Observações&quot;, ylab = &quot;Altura (m)&quot;) # note que o único valor extremos fica super evidente # poderíamos usar a função dotchart para isso dotchart(caixeta$h, ylab = &quot;Observações&quot;, xlab = &quot;Altura (m)&quot;) # inversão dos eixos.. # vamos corrigir o valor extremo caixeta[which(caixeta$h &gt; 300), &quot;h&quot;] &lt;- 48 # faz um boxplot disso boxplot(caixeta$h) # já vimos isso, mas note os pontos isolados dos boxes (caixas), esses são valores isolados, meio fora da distribuicao summary(caixeta$h) # ve os quartis e média Min. 1st Qu. Median Mean 3rd Qu. Max. 5 60 90 89.86173 110 230 # plota a mediana abline(h = median(caixeta$h), col = &quot;red&quot;, lwd = 3) # plota todos os quartis abline(h = quantile(caixeta$h), col = &quot;blue&quot;, lwd = 2) # ve em forma de histograma hist(caixeta$h, breaks = 20) # plota os quartis abline(v = quantile(caixeta$h), col = &quot;blue&quot;, lwd = 2) dim(caixeta) ## [1] 1027 8 # ve o histograma na forma de pontos: ?stripchart stripchart(caixeta$h, method = &quot;stack&quot;, jitter = 0, offset = 1, ylim = c(0, nrow(caixeta)), xlab = &quot;altura (cm)&quot;) ## Numa tela só boxplot, histograma, densidade e stripchart olp &lt;- par(no.readonly = TRUE) par(mfrow = c(2, 2), mar = c(3, 3, 3, 0)) boxplot(caixeta$h) hist(caixeta$h) plot(stats::density(caixeta$h)) stripchart(caixeta$h, method = &quot;stack&quot;) par(olp) # resgata parametros graficos originais ## Histograma com diferentes larguras de barras par(mar = c(5, 4, 3, 1), mfrow = c(3, 2)) hist(caixeta$h, main = &quot;Default&quot;) hist(caixeta$h, breaks = 5, main = &quot;Cinco break-points&quot;) hist(caixeta$h, breaks = 10, main = &quot;Dez break-points&quot;) hist(caixeta$h, breaks = 15, main = &quot;Quinze break-points&quot;) hist(caixeta$h, breaks = 20, main = &quot;Vinte break-points&quot;, col = &quot;lightblue&quot;) par(olp) "],["as-variáveis-têm-distribuição-normal.html", "12.3 As variáveis têm distribuição normal?", " 12.3 As variáveis têm distribuição normal? A função density() que juntamente com hist(), que você já conhece, permite visualizar a densidade probabilística de uma variável numérica, ou seja descreve a distribuição de probabilidade, isto é, a chance de uma variável assumir um valor ao longo de um espaço (densidade) de valores. A função dnorm() permite obter a densidade probabilistica de uma distribuição normal teórica, para a mesma média e mesmo desvio padrão dos teus dados. Com isso você pode visualizar a distribuição dos seus dados e sobrepor a isso como seria a distribuição se os seus dados fossem normais. par(olp) ?density # veja o help disso # plota a densidade probabilistica = a curva da probabilidade da variável assumir certos valores de altura plot(stats::density(caixeta$h)) ## Histograma com área = 1 e density probabilistica sobreposta (argumento prob=TRUE, muda o eixo y) hist(caixeta$h, prob = T, breaks = 30, xlim = c(-1, max(caixeta$h) + 5)) # adiciona a linha da densidade lines(stats::density(caixeta$h), col = &quot;red&quot;, lwd = 2) # adiciona a média abline(v = mean(caixeta$h), col = &quot;green&quot;, lwd = 2, lty = &quot;solid&quot;) # note que na média a densidade probabilística é maior que nas caudas da distribuição # vamos adicionar sobre nossa distribuicao REAL a densidade probabilistica para uma distribuição normal com media e desvio igual ao dado ## Adicionando uma curva da normal aos graficos ?dnorm # veja o help dessa função e suas variantes. veremos isso melhor abaixo # pega a densidade probabilística de uma distribuição normal teórica, para quantis de seu interesse, segundo uma média e um desvio padrão dnorm(seq(0, 1, by = 0.25), mean = mean(caixeta$h), sd = sd(caixeta$h)) # esses são os valores que a distribuição probabilistica assume, numa distribuição normal que tem o mesma média e a mesmo desvio padrão que os seus dados ## [1] 0.0003251756 0.0003317476 0.0003384336 0.0003452351 0.0003521537 ?curve # veja que curve depende de uma função, ela traça a curva de uma f(x), num intervalo especificado de x (que foi plotado por hist) hist(caixeta$h, prob = T, breaks = 30, xlim = c(-1, max(caixeta$h) + 5)) # adiciona a linha da densidade lines(stats::density(caixeta$h), col = &quot;red&quot;, lwd = 2) # adiciona a média abline(v = mean(caixeta$h), col = &quot;green&quot;, lwd = 2, lty = &quot;solid&quot;) # combinamos as coisas e adicionamos a distribuição # teórica sobre os nosso dados ## Usamos a funcao curve, curve(expr = dnorm(x, mean = mean(caixeta$h), sd = sd(caixeta$h)), add = T, col = &quot;blue&quot;, lwd = 2) # note que os dados neste caso seguem bem uma curva normal. # Portanto, mesmo sem fazer um teste, essa figura sugere que os dados de altura do caixetal é normal As funções qqnorm() e qqline() permitem visualizar rapidamente se uma variável qualquer segue uma distribuição normal, ao compara os valores dos quantis empíricos (observados), com valores dos quantis teóricos (i.e. esperados por uma distribuição normal). A função rnorm() gera um conjunto de dados aleatórios que tem distribuição normal. # Teste de normalidade ###################################### ## Exemplo para o qqplot ########################################## # vamos simular valores ?rnorm # funcao que gera valores aleatórios que seguem uma distribuicao normal ## Sorteio de 100 valores de uma normal com media=30 e desvio-padrao=3 zz &lt;- rnorm(100, 30, 3) mean(zz) ## [1] 30.03516 sd(zz) ## [1] 2.666064 length(zz) ## [1] 100 hist(zz, prob = T) ## Valores arredondados para 2 casa, e ordenados x &lt;- sort(round(rnorm(100, 30, 3), 2)) ## Inspecionando os 5 primeiros e ultimos valores x[1:5] ## [1] 24.18 24.33 24.33 24.72 25.15 x[95:100] ## [1] 35.50 35.69 35.73 35.78 36.48 38.45 ## Calculo do percentil de cada valor # relembre a funcao order (ela retorna os indices dos valores ordenados) order(x) # veja que os indices estao sequenciais, porque geramos um vetor já pre-ordenado ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 # calculamos o percentil de cada valor, que é uma medida que indica o valor abaixo do qual uma certa porcentagem de observações existe. Por exemplo, o vigézimo percentil tem um valor, abaixo do qual 20% das observações são encontradas px &lt;- order(x) / 100 px ## [1] 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 ## [16] 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 ## [31] 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45 ## [46] 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 ## [61] 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75 ## [76] 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90 ## [91] 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.00 # vejamos a correspondencia # quantos valores são menores que o percentil 0.2 (ou 20%)? sum(px &lt; 0.2) # obviamente 19 se temos apenas 100 valores no nosso vetor ## [1] 19 # quais valores são esses x[order(x)][px &lt;= 0.2] ## [1] 24.18 24.33 24.33 24.72 25.15 25.20 25.65 26.00 26.17 26.26 26.51 26.60 ## [13] 26.62 26.79 26.93 26.96 27.07 27.28 27.31 27.31 # qual o valor do percentil x[order(x)][px == 0.2] ## [1] 27.31 hist(x, breaks = 20, col = &quot;gray&quot;) abline(v = x[order(x)][px == 0.2], col = &quot;red&quot;) # as barras com valores menores ou iguais que o do percentil (linha vermelha), totalizam 20% das observações. # com os percentis dos valores do dado original, podemos pegar a densidade probabilistica esperada se a distribuicao fosse normal q.norm.x &lt;- qnorm(px, mean = mean(x), sd = sd(x)) ## Juntando valores originais, os percentis e os valores esperados em um dataframe, para facilitar a visualizacao qq.plot.x &lt;- data.frame(x = x, percentil = px, q.norm = q.norm.x) qq.plot.x[1:5, ] x percentil q.norm 24.18 0.01 22.79771 24.33 0.02 23.63630 24.33 0.03 24.16836 24.72 0.04 24.56860 25.15 0.05 24.89417 qq.plot.x[95:100, ] x percentil q.norm 95 35.50 0.95 35.01423 96 35.69 0.96 35.33980 97 35.73 0.97 35.74004 98 35.78 0.98 36.27210 99 36.48 0.99 37.11069 100 38.45 1.00 Inf head(qq.plot.x) x percentil q.norm 24.18 0.01 22.79771 24.33 0.02 23.63630 24.33 0.03 24.16836 24.72 0.04 24.56860 25.15 0.05 24.89417 25.20 0.06 25.17129 ## com isso eu posso comparar meus valores observados com os valores esperados se a distribuição fosse normal plot(x ~ q.norm, data = qq.plot.x, xlab = &quot;Quantis Esperados&quot;, ylab = &quot;Valores Observados&quot;) abline(0, 1, col = &quot;red&quot;) # relacao esperada, caso os dados venham de uma populacao normal # note que a correlação é fortíssima, porque os usados no exemplo eram de fato normais, portanto, nenhuma surpresa nisso ## A funcao qqnorm ja faz isto de uma vez para voce: ?qqnorm # veja o help qqnorm(x) qqline(x, col = &quot;red&quot;) # suponha um dado não normal # cria um exemplo lognormal (nao é uma distribuicao normal) xlogn &lt;- rlnorm(nrow(avesc), meanlog = 30, sdlog = 1) hist(xlogn, prob = T, breaks = 20) lines(stats::density(xlogn), col = &quot;red&quot;, lwd = 2) # nao é uma cuva normal, certo? # mostra o QQ Plot nessa situação (veja como os pontos saem da linha) qqnorm(xlogn) qqline(xlogn, col = &quot;red&quot;) # entao vamos ver em dados reais # altura, já vimos antes, tem distribuição bem normal qqnorm(caixeta$h) qqline(caixeta$h, col = &quot;red&quot;) # cap por outro lado, é mais log normal qqnorm(caixeta$cap) qqline(caixeta$cap, col = &quot;red&quot;) "],["sabermais-aed-univariadas.html", "12.4 Para saber mais:", " 12.4 Para saber mais: Exercicio AED Univariadas. "],["aed-bivar.html", "Capítulo 13 AED de bivariadas", " Capítulo 13 AED de bivariadas Existe alguma relação entre as variáveis? A relação é linear? Há colinearidade? Ou seja, diferentes variáveis tem o mesmo padrão? "],["dados-do-tutorial-1.html", "13.1 Dados do tutorial", " 13.1 Dados do tutorial Vamos importar novamente os conjuntos de dados de avistamento de aves do cerrado (utilizado no capítulo 11) e de parcelas em caixetais (utilizado no capítulo 7): ## Lendo a planilha com read.table avesc &lt;- read.table(&quot;aves_cerrado.csv&quot;, row.names = 1, header = T, sep = &quot;;&quot;, dec = &quot;,&quot;, as.is = T, na.strings = c(&quot;NA&quot;, &quot;&quot;, &quot;NULL&quot;)) caixeta &lt;- read.csv(&quot;caixeta.csv&quot;) ## arquivo caixeta.csv deve estar no diretorio de trabalho # note que mantemos todos os argumentos padrão (veja o formato do arquivo caixeta) "],["fatores-e-contagens.html", "13.2 Fatores e contagens", " 13.2 Fatores e contagens Já vimos a função table() para contar valores em fatores e vetores em casos de univariados. Podemos usar a mesma função para gerar tabelas de contingência entre dois ou mais fatores. ## Numero de fustes de cada especie por local tb &lt;- table(caixeta$especie, caixeta$local) class(tb) ## [1] &quot;table&quot; tb chauas jureia retiro Alchornea triplinervia 0 3 12 Andira fraxinifolia 0 4 0 bombacaceae 0 1 0 Cabralea canjerana 0 4 0 Callophyllum brasiliensis 7 0 0 Calophyllum brasiliensis 0 4 0 Cecropia sp 0 0 1 Coussapoa macrocarpa 0 3 0 Coussapoa micropoda 2 0 7 Cryptocaria moschata 0 2 0 Cyathea sp 0 0 2 Eugenia oblongata 0 0 2 eugenia3 0 1 0 fabaceae1 0 1 0 Ficus sp 0 2 0 Gomidesia sp 0 1 0 Ilex durosa 0 8 0 Ilex sp 0 0 2 indet.1 1 0 0 indet.2 1 0 0 indet.3 1 0 0 Inga sp 0 4 0 Jacaranda puberula 0 2 0 jussara 0 37 0 Matayba sp 0 1 0 Mela 1 0 0 63 Mela 2 0 0 2 Myrcia sulfiflora 96 0 0 Myrtaceae 3 0 0 3 myrtaceae1 4 0 0 myrtaceae2 1 0 0 myrtaceae4 1 0 0 Pera glabrata 0 1 0 Persea sp 0 3 0 Pisonia sp 0 2 0 Psidium sp 3 17 0 Simplocos sp 0 2 0 Solanum sp1 0 0 1 Solanum sp2 0 0 1 Syagrus romanzoffianus 1 0 0 Tabebuia 1 0 0 10 Tabebuia cassinoides 306 138 254 Tibouchina nutticeps 2 0 0 # convertemos num data.frame tb &lt;- as.data.frame.matrix(tb) class(tb) ## [1] &quot;data.frame&quot; # calculo o total de individuos por especie total &lt;- apply(tb, 1, sum) total ## Alchornea triplinervia Andira fraxinifolia bombacaceae ## 15 4 1 ## Cabralea canjerana Callophyllum brasiliensis Calophyllum brasiliensis ## 4 7 4 ## Cecropia sp Coussapoa macrocarpa Coussapoa micropoda ## 1 3 9 ## Cryptocaria moschata Cyathea sp Eugenia oblongata ## 2 2 2 ## eugenia3 fabaceae1 Ficus sp ## 1 1 2 ## Gomidesia sp Ilex durosa Ilex sp ## 1 8 2 ## indet.1 indet.2 indet.3 ## 1 1 1 ## Inga sp Jacaranda puberula jussara ## 4 2 37 ## Matayba sp Mela 1 Mela 2 ## 1 63 2 ## Myrcia sulfiflora Myrtaceae 3 myrtaceae1 ## 96 3 4 ## myrtaceae2 myrtaceae4 Pera glabrata ## 1 1 1 ## Persea sp Pisonia sp Psidium sp ## 3 2 20 ## Simplocos sp Solanum sp1 Solanum sp2 ## 2 1 1 ## Syagrus romanzoffianus Tabebuia 1 Tabebuia cassinoides ## 1 10 698 ## Tibouchina nutticeps ## 2 # ordeno minha tabela orginal pelo total em ordem decrescente de abundância tb &lt;- tb[order(total, decreasing = T), ] head(tb) chauas jureia retiro Tabebuia cassinoides 306 138 254 Myrcia sulfiflora 96 0 0 Mela 1 0 0 63 jussara 0 37 0 Psidium sp 3 17 0 Alchornea triplinervia 0 3 12 # se eu quiser uma tabela de presença e ausência # bastaria substituir os valores&gt;0 por 1 tb[tb &gt; 0] &lt;- 1 head(tb) chauas jureia retiro Tabebuia cassinoides 1 1 1 Myrcia sulfiflora 1 0 0 Mela 1 0 0 1 jussara 0 1 0 Psidium sp 1 1 0 Alchornea triplinervia 0 1 1 # assim, agora eu posso saber quantas especie por localidade apply(tb, 2, sum) ## chauas jureia retiro ## 13 22 13 A função xtabs() tabula dados de frequência. ## xtabs: tabulacao de dados de frequencia ## Vamos usar Dataframe dos sobreviventes dos sobreviventes e mortos do Titanic ?Titanic # veja o que são esses dados data(&quot;Titanic&quot;) # puxamos esse dado class(Titanic) ## [1] &quot;table&quot; tit &lt;- as.data.frame(Titanic) # converte em data.frame head(tit) Class Sex Age Survived Freq 1st Male Child No 0 2nd Male Child No 0 3rd Male Child No 35 Crew Male Child No 0 1st Female Child No 0 2nd Female Child No 0 # classe de passageiros names(tit) ## [1] &quot;Class&quot; &quot;Sex&quot; &quot;Age&quot; &quot;Survived&quot; &quot;Freq&quot; str(tit) ## &#39;data.frame&#39;: 32 obs. of 5 variables: ## $ Class : Factor w/ 4 levels &quot;1st&quot;,&quot;2nd&quot;,&quot;3rd&quot;,..: 1 2 3 4 1 2 3 4 1 2 ... ## $ Sex : Factor w/ 2 levels &quot;Male&quot;,&quot;Female&quot;: 1 1 1 1 2 2 2 2 1 1 ... ## $ Age : Factor w/ 2 levels &quot;Child&quot;,&quot;Adult&quot;: 1 1 1 1 1 1 1 1 2 2 ... ## $ Survived: Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Freq : num 0 0 35 0 0 0 17 0 118 154 ... ## Quanto sobreviventes por sexo? ## Precisamos da funcao xtabs ?xtabs # veja o help dessa funcão: xtabs(Freq ~ Sex + Survived, data = tit) No Yes Male 1364 367 Female 126 344 # em porcentagem tb &lt;- xtabs(Freq ~ Sex + Survived, data = tit) prop.table(tb, margin = 1) No Yes Male 0.7879838 0.2120162 Female 0.2680851 0.7319149 # ou, se preferir round(prop.table(tb, margin = 1) * 100) No Yes Male 79 21 Female 27 73 # Quanto sobreviventes por classe de viagem? xtabs(Freq ~ Class + Survived, data = tit) No Yes 1st 122 203 2nd 167 118 3rd 528 178 Crew 673 212 # note que na primeira classe 203 sobreviveram # eu poderia ter perguntado isso assim: sum(tit[tit$Class == &quot;1st&quot; &amp; tit$Survived == &quot;Yes&quot;, &quot;Freq&quot;]) ## [1] 203 # ou seja, a funcao xtabs calculou a soma da frequencia # porcentagem prop.table(xtabs(Freq ~ Class + Survived, data = tit), margin = 1) No Yes 1st 0.3753846 0.6246154 2nd 0.5859649 0.4140351 3rd 0.7478754 0.2521246 Crew 0.7604520 0.2395480 ## E para combinacoes de mais de duas variaveis tb2 &lt;- xtabs(Freq ~ Class + Survived + Sex, data = tit) tb2 # veja o resultado e observe duas virgulas Class Survived Sex Freq 1st No Male 118 2nd No Male 154 3rd No Male 422 Crew No Male 670 1st Yes Male 62 2nd Yes Male 25 3rd Yes Male 88 Crew Yes Male 192 1st No Female 4 2nd No Female 13 3rd No Female 106 Crew No Female 3 1st Yes Female 141 2nd Yes Female 93 3rd Yes Female 90 Crew Yes Female 20 tb2[, , 1] # para Female No Yes 1st 118 62 2nd 154 25 3rd 422 88 Crew 670 192 tb2[, , 2] # note que não vimos isso antes, tb2, neste caso é um array, que um objeto que pode ter múltiplas dimensões, por isso as duas vírgulas, porque tem 3 dimensoes No Yes 1st 4 141 2nd 13 93 3rd 106 90 Crew 3 20 "],["variável-numérica-vs.-fator.html", "13.3 Variável numérica vs. fator", " 13.3 Variável numérica vs. fator A função tapply() faz uso de uma função sobre sobre um vetor numérico para cada categoria de um fator. A função aggregate() faz o mesmo, mas permite múltiplos fatores e retorna um data.frame. ## tapply: resumo de uma variavel numerica, separada por niveis de um ou mais fatores ?tapply # veja o help dessa função head(avesc) # se nao tem isso, importe novamente o arquivo aves_cerrado fisionomia urubu carcara seriema Ce1 Ce 5 18 6 Ce2 Ce 7 7 6 Ce3 Ce 5 14 4 Ce4 Ce 3 12 5 Ce5 Ce 4 16 4 Ce6 Ce NA 20 NA # número de individuos de carcara por fisionomia tapply(avesc$carcara, avesc$fisionomia, sum) ## CC ce Ce CL ## 212 14 291 NA # numero de individuos de urubo por fisionomia tapply(avesc$urubu, avesc$fisionomia, sum) ## CC ce Ce CL ## 299 13 NA 298 # numero médio de seriemas por localidade+fisionomia tapply(avesc$seriema, avesc$fisionomia, mean) ## CC ce Ce CL ## NA 4.0 NA 5.6 ## &quot;Tabelas dinamicas&quot;: funcao aggregate ## Criar data.frame com altura media dos fustes por especie e por local ?aggregate # veja o help dessa função names(caixeta) ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; # circunferencia máxima por especie ob1 &lt;- aggregate(caixeta$cap, by = list(especie = caixeta$especie), FUN = max) class(ob1) # obtenho um data frame ## [1] &quot;data.frame&quot; head(ob1) especie x Alchornea triplinervia 840 Andira fraxinifolia 340 bombacaceae 380 Cabralea canjerana 720 Callophyllum brasiliensis 1130 Calophyllum brasiliensis 2100 # neste caso também poderia fazer assim ob2 &lt;- tapply(caixeta$h, caixeta$especie, max) class(ob2) # mas neste caso nos temos um array (um vetor unidimensional) ## [1] &quot;array&quot; ob2[1:10] ## Alchornea triplinervia Andira fraxinifolia bombacaceae ## 140 90 150 ## Cabralea canjerana Callophyllum brasiliensis Calophyllum brasiliensis ## 150 200 160 ## Cecropia sp Coussapoa macrocarpa Coussapoa micropoda ## 70 100 110 ## Cryptocaria moschata ## 140 # mas se eu quiser por localidade e por especie, preciso usar aggregate caixeta.alt &lt;- aggregate(caixeta$h, by = list(local = caixeta$local, especie = caixeta$especie), FUN = max) head(caixeta.alt) local especie x jureia Alchornea triplinervia 140 retiro Alchornea triplinervia 100 jureia Andira fraxinifolia 90 jureia bombacaceae 150 jureia Cabralea canjerana 150 chauas Callophyllum brasiliensis 200 ## Vamos calcular a area basal (soma da area de todo os fustes) ## calculando a area basal de cada fuste, considerando o fuste um círculo perfeito, poderíamos usar: caixeta$ab &lt;- caixeta$cap^2 / 4 * pi ## e agora criamos a planilha, com aggregate, somando as areas basais dos fustes caixeta.2 &lt;- aggregate(caixeta$ab, by = list(local = caixeta$local, parcela = caixeta$parcela, especie = caixeta$especie), FUN = sum) class(caixeta.2) ## [1] &quot;data.frame&quot; head(caixeta.2) local parcela especie x retiro 1 Alchornea triplinervia 53092.92 jureia 2 Alchornea triplinervia 554176.94 retiro 2 Alchornea triplinervia 90949.11 retiro 3 Alchornea triplinervia 230121.66 jureia 4 Alchornea triplinervia 292246.66 jureia 5 Alchornea triplinervia 273397.10 "],["variável-numérica-vs.-numérica.html", "13.4 Variável numérica vs. numérica", " 13.4 Variável numérica vs. numérica Qual a relação entre as variáveis? É linear? Que hipóteses ou interpretação biológica eu faço das relações entre as variáveis? Qual a colinearidade dos meus dados? Para entender a razão e a importância dessas perguntas, veja a definição na WikiPedia sobre o efeito de colinearidade em regressões múltiplas. A função pairs() mostra as correlações das variáveis par a par de maneira gráfica, que podem ser estimadas por meio da função cor(). ## Exemplos de Graficos bivariados ## boxplot (já vimos o que isso significa) # mostra a variacao do avistamento de urubus nas diferentes fisionomias boxplot(cap ~ local, data = caixeta) # ou poderia escrever assim boxplot(caixeta$cap ~ caixeta$local) # note o valor extremo em jureia vl &lt;- caixeta$local == &quot;jureia&quot; &amp; caixeta$cap &gt; 1500 caixeta[vl, ] local parcela arvore fuste cap h especie ab 557 jureia 4 106 1 2100 160 Calophyllum brasiliensis 3463606 ## espalhagrama plot(h ~ cap, data = caixeta) # usando formula e especificacao dos dados # apenas para jureia plot(h ~ cap, data = caixeta, subset = local == &quot;jureia&quot;) plot(caixeta$h ~ caixeta$cap) # usando formula sem especificacao dos dados plot(caixeta$cap, caixeta$h) # especificando eixos separadamente (veja inversao) names(caixeta) ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; ## [8] &quot;ab&quot; # mostra linha de tendencia da relacao scatter.smooth(caixeta$cap, caixeta$h) ## pairs ## Matriz de espalhagramas das medidas das arvores no dataframe iris data(iris) names(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; pairs(iris) # todas as variaveis pairs(iris[, -ncol(iris)], ) # menos a ultima coluna = especie # colorindo por especie pairs(iris[, -ncol(iris)], pch = 21, bg = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;)[unclass(iris$Species)]) ?unclass # remove o atributo classe do objeto, então especies viram números # poderia fazer assim, tendo em vista que iris$Species é um fator: pairs(iris[, -ncol(iris)], pch = 21, bg = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris$Species)]) ## Essa figura é basicamente a expressao grafica da matriz de correlações entre todas as variáveis: cor(iris[, -ncol(iris)]) Sepal.Length Sepal.Width Petal.Length Petal.Width Sepal.Length 1.0000000 -0.1175698 0.8717538 0.8179411 Sepal.Width -0.1175698 1.0000000 -0.4284401 -0.3661259 Petal.Length 0.8717538 -0.4284401 1.0000000 0.9628654 Petal.Width 0.8179411 -0.3661259 0.9628654 1.0000000 # veja que essa matriz é simétrica e a diagonal tem valores =1, pois a correlação entre a variável e ela mesma é 100% tbcor &lt;- cor(iris[, -ncol(iris)]) # na diagnoal diag(tbcor) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 1 1 1 # acima da diagonal vacima &lt;- tbcor[upper.tri(tbcor)] # abaixo da diagonal vabaixo &lt;- tbcor[lower.tri(tbcor)] # entao, se é simétrica, os vetores contém os mesmos valores (a ordem não é a mesma por isso o sort) sort(vacima) == sort(vabaixo) ## [1] TRUE TRUE TRUE TRUE TRUE TRUE "],["outros-gráficos-bivariados.html", "13.5 Outros gráficos bivariados", " 13.5 Outros gráficos bivariados As funções xyplot() e bwplot() são oriundas do pacote lattice (Sarkar 2020) e permitem visualizar rapidamente relações entre variáveis por subgrupos de forma simples e rápida. # muitas funções do R interpretam formulas, que é uma forma simbólica curta para designar coisas complexas ?formula # leia com atenção a sessão de detalhes de como você pode especificar formulas, se ainda não fez isso, pois isso é uma forma de indicar ao R um modelo para graficar # no objeto iris plot(Sepal.Length + Sepal.Width ~ Species, data = iris, ylim = c(0, 13)) plot(Sepal.Length ~ Species, data = iris, add = T, col = &quot;red&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) plot(Sepal.Width ~ Species, data = iris, add = T, col = &quot;blue&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) # ou seja a primeira figura é o mesmo que fazer: tt &lt;- iris$Sepal.Length + iris$Sepal.Width plot(tt ~ iris$Species, add = T, col = &quot;green&quot;) # pois neste caso estamos plotando boxplots e a distribuicao dos valores da interacao entre comprimento e largura é basicamente a soma dos valores ## Graficos condicionados com o pacote lattice library(&quot;lattice&quot;) # carregue o pacote # qual a relacao entre comprimento de sepalas e comprimento de petalas por especie? ?xyplot # veja o help dessa funcao xyplot(Sepal.Length ~ Petal.Length | Species, data = iris) # ou mais complexo. Qual a relação entre as quatro variaveis em iris, por especie? xyplot(Sepal.Length + Sepal.Width ~ Petal.Length + Petal.Width | Species, data = iris, scales = &quot;sliced&quot;, auto.key = T) # note que neste caso as correlacoes estao individualizadas por espécie e que as cores representam as relações das variáveis par par ?bwplot # para multiplos boxplots ## um data.frame com as duas especies mais abundantes do caixetal head(caixeta) local parcela arvore fuste cap h especie ab chauas 1 1 1 210 80 Myrcia sulfiflora 34636.06 chauas 1 3 1 170 80 Myrcia sulfiflora 22698.01 chauas 1 4 1 720 70 Syagrus romanzoffianus 407150.41 chauas 1 5 1 200 80 Tabebuia cassinoides 31415.93 chauas 1 6 1 750 170 indet.1 441786.47 chauas 1 7 1 320 80 Myrcia sulfiflora 80424.77 tb &lt;- table(caixeta$especie) maisabund &lt;- names(tb[order(tb, decreasing = T)][1:2]) maisabund ## [1] &quot;Tabebuia cassinoides&quot; &quot;Myrcia sulfiflora&quot; # filtra os dados orginais para essas especies caixeta2 &lt;- caixeta[caixeta$especie %in% maisabund, ] # distribuicao dos valores de altura por local para cada especie bwplot(h ~ local | especie, data = caixeta2) # distribuicao dos valores de cap por classes de altura, por especie bwplot(h ~ cap | especie, data = caixeta2) # relacao altura vs cap por especie e por local xyplot(h ~ cap | especie + local, data = caixeta2, auto.key = T) Referências "],["aed-multivar.html", "Capítulo 14 AED de multivariadas", " Capítulo 14 AED de multivariadas Neste tutorial, vamos utilizar os pacotes abaixo. Caso você não possua algum dos pacotes listados, lembre-se de instalar cada um utilizando o comando abaixo: # Para instalar pacotes no R, use a funcao `install.packages()` install.packages(&quot;ape&quot;) install.packages(&quot;labdsv&quot;) Carregue-os todos e siga em frente. library(&quot;labdsv&quot;) library(&quot;ape&quot;) library(&quot;vegan&quot;) "],["matrizes-de-distância.html", "14.1 Matrizes de distância", " 14.1 Matrizes de distância Matrizes de distância ou dissimilaridade são muito usadas em AEDs multivariadas. Por exemplo, para estimar a similaridade entre diferentes comunidades vegetais segundo a presença ou ausência de espécies (ou um índice de similaridade que leva em conta as abundâncias relativas); para estimar a similaridade entre espécies ou a relação entre similaridade genética ou morfológica e distância geográfica etc. A função dist() é a mais básica do R para calcular dissimilaridades entre objetos. Ela calcula dissimilaridades segundo diferentes métodos (argumento method). Há também a função vegdist() do pacote vegan (Oksanen et al. 2020) que faz a mesma coisa, mas tem índices de dissimilaridade que dist() não implementa, muito dos quais muito usados em ecologia de comunidades. Busque ler o ? dessas duas funções (execute ?dist e ?vegdist no console), atentando para os diferentes índices de dissimilaridade. Na função vegdist(), você encontra os principais índices de dissimilaridade usados em ecologia. Para entender o que essas funções fazem, vamos ver um exemplo simples de cálculo de distância euclidiana, que é o método padrão de dist(). # usando o método euclidiano # plota um gráfico vazio com coordenadas x e y de 1 a 10 plot(1:10, 1:10, type = &quot;n&quot;) # adiciona dois pontos: # um na coordenada 4,4 points(4, 4, pch = 21, bg = &quot;red&quot;) # outro na coordenada x=8, y=8 points(8, 8, pch = 21, bg = &quot;blue&quot;) # a distancia euclidiana entre eles é dada por essa linha segments(4, 4, 8, 8) # essa linha é a hipotenusa do triângulo polygon(x = c(4, 8, 8, 4), y = c(4, 8, 4, 4), density = 40) # portanto a distancia entre os pontos, por Pitágoras, é # sqrt(hipotenusa) = sum(catetoA^2+catetoB^2) d &lt;- sqrt((8 - 4)^2 + (8 - 4)^2) # agora usando a função dist # coloco as coordenadas dos dois pontos acima num data.frame pontos &lt;- data.frame(X = c(4, 8), Y = c(4, 8)) pontos X Y 4 4 8 8 # calcula a distancia euclidiana para essas variáveis (X e Y) dist(pontos, method = &quot;eucl&quot;) ## 1 ## 2 5.656854 # entao isso é verdadeiro d == dist(pontos, method = &quot;eucl&quot;) ## [1] TRUE Referências "],["ordenação-com-matrizes-de-distância.html", "14.2 Ordenação com matrizes de distância", " 14.2 Ordenação com matrizes de distância Reduzir espaços multivariados em poucas dimensões a partir de matrizes de distância é útil quando nossas variáveis não têm distribuição normal, que é uma das premissas da Análise de Componentes Principais (PCA) e outros métodos de ordenação paramétricos. Se você parte de uma matriz de distância, pode fazer ordenações multivariadas com dados não normais ou mesmo dados categóricos e semi-quantitativos, desde que com eles você possa calcular uma matriz de distância. "],["escalonamento-não-métrico-multimensional-nmds.html", "14.3 Escalonamento Não-Métrico Multimensional (NMDS)", " 14.3 Escalonamento Não-Métrico Multimensional (NMDS) A NMDS é uma técnica de ordenação multivariada que permite visualizar graficamente distâncias entre objetos. No R há várias funções que executam isso: isoMDS(); cmdscale(); e nmds() e bestnmds() do pacote labdsv (Roberts 2019). Vamos usar a função bestnmds() nos exemplos abaixo. Para entender, veja um exemplo para distâncias geográficas entre cidades na região norte do Brasil. Se queremos representar graficamente distâncias geográficas, estaremos de certa forma reproduzindo um mapa: Vamos utilizar o conjunto de dados contendo coordenadas geográficas de municípios do Brasil para esta prática, utilizado na seção 3.4.2. # visualizando distancias usando NMDS # Vamos usar o arquivo com coordenadas dos municipios brasileiros muni &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, header = T, as.is = T, sep = &quot;\\t&quot;, na.strings = c(&quot;NA&quot;, &quot;&quot;, &quot;NULL&quot;)) Para simplificar, vamos filtrar apenas algumas cidades da região Norte: cids &lt;- c(&quot;Rio Branco&quot;, &quot;Cruzeiro do Sul&quot;, &quot;Tabatinga&quot;, &quot;São Gabriel da Cachoeira&quot;, &quot;Manaus&quot;, &quot;Santarém&quot;, &quot;Porto Velho&quot;, &quot;Humaitá&quot;, &quot;Belém&quot;, &quot;Macapá&quot;, &quot;Marabá&quot;, &quot;Boa Vista&quot;) # filtrando os dados vl &lt;- muni$Municipio %in% cids muni &lt;- muni[vl, ] # calcula a distancia geografica entre essas cidades (em graus de latitude). # Idealmente deveríamos converter latitude e longitude em décimos de graus para UTM para obter distancias em km ou m. mdist &lt;- dist(muni[, c(&quot;Longitude&quot;, &quot;Latitude&quot;)], method = &quot;euclidean&quot;) # calculando um nmds em dois eixos (reduzindo a variação na matriz em dois eixos) ?bestnmds Vamos utilizar a função bestnmds do pacote labdsv Vamos agora instalar o pacote e carregar o pacote labdsv: onmds &lt;- bestnmds(mdist, k = 2) ## [1] 3.528972e-13 8.167216e-03 2.228642e+01 3.791436e+01 6.603351e-03 ## [6] 6.029306e-03 2.109747e+01 9.041554e-03 4.415954e-03 4.861851e-01 ## [11] 4.001459e-03 8.141675e-03 9.111469e-03 3.737914e+01 6.265940e-03 ## [16] 4.124426e+01 9.818992e+00 2.702450e+01 3.316186e-03 3.712228e+01 ## ## best result = 1 ## with stress = 3.528972e-13 # veja a estrutura do resultado str(onmds) ## List of 3 ## $ points: num [1:21, 1:2] -18.2 -12.9 17.3 -14.7 -16.4 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:21] &quot;3&quot; &quot;14&quot; &quot;74&quot; &quot;135&quot; ... ## .. ..$ : NULL ## $ stress: num 3.53e-13 ## $ type : chr &quot;NMDS&quot; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;dsvord&quot; &quot;nmds&quot; ## - attr(*, &quot;call&quot;)= language bestnmds(dis = mdist, k = 2) ## - attr(*, &quot;timestamp&quot;)= chr &quot;Fri Sep 29 15:22:17 2023&quot; # o valor do stress indica o ajuste. Se o stress for 0, o ajuste é perfeito: # a posição dos pontos é proporcional a distância entre eles onmds$stress ## [1] 3.528972e-13 # quanto da variação foi explicada? # essa pergunta a gente faz com PCA, não faz sentido fazer com NMDS. # Mas, se você quer ter uma ideia de quanto um eixo capturou da variação, # pode correlacionar a matriz de distancia original com uma matriz de distancia # gerada pelos valores dos eixos nmds # pega os valores dos eixos NMDS ptsnmds &lt;- onmds$points # calcula a distancia adist &lt;- dist(ptsnmds) # qual a correlacao entre essas matrizes de distancia? cor(mdist, adist) ## [1] 1 # por isso o stress é baixo # vamos comparar graficamente: # divide o dispositivo em duas partes par(mfrow = c(2, 1), mar = c(5, 5, 1, 1)) # adiciona limite no eixo X e y xl &lt;- range(ptsnmds[, 1]) + c(-1, 10) yl &lt;- range(ptsnmds[, 2]) + c(-2, 2) # plota pontos plot(ptsnmds, type = &quot;p&quot;, pch = 21, bg = &quot;red&quot;, xlab = &quot;NMDS 1&quot;, ylab = &quot;NMDS 2&quot;, xlim = xl, ylim = yl, cex = 0.5) # adiciona o nome das cidades text(ptsnmds, labels = muni$Municipio, cex = 0.8, pos = 4) xl &lt;- range(muni$Longitude) + c(-2, 5) yl &lt;- range(muni$Latitude) + c(-2, 2) plot(muni$Longitude, muni$Latitude, type = &quot;p&quot;, xlab = &quot;Longitude&quot;, ylab = &quot;Latitude&quot;, xlim = xl, ylim = yl, pch = 21, cex = 0.5, col = &quot;blue&quot;) text(muni$Longitude, muni$Latitude, labels = muni$Municipio, cex = 0.8, pos = 4) 14.3.1 Exemplo com dados morfológicos Um exemplo de NMDS para mostra a similaridade entre indivíduos de Iris a partir de uma matriz de distância morfológica usando os dados de iris do R. data(iris) # #carrega o conjunto de dados de iris para a area de trabalho head(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa # calcula a distancia morfológica ?dist dmorfo &lt;- dist(iris[, 1:4], method = &quot;eucl&quot;) # calculando um nmds em dois eixos onmds &lt;- bestnmds(dmorfo, k = 2) # ops objetos 102 e 143 devem ser identificos iris[c(102, 143), ] Sepal.Length Sepal.Width Petal.Length Petal.Width Species 102 5.8 2.7 5.1 1.9 virginica 143 5.8 2.7 5.1 1.9 virginica # entao eliminamos 1, porque senao nao funciona iris2 &lt;- iris[-102, ] # calculamos novamente a distancia dmorfo &lt;- dist(iris2[, 1:4], method = &quot;eucl&quot;) # calculando um nmds em dois eixos onmds &lt;- bestnmds(dmorfo, k = 2) # veja a estrutura do resultado str(onmds) ## List of 3 ## $ points: num [1:149, 1:2] -2.67 -2.71 -2.87 -2.74 -2.72 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:149] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. ..$ : NULL ## $ stress: num 2.58 ## $ type : chr &quot;NMDS&quot; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;dsvord&quot; &quot;nmds&quot; ## - attr(*, &quot;call&quot;)= language bestnmds(dis = dmorfo, k = 2) ## - attr(*, &quot;timestamp&quot;)= chr &quot;Fri Feb 5 10:50:06 2021&quot; # o valor do stress indica o ajuste. Se stress for 0, o ajuste é perfeito onmds$stress ## [1] 2.579978 # quanto da variação foi explicada? # essa pergunta a gente faz com PCA, não faz sentido fazer com NMDS. # Mas, se você quer ter uma ideia de quanto um eixo capturou da variação, # pode correlacionar a matriz de distancia original # com uma matriz de distancia gerada pelos valores dos eixos nmds # pega os valores dos eixos NMDS ptsnmds &lt;- onmds$points # cada linha nessa tabela corresponde # à mesma linha na tabela iris2 head(ptsnmds) -2.673344 0.2751282 -2.705573 -0.1645018 -2.866471 -0.0970515 -2.737119 -0.2591412 -2.717433 0.2980718 -2.296804 0.6687755 # essas colunas são os dois eixos NMDS # isso deve ser verdadeiro nrow(ptsnmds) == nrow(iris2) ## [1] TRUE # calcula a distancia entre os pontos pelos eixos NMDS adist &lt;- dist(ptsnmds) # qual a correlacao entre essa matriz e a original? cor(dmorfo, adist) ## [1] 0.9988093 # por isso o stress é baixo, a correlação é alta Agora vamos fazer com outro índice de distância chamado gower, por exemplo, que é um bom índice quando se tem dados semiquantitativos na matriz (não é o caso aqui). Vamos utilizar a função vegdist() do pacote vegan (Oksanen et al. 2020). data(iris) iris2 &lt;- iris[-102, ] dmorfo2 &lt;- vegdist(iris2[, 1:4], method = &quot;gower&quot;) onmds2 &lt;- bestnmds(dmorfo2, k = 2) # pega os valores dos eixos NMDS ptsnmds2 &lt;- onmds2$points # cada linha nessa tabela corresponde # à mesma linha na tabela iris2 head(ptsnmds2) -0.2907098 0.0456498 -0.2712303 -0.0244397 -0.3013570 -0.0090738 -0.2933819 -0.0245441 -0.3066071 0.0494793 -0.2595641 0.1165398 # essas colunas são os dois eixos NMDS # isso deve ser verdadeiro nrow(ptsnmds2) == nrow(iris2) ## [1] TRUE # calcula a distancia entre os pontos pelos eixos NMDS adist2 &lt;- dist(ptsnmds2) # qual a correlacao entre essa matriz e a original? cor(dmorfo2, adist2) ## [1] 0.9950709 # por isso o stress é baixo, a correlação é alta # vamos visualizar os dois resultados, onmds e onmds2, graficamente # divide o dispositivo em dois par(mfrow = c(2, 1), mar = c(5, 5, 1, 1)) cores &lt;- c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(iris2$Species)] plot(ptsnmds, pch = 21, bg = cores, cex = 0.8, xlab = &quot;NMDS 1&quot;, ylab = &quot;NMDS 2&quot;, main = &quot;Objeto: ptsnmds&quot;) plot(ptsnmds2, pch = 21, bg = cores, cex = 0.8, xlab = &quot;NMDS 1&quot;, ylab = &quot;NMDS 2&quot;, main = &quot;Objeto: ptsnmds2&quot;) Referências "],["análises-de-agrupamento.html", "14.4 Análises de agrupamento", " 14.4 Análises de agrupamento A função hclust() faz uma análise de agrupamento a partir de uma matriz de distância e segundo um método. Gera um objeto de classe hclust que contem a estrutura hierárquica da similaridade entre os seus dados (a hierarquia dada pela distância mais o método de agrupamento). Em análises de agrupamento, é normal lidar com objetos de classe dendrogram. Podemos converter alguns objetos para esta classe usando a função as.dendrogram(), que facilita a geração de gráficos. Outra classe importante é phylo, utilizada em objetos que contenham árvores filogenéticas (pacote ape de Paradis et al. (2020)). Há a função as.phylo() que pode converter um objeto hclust para classe phylo e manipular o dendrograma como se fosse uma filogenia. Também facilita a geração de gráficos. # Vamos usar o arquivo com coordenadas dos municipios brasileiros muni &lt;- read.table(file = &quot;municipiosbrasil.csv&quot;, header = T, as.is = T, sep = &quot;\\t&quot;, na.strings = c(&quot;NA&quot;, &quot;&quot;, &quot;NULL&quot;)) cids &lt;- c(&quot;Rio Branco&quot;, &quot;Cruzeiro do Sul&quot;, &quot;Tabatinga&quot;, &quot;São Gabriel da Cachoeira&quot;, &quot;Manaus&quot;, &quot;Santarém&quot;, &quot;Porto Velho&quot;, &quot;Humaitá&quot;, &quot;Belém&quot;, &quot;Macapá&quot;, &quot;Marabá&quot;, &quot;Boa Vista&quot;) # filtrando os dados vl &lt;- muni$Municipio %in% cids &amp; muni$Regiao == &quot;Norte&quot; muni &lt;- muni[vl, ] rownames(muni) &lt;- muni$Municipio # calcula a distancia geografica entre essas cidades (em graus de latitude) mdist &lt;- dist(muni[, c(&quot;Longitude&quot;, &quot;Latitude&quot;)], method = &quot;euclidean&quot;) # veja o help de hclust e também # os diferente métodos de agrupamento ?hclust 14.4.1 Agrupamento pelo método da mínima variância gp &lt;- hclust(mdist, method = &quot;ward.D2&quot;) # visualizando plot(gp, main = &quot;Cidades da região norte&quot;, ylab = &quot;Distância geográfica (dd)&quot;) 14.4.2 Agrupamento por UPGMA gp2 &lt;- hclust(mdist, method = &quot;average&quot;) plot(gp2, hang = 0.1, main = &quot;Cidades da região norte&quot;, ylab = &quot;Distância geográfica (dd)&quot;) 14.4.3 Agrupamento por centróides gp3 &lt;- hclust(mdist, method = &quot;centroid&quot;) plot(gp3, hang = 0.1, main = &quot;Cidades da região norte&quot;, ylab = &quot;Distância geográfica (dd)&quot;) # teste outros métodos (entenda-os) Vamos converter nossos objetos gp e gp3 para objetos de classe phylo, e gerar um gráfico para cada um. ?plot.phylo plot(as.phylo(gp), type = &quot;phylogram&quot;, label.offset = 0.1, cex = 0.8) axis(side = 1) mtext(side = 1, line = 2.5, text = &quot;Distância geográfica&quot;) # ou entao, como cladograma, e nao usando o comprimento dos ramos (i.e. as distancias) plot(as.phylo(gp), type = &quot;cladogram&quot;, label.offset = 0.1, cex = 0.8, use.edge.length = F) # ou entao, radial, com distancias plot(as.phylo(gp), type = &quot;radial&quot;, label.offset = 0.1, cex = 0.8, use.edge.length = T) # usando comprimento dos ramos (distancias+relacoes) plot(as.phylo(gp), type = &quot;phylogram&quot;, label.offset = 0.1, cex = 0.8, use.edge.length = T) axis(side = 1) mtext(side = 1, line = 2.5, text = &quot;Distância geográfica&quot;) # nao usando o comprimento dos ramos (relacoes apenas) plot(as.phylo(gp), type = &quot;phylogram&quot;, label.offset = 0.1, cex = 0.8, use.edge.length = F, edge.color = &quot;red&quot;, edge.width = 2) 14.4.4 Exemplo florístico Vamos explorar a similaridade florística entre parcelas com os dados de caixetais novamente. caixeta &lt;- read.table(&quot;caixeta.csv&quot;, sep = &quot;,&quot;, header = T, na.strings = c(&quot;NA&quot;, &quot;&quot;, &quot;NULL&quot;)) head(caixeta) local parcela arvore fuste cap h especie chauas 1 1 1 210 80 Myrcia sulfiflora chauas 1 3 1 170 80 Myrcia sulfiflora chauas 1 4 1 720 70 Syagrus romanzoffianus chauas 1 5 1 200 80 Tabebuia cassinoides chauas 1 6 1 750 170 indet.1 chauas 1 7 1 320 80 Myrcia sulfiflora names(caixeta) ## [1] &quot;local&quot; &quot;parcela&quot; &quot;arvore&quot; &quot;fuste&quot; &quot;cap&quot; &quot;h&quot; &quot;especie&quot; # vamos visualizar a similaridade florística entre parcelas # entao geramos uma tabela de parcela vs. especies # primeiro um vetor com valores únicos para local+parcela # porque o número da parcela repete entre locais parcelas &lt;- paste(caixeta$local, caixeta$parcela, sep = &quot;-&quot;) tb &lt;- table(parcelas, especies = caixeta$especie) tb[, 1:5] Alchornea triplinervia Andira fraxinifolia bombacaceae Cabralea canjerana Callophyllum brasiliensis chauas-1 0 0 0 0 0 chauas-2 0 0 0 0 1 chauas-3 0 0 0 0 3 chauas-4 0 0 0 0 2 chauas-5 0 0 0 0 1 jureia-1 0 0 0 3 0 jureia-2 1 1 1 1 0 jureia-3 0 2 0 0 0 jureia-4 1 0 0 0 0 jureia-5 1 1 0 0 0 retiro-1 1 0 0 0 0 retiro-2 9 0 0 0 0 retiro-3 2 0 0 0 0 retiro-4 0 0 0 0 0 retiro-5 0 0 0 0 0 dim(tb) ## [1] 15 43 # essa tabela contém o número de indivíduos de cada espécie # em cada parcela # calculando um índice de distancia de Jaccard para dados de presença e ausência # transformando em uma tabela de presença e ausencia tb2 &lt;- tb tb2[tb2 &gt; 0] &lt;- 1 Vamos utilizar a função vegdist() do pacote vegan. ?vegdist djac &lt;- vegdist(tb2, method = &quot;jaccard&quot;) class(djac) ## [1] &quot;dist&quot; # é uma matriz de distancia entre parcela as.matrix(djac)[1:4, 1:4] chauas-1 chauas-2 chauas-3 chauas-4 chauas-1 0.0000000 0.7500000 0.80 0.8181818 chauas-2 0.7500000 0.0000000 0.50 0.5714286 chauas-3 0.8000000 0.5000000 0.00 0.2500000 chauas-4 0.8181818 0.5714286 0.25 0.0000000 Podemos fazer um NMDS com esse resultado: onmds &lt;- bestnmds(djac, k = 2) # parcelas 3 e 5 tem exatamente as mesmas espécies # vamos com colocar um valor super pequeno para essa distancia (quase zero) djac[djac == 0] &lt;- 0.0000000000000000001 # agora funciona onmds &lt;- bestnmds(djac, k = 2) # plotando o resultado # pega cores e simbolos segundo o local ll &lt;- data.frame(local = caixeta$local, parcelas) ll &lt;- unique(ll) rownames(ll) &lt;- ll$parcelas ll local parcelas chauas-1 chauas chauas-1 chauas-2 chauas chauas-2 chauas-3 chauas chauas-3 chauas-4 chauas chauas-4 chauas-5 chauas chauas-5 jureia-1 jureia jureia-1 jureia-2 jureia jureia-2 jureia-3 jureia jureia-3 jureia-4 jureia jureia-4 jureia-5 jureia jureia-5 retiro-1 retiro retiro-1 retiro-2 retiro retiro-2 retiro-3 retiro retiro-3 retiro-4 retiro retiro-4 retiro-5 retiro retiro-5 rn &lt;- rownames(as.matrix(tb2)) locais &lt;- as.factor(ll[rn, &quot;local&quot;]) cores &lt;- c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;)[as.numeric(locais)] pchs &lt;- (21:23)[as.numeric(locais)] plot(onmds$points, pch = pchs, bg = cores, xlab = &quot;NMDS1&quot;, ylab = &quot;NMDS2&quot;, cex = 1.5) legend(&quot;bottomright&quot;, legend = levels(locais), pch = 21:23, pt.bg = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), inset = 0.05, bty = &quot;n&quot;, cex = 1, pt.cex = 1.5, y.intersp = 1.5) Agora vamos visualizar o resultado na forma de um agrupamento: cluster &lt;- hclust(djac, method = &quot;ward.D2&quot;) plot(cluster, ylab = &quot;Dissimilaridade Florística (Jaccard)&quot;) Para aprimorar a figura, vamos utilizar a função as.phylo() do pacote ape (Paradis et al. 2020) para converter o objeto cluster de classe dendrogram para um de classe phylo. pcl &lt;- as.phylo(cluster) par(mar = c(5, 4, 3, 3)) plot(pcl, tip.color = cores, label.offset = 0.02, cex = 0.8) # pontos tiplabels(pch = 21, frame = NULL, bg = cores) # eixo axisPhylo() # nome do eixo mtext(text = &quot;Jaccard índice (0 ou 1)&quot;, side = 1, line = 2.5) legend(&quot;topleft&quot;, legend = levels(locais), pch = 21:23, pt.bg = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), inset = 0.01, bty = &quot;n&quot;, cex = 1, pt.cex = 1.5, y.intersp = 1.5) Vamos repetir essa operação considerando a abundância de espécies por parcelas contidos no objeto tb (usamos o índice de Sorensen). tb[1:4, 1:5] Alchornea triplinervia Andira fraxinifolia bombacaceae Cabralea canjerana Callophyllum brasiliensis chauas-1 0 0 0 0 0 chauas-2 0 0 0 0 1 chauas-3 0 0 0 0 3 chauas-4 0 0 0 0 2 # sorensen (bray na convencao do R) dsor &lt;- vegdist(tb, method = &quot;bray&quot;) onmds2 &lt;- bestnmds(dsor, k = 2) Plota o NMDS: plot(onmds2$points, pch = pchs, bg = cores, xlab = &quot;NMDS1&quot;, ylab = &quot;NMDS2&quot;, cex = 1.5) legend(&quot;bottomright&quot;, legend = levels(locais), pch = 21:23, pt.bg = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), inset = 0.05, cex = 0.8, pt.cex = 1.5, y.intersp = 1.5, bty = &quot;n&quot;) Agora, vamos plotar o agrupamento: cluster2 &lt;- hclust(dsor, method = &quot;ward.D2&quot;) pcl2 &lt;- as.phylo(cluster2) par(mar = c(5, 4, 3, 3)) plot(pcl2, tip.color = cores, label.offset = 0.02, cex = 0.8) tiplabels(pch = 21, frame = NULL, bg = cores) axisPhylo() mtext(text = &quot;Sorensen índice (com abundância)&quot;, side = 1, line = 2.5) legend(&quot;topleft&quot;, legend = levels(locais), pch = 21:23, pt.bg = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), inset = 0.01, bty = &quot;n&quot;, cex = 1, pt.cex = 1.5, y.intersp = 1.5) 14.4.5 Análise de Coordenadas Principais (PCoA) A função capscale()faz uma análise de coordenadas principais (ou escalonamento multidimensional métrico ou clássico). É parecida com uma Análise de Componentes Principais (PCA), mas é baseada em matrizes de distância. Indica os efeitos das variáveis (parâmetro ‘’species’’) sobre os eixos. Já a função ordiplot() do pacote vegan (Oksanen et al. 2020) permite graficar uma ordenação e os efeitos das variáveis (sites vs. species). Leiam aqui uma comparação entre PCA e PCoA # análise de coordenadas principais data(iris) # carrega o conjunto de dados iris dt &lt;- iris[, 1:4] mypcoa &lt;- capscale(dt ~ 1, distance = &quot;gower&quot;, add = F) # quando da variação está explicado pelos eixos resumo &lt;- summary(mypcoa) var.expl &lt;- resumo$cont$importance # veja a proporção cumulativa dos primeiros cinco eixos var.expl[&quot;Cumulative Proportion&quot;, ][1:5] ## MDS1 MDS2 MDS3 MDS4 MDS5 ## 0.7468617 0.8614730 0.8946967 0.9148675 0.9289785 # pega a proporção explicada por cada eixo tt &lt;- var.expl[&quot;Proportion Explained&quot;, ][1:5] tt &lt;- tt * 100 # gera um gráfico de barras com isso barplot(tt, xlab = &quot;Eixos MDS&quot;, ylab = &quot;Variação explicada %&quot;) # fazendo uma figura com ordiplot # veja o help ?ordiplot # define cor e simbolo por especie tx &lt;- as.factor(iris$Species) # simbolos para os níveis upchs &lt;- 21:23 # cores para os níveis cores &lt;- rainbow(length(levels(tx)), alpha = 0.5) # gera a figura fig &lt;- ordiplot(mypcoa, type = &quot;n&quot;) fig ## $species ## MDS1 MDS2 ## Sepal.Length 2.0020165 -1.1230766 ## Sepal.Width -0.4980034 -1.8451477 ## Petal.Length 4.7366457 0.1241131 ## Petal.Width 2.0004259 -0.1699399 ## ## $sites ## MDS1 MDS2 ## 1 -0.639346910 -0.334337841 ## 2 -0.596126508 0.275887062 ## 3 -0.653319917 -0.016126551 ## 4 -0.636358760 0.140021832 ## 5 -0.674817738 -0.392213943 ## 6 -0.579155725 -0.546656575 ## 7 -0.671063265 -0.221682254 ## 8 -0.626572082 -0.242899975 ## 9 -0.664279148 0.519847477 ## 10 -0.614966776 0.122714593 ## 11 -0.615294321 -0.511938998 ## 12 -0.646472500 -0.228283528 ## 13 -0.629731020 0.299388944 ## 14 -0.722261196 0.369205877 ## 15 -0.622437432 -0.762492184 ## 16 -0.629173895 -0.726881442 ## 17 -0.618980764 -0.564370107 ## 18 -0.615191970 -0.323676845 ## 19 -0.533502504 -0.626059993 ## 20 -0.661661401 -0.501714454 ## 21 -0.542715066 -0.306701055 ## 22 -0.616801217 -0.436985257 ## 23 -0.774448860 -0.405722239 ## 24 -0.502107026 -0.142145011 ## 25 -0.614590494 -0.211062294 ## 26 -0.563614627 0.256656581 ## 27 -0.568570813 -0.223711949 ## 28 -0.613242267 -0.349056953 ## 29 -0.604086865 -0.278203211 ## 30 -0.624882833 -0.013140058 ## 31 -0.598972751 0.125800250 ## 32 -0.515682484 -0.298552065 ## 33 -0.754577597 -0.603205019 ## 34 -0.703082687 -0.661783818 ## 35 -0.595079133 0.114900783 ## 36 -0.618584029 -0.038036413 ## 37 -0.580529961 -0.407379782 ## 38 -0.713019060 -0.394969549 ## 39 -0.672009242 0.335685222 ## 40 -0.610912068 -0.259288303 ## 41 -0.640144469 -0.309883661 ## 42 -0.711752273 1.240346847 ## 43 -0.695263034 -0.001191832 ## 44 -0.535343600 -0.269742736 ## 45 -0.591424977 -0.468299556 ## 46 -0.586455349 0.286593625 ## 47 -0.676667980 -0.511683895 ## 48 -0.658539186 -0.011843595 ## 49 -0.632891474 -0.494385045 ## 50 -0.617572023 -0.153342992 ## 51 0.292460092 -0.297630508 ## 52 0.221901481 -0.221174100 ## 53 0.339843741 -0.177183638 ## 54 0.051126045 0.843979557 ## 55 0.300908538 0.232678671 ## 56 0.111814267 0.339772311 ## 57 0.241893772 -0.355988490 ## 58 -0.202930046 1.012615941 ## 59 0.248080500 0.131744670 ## 60 0.007993323 0.554619740 ## 61 -0.182673684 1.239393372 ## 62 0.139701498 0.091146313 ## 63 0.059288614 0.848318236 ## 64 0.209733460 0.169175362 ## 65 -0.005068163 0.282602772 ## 66 0.238141035 -0.120973367 ## 67 0.122837631 0.109976117 ## 68 0.016222534 0.467788379 ## 69 0.311051516 0.770411121 ## 70 -0.005187421 0.689554745 ## 71 0.242920369 -0.241807259 ## 72 0.125256797 0.316113208 ## 73 0.340574069 0.527424554 ## 74 0.171841708 0.288331764 ## 75 0.189798259 0.162593178 ## 76 0.238519249 0.016465753 ## 77 0.338082159 0.216400983 ## 78 0.387884789 -0.062564151 ## 79 0.198311313 0.179797967 ## 80 -0.061965220 0.599067756 ## 81 -0.032867870 0.789833613 ## 82 -0.073171586 0.800055220 ## 83 0.047214150 0.463286100 ## 84 0.309497015 0.339528626 ## 85 0.093549599 0.131907477 ## 86 0.167239565 -0.392321622 ## 87 0.294024647 -0.147628397 ## 88 0.247163015 0.723407445 ## 89 0.035767804 0.161489751 ## 90 0.044401583 0.682945567 ## 91 0.057076478 0.581691950 ## 92 0.186717733 0.064915200 ## 93 0.063819056 0.555072534 ## 94 -0.197650713 1.043312580 ## 95 0.072437323 0.471714137 ## 96 0.036318404 0.149934488 ## 97 0.070911803 0.250386339 ## 98 0.160141241 0.186612762 ## 99 -0.184452975 0.835312341 ## 100 0.070658484 0.359870688 ## 101 0.544341091 -0.672495149 ## 102 0.346531367 0.308880496 ## 103 0.628620224 -0.234682070 ## 104 0.425700939 0.044029368 ## 105 0.548076546 -0.174012341 ## 106 0.765563971 -0.307081449 ## 107 0.135746747 0.775251807 ## 108 0.639181023 -0.042979700 ## 109 0.582823197 0.444894512 ## 110 0.684892213 -1.355474212 ## 111 0.409601151 -0.385190295 ## 112 0.473494068 0.264687908 ## 113 0.545418856 -0.176398832 ## 114 0.367484149 0.500353060 ## 115 0.429508150 0.195416139 ## 116 0.472591785 -0.436408978 ## 117 0.429846283 -0.095370475 ## 118 0.754725571 -1.656863357 ## 119 0.957805291 0.289914582 ## 120 0.331639633 0.765685406 ## 121 0.589370455 -0.569532674 ## 122 0.300489412 0.212345851 ## 123 0.812656344 0.057296569 ## 124 0.391276588 0.301638945 ## 125 0.506555039 -0.651564472 ## 126 0.544049996 -0.518977132 ## 127 0.348827435 0.208563553 ## 128 0.310203435 -0.013129804 ## 129 0.532244657 0.118476560 ## 130 0.505511316 -0.139381364 ## 131 0.686686146 0.082078523 ## 132 0.706147930 -1.544179310 ## 133 0.554407566 0.113570942 ## 134 0.321286620 0.222228206 ## 135 0.334641562 0.429203845 ## 136 0.784610274 -0.342923892 ## 137 0.481116598 -0.761450083 ## 138 0.399240507 -0.223139690 ## 139 0.284133608 0.001057007 ## 140 0.533100767 -0.337438424 ## 141 0.584583765 -0.365420874 ## 142 0.545530105 -0.337529051 ## 143 0.346531367 0.308880496 ## 144 0.592570293 -0.572375037 ## 145 0.585340077 -0.729980814 ## 146 0.543070756 -0.160569316 ## 147 0.457165585 0.481666379 ## 148 0.447862748 -0.107690190 ## 149 0.428195734 -0.701597535 ## 150 0.296121356 -0.013659497 ## ## attr(,&quot;const&quot;) ## [1] 5.974659 ## attr(,&quot;class&quot;) ## [1] &quot;ordiplot&quot; # adiciona os pontos de cada linha - ATENCAO - Rode os dois comandos abaixo juntos ordiplot(mypcoa, type = &quot;n&quot;) points(fig, &quot;sites&quot;, pch = upchs[as.numeric(tx)], bg = cores[as.numeric(tx)], col = &quot;white&quot;) # pega os scores das variáveis # que mostram os efeitos das variáveis usadas mls &lt;- vegan::scores(mypcoa, display = &quot;species&quot;) mls MDS1 MDS2 Sepal.Length 2.0020165 -1.1230766 Sepal.Width -0.4980034 -1.8451477 Petal.Length 4.7366457 0.1241131 Petal.Width 2.0004259 -0.1699399 ordiplot(mypcoa, type = &quot;n&quot;) points(fig, &quot;sites&quot;, pch = upchs[as.numeric(tx)], bg = cores[as.numeric(tx)], col = &quot;white&quot;) # plota flechas para esses efeitos arrows(0, 0, mls[, 1] * 0.8, mls[, 2] * 0.8, length = 0.05, angle = 20, col = &quot;black&quot;, lwd = 2) text(mls[, 1] * 0.8, mls[, 2] * 0.8, labels = rownames(mls), col = &quot;black&quot;, cex = 0.8, pos = 4) Referências "],["componentes-principais-pca.html", "14.5 Componentes Principais (PCA)", " 14.5 Componentes Principais (PCA) Análise de Componentes Principais (PCA) é o método mais conhecido de ordenação, mas diferentemente dos métodos que se baseiam em matrizes de distância (ver abaixo) que são mais flexíveis e menos exigentes quanto à premissas estatísticas, a ordenação com PCA tem as seguintes limitações: Os componentes principais são independentes apenas se os dados possuirem distribuição normal conjuntamente; A PCA é sensível à escala relativa das variáveis originais. Um exemplo: # análise de componentes principais ?prcomp data(iris) # carrega o conjunto de dados iris para a rea de trabalho dt &lt;- iris[, 1:4] meu.pca &lt;- prcomp(dt, scale. = T, tol = 0, retx = T) # entenda os argumentos usados # classe gerada class(meu.pca) ## [1] &quot;prcomp&quot; # elementos do resultado names(meu.pca) ## [1] &quot;sdev&quot; &quot;rotation&quot; &quot;center&quot; &quot;scale&quot; &quot;x&quot; Vamos fazer uma figura utilizando a função ordiplot() do pacote vegan: # fazendo uma figura com ordiplot # veja o help ?ordiplot # quando da variação está explicado pelos eixos resumo &lt;- summary(meu.pca) var.expl &lt;- resumo$importance # veja a proporção cumulativa dos eixos gerados var.expl[&quot;Cumulative Proportion&quot;, ] ## PC1 PC2 PC3 PC4 ## 0.72962 0.95813 0.99482 1.00000 # quatro eixos explicam 100% da variacao # pega a proporção explicada por cada eixo tt &lt;- var.expl[&quot;Proportion of Variance&quot;, ] tt &lt;- tt * 100 # gera um gráfico de barras com isso barplot(tt, xlab = &quot;Eixos PCA&quot;, ylab = &quot;Variação explicada %&quot;) # define cor e simbolo por especie tx &lt;- as.factor(iris$Species) # simbolos para os níveis upchs &lt;- 21:23 # cores para os níveis cores &lt;- rainbow(length(levels(tx)), alpha = 0.5) # gera a figura fig &lt;- ordiplot(meu.pca, type = &quot;n&quot;) # adiciona os pontos de cada linha ordiplot(meu.pca, type = &quot;n&quot;) points(fig, &quot;sites&quot;, pch = upchs[as.numeric(tx)], bg = cores[as.numeric(tx)], col = &quot;white&quot;) # pega os scores das variaveis # que mostram os efeitos das variáveis usadas mls &lt;- vegan::scores(meu.pca, display = &quot;species&quot;) mls PC1 PC2 PC3 PC4 Sepal.Length 0.5210659 -0.3774176 0.7195664 0.2612863 Sepal.Width -0.2693474 -0.9232957 -0.2443818 -0.1235096 Petal.Length 0.5804131 -0.0244916 -0.1421264 -0.8014492 Petal.Width 0.5648565 -0.0669420 -0.6342727 0.5235971 # plota flexas para esses efeitos ordiplot(meu.pca, type = &quot;n&quot;) points(fig, &quot;sites&quot;, pch = upchs[as.numeric(tx)], bg = cores[as.numeric(tx)], col = &quot;white&quot;) ft &lt;- 2 # para aumentar as flexas um pouco arrows(0, 0, mls[, 1] * ft, mls[, 2] * ft, length = 0.05, angle = 20, col = &quot;black&quot;, lwd = 2) text(mls[, 1] * ft, mls[, 2] * ft, labels = rownames(mls), col = &quot;black&quot;, cex = 0.8, pos = 4) "],["base-tidyverse.html", "A Base R vs. Tidyverse", " A Base R vs. Tidyverse A linguagem R completou 20 anos de idade neste mês de março de 2020, e a cada dia se torna mais popular. Pesquisa recente publicada no mês de março feita pelo TIOBE Programming Community Index, um site que agrega indicadores sobre a popularidade de linguagens de programação, posiciona a linguagem como a 11º entre as mais populares no mundo A TIOBE agrega dados do Google, Yahoo, Bing, Wikipedia, Youtube, Badu, e Amazon, para gerar estes resultados, que são apresentados mensalmente. Parte dessa popularidade é relativamente recente, podendo ser verificada a partir do ano de 2014. Coincidência ou não, 2014 é o ano de surgimento do pacote dplyr, o primeiro de uma série de pacotes que coletivamente vieram a se tornar conhecidos como Tidyverse. Porcentagem de visitas às questões pertinentes a algumas linguagens de programação na plataforma Stack Overflow. Dados obtidos apenas de países desenvolvidos segundo o Banco Mundial. Nota-se o aumento quase linear referente à linguagem R a partir do ano 2014. Figura extraída desta postagem: https://stackoverflow.blog/2017/10/10/impressive-growth-r/ "],["o-que-é-o-tidyverse.html", "A.1 O que é o Tidyverse?7", " A.1 O que é o Tidyverse?7 O Tidyverse é um conjunto de pacotes de R desenvolvidos para a ciência de dados. Todos os pacotes compartilham uma mesma filosofia e gramática da linguagem. Por exemplo, a estrutura das funções é sempre a mesma: o primeiro argumento sempre é data, isto é, você deve sempre apresentar os dados neste local. Já que o universo destes pacotes é focado em dados na forma de uma tabela, aqui sempre deve ser fornecido um data.frame; Argumentos posteriores modificam o data.frame por exemplo, na função select() do pacote dplyr, você deve fornecer os nomes das colunas que deseja selecionar no seu conjunto de dados; na função separate_rows do pacote tidyr, você deve fornecer os nomes das colunas que se deseja separar em uma ou mais colunas além de indicar o separador (por exemplo, você pode ter uma coluna que possui os nomes Sapotaceae;Burseraceae e deseja separar isso em duas colunas; você deve indicar que o separador é ;). A função sempre deve retornar um data.frame (existem algumas exceções feitas às funções de alguns pacotes voltados exclusivamente para lidar com vetores, como por exemplo o pacote purrr; porém o uso dessas funções é geralmente utilizado dentro de colunas do seu data.frame) Pretendemos aqui apresentar apenas funcionalidades básicas de dois dos pacotes deste universo, e mostrar como se tornam poderosas quando integrados ao mesmo fluxo de trabalho. A.1.1 dplyr e ggplot2, símbolos do Tidyverse Talvez os pacotes mais conhecidos deste universo sejam o dplyr e o ggplot2. Enquanto o primeiro é especializado na manipulação de dados, o segundo é voltado para a produção de plots. O dplyr surgiu com o objetivo de fornecer um conjunto de ferramentas (suas funções!) para uma manipulação eficiente de conjuntos de dados sob a forma de data.frames, e rapidamente, ganhou muitos adeptos devido à facilidade de uso de suas funções dentro de uma nova gramática para a manipulação de dados (palavras do criador do pacote, Hadley Wickham, em sua postagem de introdução do pacote). Essa nova gramática incluiu tanto o uso de funções com nomes de verbos (em inglês, vale ressaltar) desenhados para executar muito bem apenas uma ação (Tabela A.1), quanto o uso do que se convencionou chamar de pipe, criado para encadear ações da esquerda para a direita, resultando em menos objetos intermediários estocados na área de trabalho e facilitando a leitura do código. Com o uso de verbos como nome de funções e uma sintaxe diferente da tradicionalmente utilizada em R, o pacote ganhou muitos adeptos deste sua disponibilização no CRAN em janeiro de 2012. Seguindo o mesmo caminho, o pacote ggplot2 (Tabela A.2), também do mesmo autor do pacote dplyr, porém já de muito mais idade (foi lançado oficialmente em 10 de junho de 2007) se tornou uma referência na produção de gráficos utilizando a linguagem R, ao propor a construção de gráficos por camadas, similar ao utilizado em programas de SIG. Dentro desta nova sintaxe em R, o operador + ganhou uma nova função. Nas próximas seções, vamos ver alguns exemplos práticos utilizando esses dois pacotes. Texto publicado originalmente no blog de R.O.Perdiz (https://www.ricardoperdiz.com/blog/2020-04-tidyverse/)↩︎ "],["usando-o-dplyr.html", "A.2 Usando o dplyr", " A.2 Usando o dplyr Vamos utilizar o famoso conjunto iris8 para aprender a manipular os dados com as ferramentas do dplyr. Vamos aprender brevemente como funcionam as principais funções deste pacote (Tabela A.1). Primeiro vamos carregar o pacote para a sessão de trabalho: library(&quot;dplyr&quot;) Tabela A.1: Principais funções do pacote R dplyr. Função O que faz select() seleciona colunas dos dados filter() filtra linhas específicas dos dados arrange() ordena as linhas do data.frame mutate() cria novas colunas no data.frame summarise() sumariza os dados de acordo com grupos group_by() agrupa os dados segundo grupos A.2.1 Selecionando colunas com select() Agora, vamos utilizar a função select() para selecionar colunas. Ela funciona da seguinte maneira: primeiro, utiliza-se como primeiro argumento o nome do data.frame que se deseja trabalhar; em nosso caso, o data.frame se chama iris: select(iris, ...); depois, colocamos no lugar de ... o nome das colunas que desejamos selecionar, sem aspas. Por exemplo, se quisermos selecionar a coluna das espécie, fazemos assim: head( select(iris, Species), 10 ) Species setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa Ou se quisermos a coluna de comprimento de pétala mais a coluna das espécies: head( select(iris, Petal.Length, Species), 10 ) Petal.Length Species 1.4 setosa 1.4 setosa 1.3 setosa 1.5 setosa 1.4 setosa 1.7 setosa 1.4 setosa 1.5 setosa 1.4 setosa 1.5 setosa Também podemos utilizar funções auxiliares para executar buscas nos nomes das colunas segundo determinados padrões. Entre essas funções auxiliares, destacamos a função contains(). Por exemplo, se quisermos selecionar todas as variáveis que contêm “Petal” em seus nomes: head( select(iris, contains(&quot;Petal&quot;)), 10 ) Petal.Length Petal.Width 1.4 0.2 1.4 0.2 1.3 0.2 1.5 0.2 1.4 0.2 1.7 0.4 1.4 0.3 1.5 0.2 1.4 0.2 1.5 0.1 A.2.2 Filtrando dados com filter() Se desejamos filtrar os dados segundo alguma informação, devemos utilizar a função filter(). Por exemplo, se quiser checar os dados de pétalas apenas para a espécie setosa, fazemos assim: head( filter(iris, Species == &quot;setosa&quot;), 10 ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa Ou então quais amostras da espécie virginica possuem comprimento de sépala maior que 7 cm: head( filter(iris, Species == &quot;virginica&quot;, Sepal.Length &gt; 7), 10 ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 7.1 3.0 5.9 2.1 virginica 7.6 3.0 6.6 2.1 virginica 7.3 2.9 6.3 1.8 virginica 7.2 3.6 6.1 2.5 virginica 7.7 3.8 6.7 2.2 virginica 7.7 2.6 6.9 2.3 virginica 7.7 2.8 6.7 2.0 virginica 7.2 3.2 6.0 1.8 virginica 7.2 3.0 5.8 1.6 virginica 7.4 2.8 6.1 1.9 virginica E se quisermos adicionar uma coluna em iris que consiste na razão entre o comprimento da pétala pelo comprimento da sépala? Chamaremos nossa nova coluna de razaopetsep: head( mutate(iris, razaopetsep = Petal.Length / Sepal.Length), 10 ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species razaopetsep 5.1 3.5 1.4 0.2 setosa 0.2745098 4.9 3.0 1.4 0.2 setosa 0.2857143 4.7 3.2 1.3 0.2 setosa 0.2765957 4.6 3.1 1.5 0.2 setosa 0.3260870 5.0 3.6 1.4 0.2 setosa 0.2800000 5.4 3.9 1.7 0.4 setosa 0.3148148 4.6 3.4 1.4 0.3 setosa 0.3043478 5.0 3.4 1.5 0.2 setosa 0.3000000 4.4 2.9 1.4 0.2 setosa 0.3181818 4.9 3.1 1.5 0.1 setosa 0.3061224 A.2.3 Destrinchando as funções group_by e summarise As funções group_by e summarise resumem o propósito do pacote dplyr, pois permitem em poucas linhas de comando sumariar os dados, e partem do princípio, muito presente no R através das funções da família apply, chamado split-apply-combine que, em tradução livre, pode ser entendido como uma sequência lógica de ação: quebre em grupos, aplique uma função, e combine os resultados. Vamos partir para o uso dessas funções agrupando os dados em função da coluna Species e calculando a média do comprimento das pétalas (variável Petal.Length): iris_grouped &lt;- group_by(iris, Species) iris_sumario &lt;- summarise(iris_grouped, petala_l_media = mean(Petal.Length, na.rm = TRUE)) iris_sumario Species petala_l_media setosa 1.462 versicolor 4.260 virginica 5.552 Vamos destrinchar o que fizemos acima. A função group_by os dados em função de alguma ou algumas variáveis. Essa função geralmente é utilizada em conjunto com a função summarise para gerar sumários estatísticos de uma ou mais variáveis. head( group_by(iris, Species), 10 ) ## # A tibble: 10 × 5 ## # Groups: Species [1] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa Vejam que, acima das linhas do conjunto de dados, há a seguinte sentença: ## # Groups: Species [1] Ela informa que o objeto gerado a partir de group_by está agrupado ao redor da variável Species. Pensando no pacote base, é como pensar que a variável Species é o argumento INDEX da função tapply(): todos os cálculos a partir desse objeto ocorrerão em função dessa variável. Após agrupar os dados, nós colocamos esse data.frame agrupado via group_by(), iris_grouped &lt;- group_by(iris, Species), como primeiro argumento da função summarise() para então calcular a média do comprimento de pétala: iris_grouped &lt;- group_by(iris, Species) summarise(iris_grouped, petala_l_media = mean(Petal.Length, na.rm = TRUE)) Species petala_l_media setosa 1.462 versicolor 4.260 virginica 5.552 A partir desse mesmo data.frame agrupado, iris_grouped, podemos responder várias outras perguntas: Quantas amostras por espécies existem nesse conjunto de dados? Utilizaremos a função n(), que pertence ao mesmo pacote dplyr, para contar o número de grupos. Vejamos: summarise(iris_grouped, n()) Species n() setosa 50 versicolor 50 virginica 50 Médias de comprimento de sépalas e pétalas summarise(iris_grouped, sepala_l_media = mean(Sepal.Length, na.rm = TRUE)) Species sepala_l_media setosa 5.006 versicolor 5.936 virginica 6.588 summarise(iris_grouped, petala_l_media = mean(Petal.Length, na.rm = TRUE)) Species petala_l_media setosa 1.462 versicolor 4.260 virginica 5.552 Todas as operações anteriores na mesma linha de comando: iris_sumario &lt;- summarise(iris_grouped, N = n(), sepala_l_media = mean(Sepal.Length, na.rm = TRUE), petala_l_media = mean(Petal.Length, na.rm = TRUE)) head(iris_sumario, 10) Species N sepala_l_media petala_l_media setosa 50 5.006 1.462 versicolor 50 5.936 4.260 virginica 50 6.588 5.552 O famoso conjunto de dados iris consiste de observações de comprimentos e larguras de sépalas e pétalas de 3 espécies de Iris, um gênero de plantas herbáceas da família Iridaceae. O conjunto de dados possui 150 linhas e 5 colunas. Para quem quiser saber mais sobre esses dados, leia aqui.↩︎ "],["o-operador-e-o-encadeamento-de-ações.html", "A.3 O operador %&gt;% e o encadeamento de ações", " A.3 O operador %&gt;% e o encadeamento de ações Notem que nada do que vimos até aqui parece ser muito relevante se comparamos com o que pode ser feito com o pacote base do R. Vejamos: # Queremos selecionar colunas? Operadores `$` e `[[` dao conta head( iris[, which(names(iris) == &quot;Species&quot;)], 10 ) ## [1] setosa setosa setosa setosa setosa setosa setosa setosa setosa setosa ## Levels: setosa versicolor virginica head( iris[, &quot;Sepal.Length&quot;], 10 ) ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 # Filtrar linhas? Vetores lógicos em conjunto com o operador `[[` em um data.frame resolvem o problema head( iris[iris$Species == &quot;virginica&quot; &amp; iris$Sepal.Length &gt; 7, ], 10 ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 103 7.1 3.0 5.9 2.1 virginica 106 7.6 3.0 6.6 2.1 virginica 108 7.3 2.9 6.3 1.8 virginica 110 7.2 3.6 6.1 2.5 virginica 118 7.7 3.8 6.7 2.2 virginica 119 7.7 2.6 6.9 2.3 virginica 123 7.7 2.8 6.7 2.0 virginica 126 7.2 3.2 6.0 1.8 virginica 130 7.2 3.0 5.8 1.6 virginica 131 7.4 2.8 6.1 1.9 virginica # Ou podemos filtrar também usando a função `subset`: head( subset(iris, Species == &quot;virginica&quot; &amp; iris$Sepal.Length &gt; 7), 10 ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 103 7.1 3.0 5.9 2.1 virginica 106 7.6 3.0 6.6 2.1 virginica 108 7.3 2.9 6.3 1.8 virginica 110 7.2 3.6 6.1 2.5 virginica 118 7.7 3.8 6.7 2.2 virginica 119 7.7 2.6 6.9 2.3 virginica 123 7.7 2.8 6.7 2.0 virginica 126 7.2 3.2 6.0 1.8 virginica 130 7.2 3.0 5.8 1.6 virginica 131 7.4 2.8 6.1 1.9 virginica # Criar novas colunas? Podemos atribuir novas colunas a qualquer data.frame existente usando o operador `$` para criar uma nova coluna qualquer iris_novo &lt;- iris iris_novo$razaopetsep &lt;- iris_novo$Petal.Length / iris_novo$Sepal.Length head( iris_novo, 10 ) Sepal.Length Sepal.Width Petal.Length Petal.Width Species razaopetsep 5.1 3.5 1.4 0.2 setosa 0.2745098 4.9 3.0 1.4 0.2 setosa 0.2857143 4.7 3.2 1.3 0.2 setosa 0.2765957 4.6 3.1 1.5 0.2 setosa 0.3260870 5.0 3.6 1.4 0.2 setosa 0.2800000 5.4 3.9 1.7 0.4 setosa 0.3148148 4.6 3.4 1.4 0.3 setosa 0.3043478 5.0 3.4 1.5 0.2 setosa 0.3000000 4.4 2.9 1.4 0.2 setosa 0.3181818 4.9 3.1 1.5 0.1 setosa 0.3061224 # Sumariar resultados - Aqui temos um pouco mais de trabalho, porem nada muito complexo iris_count &lt;- as.data.frame(table(iris$Species)) names(iris_count) &lt;- c(&quot;Species&quot;, &quot;N&quot;) iris_sumario2 &lt;- cbind(iris_count, sepala_c_media = tapply(iris$Sepal.Length, iris$Species, &quot;mean&quot;), sepala_l_media = tapply(iris$Sepal.Width, iris$Species, &quot;mean&quot;), petala_c_media = tapply(iris$Petal.Length, iris$Species, &quot;mean&quot;), petala_l_media = tapply(iris$Petal.Width, iris$Species, &quot;mean&quot;)) head( iris_sumario2, 10 ) # comparem o resultado do objeto `iris_sumario2` com os de `iris_sumario` criado com as funcoes do pacote `dplyr` Species N sepala_c_media sepala_l_media petala_c_media petala_l_media setosa setosa 50 5.006 3.428 1.462 0.246 versicolor versicolor 50 5.936 2.770 4.260 1.326 virginica virginica 50 6.588 2.974 5.552 2.026 O operador %&gt;% foi introduzido no R por meio do pacote magrittr, de autoria de Stefan Milton Bache, com o intuito de encadear ações na manipulação de data.frames e facilitar a leitura do código. Segundo palavras do próprio autor, o operador %&gt;% modifica semanticamente o código em R e o torna mais intuitivo tanto na escrita quanto na leitura. Será? Vamos tentar entender isso na prática. Vamos retomar os exemplos acima com a introdução do operador %&gt;% e usá-lo para efetuar dois conjuntos de comandos, expostos abaixo: A.3.1 Conjunto de comandos 1 # Chamar o data.frame `iris`, então... # Selecionar as colunas `Species`, `Petal.Length`, e `Sepal.Length`, então ... # Agrupar os dados em função de `Species`, então ... # Sumariar os dados para obter o número de observações por grupo, nomeando esta variável como `N`; obter o comprimento médio de pétalas, nomeando esta variável como `petala_l_media`, e o comprimento médio de sépalas, nomeando esta variável como `sepala_l_media`, então ... # Atribui o resultado dessa operação a um objeto chamado `res1` A.3.2 Conjunto de comandos 2 # Chamar o data.frame `iris`, então... # Selecionar as colunas `Species`, `Petal.Length`, e `Sepal.Length`, então ... # Filtrar os dados para conter apenas a espécie `virginica` e espécimes com comprimento de sépala maior que 7 cm, então ... # Criar uma nova coluna chamada `razaopetsep` que contenha a razão entre os comprimentos de pétala e sépala, então ... # Sumariar os dados para obter o número total de observações, nomeando esta variável como `N`; obter o comprimento médio de pétalas, nomeando esta variável como `petala_l_media`, o comprimento médio de sépalas, nomeando esta variável como `sepala_l_media`, e a média do índice da razão entre o comprimento de pétalas e o comprimento de sépalas, nomeando-a como `media_razaopetsep`, então ... # Atribui o resultado dessa operação a um objeto chamado `res2` Primeiramente, carreguemos o pacote magrittr: library(&quot;magrittr&quot;) Executando o conjunto de comandos 1, temos: # Chamar o data.frame `iris`, então... res1 &lt;- iris %&gt;% # Selecionar as colunas `Species`, `Petal.Length`, e `Sepal.Length`, então ... select(Species, Petal.Length, Sepal.Length) %&gt;% # Agrupar os dados em função de `Species`, então ... group_by(Species) %&gt;% # Sumariar os dados para obter o número de observações por grupo, nomeando esta variável como `N`; obter o comprimento médio de pétalas, nomeando esta variável como `petala_l_media`, e o comprimento médio de sépalas, nomeando esta variável como `sepala_l_media` summarise( N = n(), petala_l_media = mean(Petal.Length, na.rm = TRUE), sepala_l_media = mean(Sepal.Length, na.rm = TRUE) ) res1 Species N petala_l_media sepala_l_media setosa 50 1.462 5.006 versicolor 50 4.260 5.936 virginica 50 5.552 6.588 Fazendo o mesmo com o conjunto de comandos 2, temos: # Chamar o data.frame `iris`, então... res2 &lt;- iris %&gt;% # Selecionar as colunas `Species`, `Petal.Length`, e `Sepal.Length`, então ... select(Species, Petal.Length, Sepal.Length) %&gt;% # Filtrar os dados para conter apenas a espécie `virginica` e espécimes com comprimento de sépala maior que 7 cm, então ... filter(Species == &quot;virginica&quot; &amp; Sepal.Length &gt; 7) %&gt;% # Criar uma nova coluna chamada `razaopetsep` que contenha a razão entre os comprimentos de pétala e sépala, então ... mutate( razaopetsep = Petal.Length / Sepal.Length ) %&gt;% # Sumariar os dados para obter o número total de observações, nomeando esta variável como `N`; obter o comprimento médio de pétalas, nomeando esta variável como `petala_l_media`, o comprimento médio de sépalas, nomeando esta variável como `sepala_l_media`, e a média do índice da razão entre o comprimento de pétalas e o comprimento de sépalas, nomeando-a como `media_razaopetsep` summarise( N = n(), petala_l_media = mean(Petal.Length, na.rm = TRUE), sepala_l_media = mean(Sepal.Length, na.rm = TRUE) ) res2 N petala_l_media sepala_l_media 12 6.3 7.475 Notem que o código fica formatado da maneira que funciona nosso pensamento sobre as ações a serem executadas: pegamos os dados, efetuamos transformações, e agregamos os resultados, praticamente da mesma maneira que o código é executado. Como diz o autor na vinheta de introdução ao operador %&gt;%, é como uma receita, fácil de ler, fácil de seguir (It’s like a recipe – easy to read, easy to follow!). Em conformidade com este entendimento, sugere-se que leiamos o operador %&gt;% como ENTÃO, implicando em uma passagem do resultado da ação à esquerda para a função à direita. Por isso, eu fiz questão de incluir em ambos os conjuntos de comandos, 1 e 2, a palavra então... ao fim de cada sentença. Um ponto importante que deve ser levado em consideração é que o uso do operador %&gt;% permite que escondamos o data.frame de entrada nas funções. Vejamos na prática para entender. Suponha que nós queiramos selecionar apenas as colunas Species e Petal.Length de iris. Podemos executar isso de duas maneiras, todas com o mesmo resultado: # podemos representar iris de três maneiras utilizando o operador `%&gt;%` iris %&gt;% select(Species, Petal.Length) # como temos feito ate aqui iris %&gt;% select(., Species, Petal.Length) # explicitamos que `iris` esta dentro de select por meio do `.` Isso pode ficar mais fácil de entender com outro exemplo. Suponha que tenhamos o vetor meuvetor &lt;- c(1:20) e queiramos obter o somatório deste vetor. Podemos executar isso de três maneiras utilizando o operador %&gt;%: meuvetor &lt;- c(1:20) meuvetor %&gt;% sum(.) # representando o vetor na forma de um `.` meuvetor %&gt;% sum() # deixando a funcao vazia meuvetor %&gt;% sum() # sem parenteses e sem o `.`. O que????? Todas as maneiras acima executam e geram o mesmo resultado, 210. Essa multiplicidade de maneiras de expor o data.frame (ou o vetor no exemplo acima) é alvo de críticas por parte de alguns estudiosos, devido ao pacote magrittr não exigir que o argumento seja explícito quando usamos o operador %&gt;% (vejam uma boa argumentação nesta postagem de John Mount). Vale ressaltar que poderíamos muito bem encadear todas as ações executadas acima sem o operador %&gt;%, porém perderíamos a chance de ler o código da esquerda para a direita, oportunidade ofertada pelo uso do operador. Vejamos, usando o conjunto de comandos 2: summarise( mutate( filter( select(iris, Species, Petal.Length, Sepal.Length), Species == &quot;virginica&quot; &amp; Sepal.Length &gt; 7 ), razaopetsep = Petal.Length / Sepal.Length ), N = n(), petala_l_media = mean(Petal.Length, na.rm = TRUE), sepala_l_media = mean(Sepal.Length, na.rm = TRUE) ) Reparem que o código fica mais difícil de ser lido, pois temos de identificar primeiro quem é o data.frame que serve de entrada para a função summarise. Depois, há outros desafios, como entender o que cada função faz, e em qual ordem. Por fim, o código é lido de dentro para fora, um sentido nada intuitivo. Foi pensando em tornar a leitura do código mais fácil que o autor decidiu criar este operador na linguagem R, uma vez que essa lógica já é extensivamente utilizada em algumas outras linguagens de programação, como F# (representada como |&gt; e o bash (e similares) (representada como |). A.3.3 Resumo do operador %&gt;%: transforma a leitura do código da esquerda para a direita; evita a criação de muitos objetos intermediários na sessão de trabalho; facilita a leitura do código, pois transforma a própria escrita em uma receita. "],["usando-o-ggplot2.html", "A.4 Usando o ggplot2", " A.4 Usando o ggplot2 O pacote ggplot2 funciona de maneira diferente da função plot() do pacote base do R, pois trabalha em camadas. Similarmente ao pacote dplyr, começamos com o data.frame que desejamos plotar, contudo, passos posteriores são bem diferentes, e se assemelham mais ao uso do operador %&gt;% do pacote magrittr. No ggplot2, utilizamos o operador + para adicionar as camadas. Tabela A.2: Principais funções do pacote R ggplot2. Função O que faz ggplot() Recebe os dados a serem plotados geom_point() Plota um gráfico de barra geom_boxplot() Plota um diagrama de caixa aes() Estética do gráfico xlab() Modifica o texto do eixo X ylab() Modifica o texto do eixo Y ggtitle() Adiciona o título do gráfico facet_wrap() Divide os gráficos segundo categoria especificada As principais funções do pacote estão exemplificadas na tabela A.2. A função básica do pacote é ggplot(): nela, informamos nosso conjunto de dados no primeiro argumento. Após o primeiro passo, fazemos uso de funções para plotar dados em forma de um espalhamento (scatterplots usando a função geom_point()), gráficos de barra (geom_bar), diagramas de caixa (geom_boxplot()), entre outras. Vejamos na prática como funciona: # um grafico de espalhamento da variavel Sepal.Length no eixo X e Petal.Length no eixo Y utilizando o conjunto de dados iris ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length)) Dentro das funções que plotam os dados efetivamente (e.g., geom_point(), geom_boxplot()), devemos sempre usar a função aes(): nela inserimos os eixos x e y, informando sempre o nome das colunas sem aspas. Se quisermos colorir os pontos em função das espécies, fazemos: ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species)) Por trabalhar em camadas, podemos atribuir os resultados dessas operações a objetos. Por exemplo, vamos passar o resultado da ação acima para um objeto meugrafico e mudar os temas do gráfico: meugrafico &lt;- ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species)) meugrafico + theme_bw() # Existem varios outros temas pre-definidos no ggplot2 meugrafico + theme_minimal() # Para utilizar os outros temas, e so verificar o help de funcoes que comecam com theme_OUTROSnomes meugrafico + theme_void() # - existem, por exemplo, os temas theme_grey, theme_classic, theme_light etc Podemos facilmente também gerar um gráfico para cada espécie utilizando a função facet_wrap(): meugrafico + facet_wrap(~Species) Não temos a intenção de cobrir todo o uso do pacote ggplot2 nesta postagem. Existem muitas páginas com excelentes tutoriais na internet que podem ser visitadas para um maior aprofundamento nas ferramentas deste pacote (vejam abaixo na seção Para saber mais). Queremos aqui demonstrar o uso concomitante do pacote ggplot2 dentro de uma linha de trabalho associada ao pacote dplyr. Passemos para a seção abaixo. "],["dplyr-e-ggplot2-em-conjunto.html", "A.5 dplyr e ggplot2 em conjunto", " A.5 dplyr e ggplot2 em conjunto Durante uma análise exploratória de dados, muitas perguntas surgem com a análise de gráficos simples, que podemos criar com poucas linhas de comando. Com os comandos ensinados nos passos anteriores, e novamente utilizando o conjunto de dados iris, vamos fazer uma exploração muito breve nesses dados. A.5.1 Gráfico de espalhamento iris %&gt;% select(Species, Sepal.Width, Sepal.Length) %&gt;% ggplot(.) + # lembrem-se que o data.frame com colunas selecionadas acima aqui e representado por um `.` geom_point(aes(x = Sepal.Width, y = Sepal.Length, color = Species)) + xlab(&quot;Largura de sépala (cm)&quot;) + ylab(&quot;Comprimento de sépala (cm)&quot;) A.5.2 Diagrama de caixas iris %&gt;% select(Species, Sepal.Length) %&gt;% ggplot(.) + geom_boxplot(aes(x = Species, y = Sepal.Length, fill = Species)) + xlab(&quot;Espécies de Iris&quot;) + ylab(&quot;Comprimento de sépala (cm)&quot;) A.5.3 Histograma iris %&gt;% select(Species, Sepal.Width) %&gt;% ggplot(.) + geom_histogram(aes(x = Sepal.Width, fill = Species)) + xlab(&quot;Largura de sépala (cm)&quot;) + ylab(&quot;Frequência&quot;) + facet_wrap(~Species) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],["baser.html", "A.6 Comparando o mesmo conjunto de ações entre base R e dplyr", " A.6 Comparando o mesmo conjunto de ações entre base R e dplyr Abaixo, para efeitos de comparação, executamos as mesmas ações usando os pacotes base e dplyr; ao utilizar o dplyr, também fizemos uso do operador %&gt;%. # para avaliar os objetos criados no ambiente de trabalho, vamos apagar tudo da area de trabalho e comecar do zero rm(list = ls()) # filtra os dados em iris ## quem tem sepala menor que 6 cm e tem petala maior que 5 cm? iris2 &lt;- subset(iris, Sepal.Length &lt; 6 &amp; Petal.Length &lt; 5) head(iris2, 10) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa # checa as dimensoes do novo objeto dim(iris2) ## [1] 78 5 # ordena os dados segundo comprimento da petala iris_ord &lt;- iris2[order(iris2$Petal.Length), ] head(iris_ord, 10) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 23 4.6 3.6 1.0 0.2 setosa 14 4.3 3.0 1.1 0.1 setosa 15 5.8 4.0 1.2 0.2 setosa 36 5.0 3.2 1.2 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 17 5.4 3.9 1.3 0.4 setosa 37 5.5 3.5 1.3 0.2 setosa 39 4.4 3.0 1.3 0.2 setosa 41 5.0 3.5 1.3 0.3 setosa 42 4.5 2.3 1.3 0.3 setosa # muda a ordem das colunas, colocando a coluna Species primeiro colsp &lt;- which(colnames(iris_ord) == &quot;Species&quot;) # qual a posicao da coluna Species? irisf &lt;- iris_ord[, c(colsp, (which(!(1:ncol(iris_ord)) %in% colsp)))] # cria uma nova coluna de razao entre comprimento da sepala e comprimento da petala irisf$razao_sepall_petall &lt;- irisf$Sepal.Length / irisf$Petal.Length head(irisf, 10) Species Sepal.Length Sepal.Width Petal.Length Petal.Width razao_sepall_petall 23 setosa 4.6 3.6 1.0 0.2 4.600000 14 setosa 4.3 3.0 1.1 0.1 3.909091 15 setosa 5.8 4.0 1.2 0.2 4.833333 36 setosa 5.0 3.2 1.2 0.2 4.166667 3 setosa 4.7 3.2 1.3 0.2 3.615385 17 setosa 5.4 3.9 1.3 0.4 4.153846 37 setosa 5.5 3.5 1.3 0.2 4.230769 39 setosa 4.4 3.0 1.3 0.2 3.384615 41 setosa 5.0 3.5 1.3 0.3 3.846154 42 setosa 4.5 2.3 1.3 0.3 3.461539 # faz um sumario estatisco agrupando as especies e checando min, max, desvio, media e mediana de cada variavel mean_pl &lt;- aggregate(irisf$Petal.Length, list(Species = irisf$Species), FUN = &quot;mean&quot;) mean_raz &lt;- aggregate(irisf$razao_sepall_petall, list(Species = irisf$Species), FUN = &quot;mean&quot;) sd_pl &lt;- aggregate(irisf$Petal.Length, list(Species = irisf$Species), FUN = &quot;sd&quot;) sd_raz &lt;- aggregate(irisf$razao_sepall_petall, list(Species = irisf$Species), FUN = &quot;sd&quot;) res &lt;- as.data.frame(mean_pl) res2 &lt;- cbind(res, media_razao = mean_raz[, -1], desvio_pl = sd_pl[, -1], desvio_raz = sd_raz[, -1]) names(res2)[2] &lt;- &quot;media_pl&quot; res2 Species media_pl media_razao desvio_pl desvio_raz setosa 1.462000 3.464906 0.1736640 0.4302168 versicolor 3.969231 1.404475 0.4249887 0.1195457 virginica 4.700000 1.115873 0.2828427 0.0381613 # plota grafico de pontos com eixo X correspondendo ao comprimento da sepala, e eixo Y ao comprimento da petala plot(irisf$Sepal.Length, irisf$Petal.Length, col = irisf$Species) # para avaliar os objetos criados no ambiente de trabalho, vamos apagar tudo da area de trabalho e comecar do zero rm(list = ls()) # chama os pacotes tidyverse library(&quot;dplyr&quot;) # o pacote para manipular dados library(&quot;ggplot2&quot;) # o pacote para plotar graficos # utilizando a filosofia tidyverse, utilizarei o pipe (&quot; %&gt;% &quot;) iris2t &lt;- # salvamos o objeto como `iris2t` para diferenciar do salvo acima iris %&gt;% # chama os dados e passa para a funcao abaixo filter(Sepal.Length &lt; 6 &amp; Petal.Length &lt; 5) %&gt;% # quem tem sepala menor que 6 cm E petala maior que 5 cm? arrange(Petal.Length) %&gt;% mutate(razao_sepall_petall = Sepal.Length / Petal.Length) %&gt;% select(Species, everything()) # reordena as colunas head(iris2t, 10) Species Sepal.Length Sepal.Width Petal.Length Petal.Width razao_sepall_petall setosa 4.6 3.6 1.0 0.2 4.600000 setosa 4.3 3.0 1.1 0.1 3.909091 setosa 5.8 4.0 1.2 0.2 4.833333 setosa 5.0 3.2 1.2 0.2 4.166667 setosa 4.7 3.2 1.3 0.2 3.615385 setosa 5.4 3.9 1.3 0.4 4.153846 setosa 5.5 3.5 1.3 0.2 4.230769 setosa 4.4 3.0 1.3 0.2 3.384615 setosa 5.0 3.5 1.3 0.3 3.846154 setosa 4.5 2.3 1.3 0.3 3.461539 # faz um sumario estatisco agrupando as especies e checando min, max, desvio, media e mediana de cada variavel res_t &lt;- iris2t %&gt;% group_by(Species) %&gt;% # agrupa dados pela coluna Species summarise( # sumarisa dados de acordo com os grupo estabelecidos acima mean_pl = mean(Petal.Length), # media da coluna comp de petala mean_raz = mean(razao_sepall_petall), # media da coluna razao de comp de sepala/petala sd_pl = sd(Petal.Length), # desvio do comp da petala sd_raz = sd(razao_sepall_petall) ) # desvio do comp da sepala head(res_t, 10) Species mean_pl mean_raz sd_pl sd_raz setosa 1.462000 3.464906 0.1736640 0.4302168 versicolor 3.969231 1.404475 0.4249887 0.1195457 virginica 4.700000 1.115873 0.2828427 0.0381613 # plota grafico de pontos com eixo X correspondendo ao comprimento da sepala, e eixo Y ao comprimento da petala tgraf &lt;- ggplot(data = iris2t) + geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species)) tgraf Vejam que os resultados são iguais, com exceção da estética diferente proporcionada pelo pacote ggplot2. Porém, há uma mudança notável em como a manipulação dos dados é feita quando utilizamos o operador %&gt;% dentro do fluxo de trabalho, como resumido acima: a leitura é feita da esquerda para a direita, podemos reduzir a criação de objetos intermediários na área de trabalho, e o código pode ser lido com mais clareza. Postagens futuras abordarão com mais detalhes outros usos deste operador e de alguns outros inclusos no mesmo pacote, porém com funções levemente diferentes. A.6.1 E o uso do operador %&gt;% com o pacote base? Apesar de termos explorado até aqui o uso do operador %&gt;% apenas com o pacote dplyr, ele pode ser utilizado com qualquer função no R. Vamos retormar o exemplo da seção acima com comandos do pacote base do R, porém adicionando o operador %&gt;% na manipulação dos dados: iris_ord &lt;- iris %&gt;% subset(Sepal.Length &lt; 6 &amp; Petal.Length &lt; 5) %&gt;% # filtramos os dados com a funcao subset() .[order(.$Petal.Length), ] # usamos o `.` para representar o data.frame filtrado no passo anterior colsp &lt;- which(colnames(iris_ord) == &quot;Species&quot;) irisf &lt;- iris_ord[, c(colsp, (which(!(1:ncol(iris_ord)) %in% colsp)))] irisf$razao_sepall_petall &lt;- irisf$Sepal.Length / irisf$Petal.Length head(irisf, 10) Species Sepal.Length Sepal.Width Petal.Length Petal.Width razao_sepall_petall 23 setosa 4.6 3.6 1.0 0.2 4.600000 14 setosa 4.3 3.0 1.1 0.1 3.909091 15 setosa 5.8 4.0 1.2 0.2 4.833333 36 setosa 5.0 3.2 1.2 0.2 4.166667 3 setosa 4.7 3.2 1.3 0.2 3.615385 17 setosa 5.4 3.9 1.3 0.4 4.153846 37 setosa 5.5 3.5 1.3 0.2 4.230769 39 setosa 4.4 3.0 1.3 0.2 3.384615 41 setosa 5.0 3.5 1.3 0.3 3.846154 42 setosa 4.5 2.3 1.3 0.3 3.461539 mean_pl &lt;- aggregate(irisf$Petal.Length, list(Species = irisf$Species), FUN = &quot;mean&quot;) mean_raz &lt;- aggregate(irisf$razao_sepall_petall, list(Species = irisf$Species), FUN = &quot;mean&quot;) sd_pl &lt;- aggregate(irisf$Petal.Length, list(Species = irisf$Species), FUN = &quot;sd&quot;) sd_raz &lt;- aggregate(irisf$razao_sepall_petall, list(Species = irisf$Species), FUN = &quot;sd&quot;) res &lt;- as.data.frame(mean_pl) res2 &lt;- cbind(res, media_razao = mean_raz[, -1], desvio_pl = sd_pl[, -1], desvio_raz = sd_raz[, -1]) names(res2)[2] &lt;- &quot;media_pl&quot; res2 Species media_pl media_razao desvio_pl desvio_raz setosa 1.462000 3.464906 0.1736640 0.4302168 versicolor 3.969231 1.404475 0.4249887 0.1195457 virginica 4.700000 1.115873 0.2828427 0.0381613 Reparem que, mesmo utilizando o operador %&gt;%, algumas transformações realizadas com poucas linhas de código com o pacote dplyr em uma cadeia de comandos (o chamado pipeline em inglês) não são possíveis com o uso do pacote base do R, notadamente a criação de colunas, o rearranjo de colunas, e o sumário de dados. "],["tidyverse-um-resumo.html", "A.7 Tidyverse, um resumo", " A.7 Tidyverse, um resumo David Robinson, autor do pacote broom, um dos membros do tidyverse, explica em sua postagem Teach the tidyverse to beginners que sua preferência por ensinar as ferramentas dos pacotes pertencentes ao tidyverse primeiramente a seus alunos se deve à compatibilidade da filosofia de ensino deste universo com o que ele acredita que seja ideal em uma filosofia de ensino: deve haver uma, preferencialmente apenas uma, maneira óbvia de se fazer, mote emprestado do guia de 19 princípios da linguagem de programação Python, conhecido como Zen of Python. Essa filosofia se contrapõe, por exemplo, ao mote da linguagem Perl, que é Há sempre mais de uma maneira de se fazer (nota pessoal: Isso pode ser observado na linguagem R, são sempre múltiplos os caminhos para se chegar a um resultado). O mesmo autor também afirma nesta postagem que talvez um fluxo de trabalho comum aos alunos de cursos de ciência de dados seja: trabalhar com dados interessantes e reais; Criar gráficos informativos e atrativos; Chegar a conclusões úteis. Finalizando, ele conclui dizendo que o tidyverse oferece ferramentas a seus usuários que tornam esse caminho mais suave. O uso do %&gt;% oferece outros aspectos a serem considerados no uso dessas ferramentas: Cada passo do operador resolve um problema; Cada passo ensina uma função; Acelera o uso da linguagem para análise exploratória de dados. Nem tudo são flores em nenhum dos pontos abordados acima. Há muita controvérsia sobre o caminho a ser tomado em aulas da linguagem R nos dias atuais, que passam pela pergunta: ensinar primeiro o pacote base do R e suas funcionalidades básicas, ou começar pelas ferramentas do tidyverse (ver mais na seção Para saber mais. Não vamos entrar nesse embate nesta postagem. O que podemos afirmar é que qualquer pacote de R, com exceção do pacote base, foi construído em cima das funcionalidades deste último, logo, sem este pacote, não estaríamos nem aqui falando de funcionalidades do dplyr e afins. Quisemos aqui apresentar funcionalidades básicas de alguns pacotes que podem ser adotadas ou não pelos alunos, e mostrar como podem ser incorporadas no fluxo diário das manipulações de dados. Caso queiram ver manipulações mais complexas em tabelas utilizando as ferramentas do tidyverse, convido-os a checarem estas duas postagens: importando e manipulando dados no R, e um tutorial para gerar o mapa de distribuição de Macrolobium aracaense Farroñay. "],["sabermais-tidyverse.html", "A.8 Para saber mais:", " A.8 Para saber mais: As postagens abaixo variam entre posições favoráveis ou desfavoráveis ao Tidyverse. Abrangem desde opiniões pessoais sobre o porquê de não ensinar essas ferramentas aos iniciantes na linguagem a questões de performance computacional desse universo quando comparado com o base R. Leiam e tirem suas próprias conclusões. A Thousand Gadgets: My Thoughts on the R Tidyverse - Opinião pessoal do autor da postagem sobre o porquê de ele não simpatizar nem utilizar nenhuma ferramenta do tidyverse. Tidyverse - Página principal deste universo de pacotes; R for Data Science - Livro disponível gratuitamente na internet, escrito por Garrett Grolemund e Hadley Wickham, este criador e mente criativa por muitos dos pacotes deste universo What is the tidyverse - Postagem introdutória sobre o tidyverse e algumas de suas funcionalidades. Why I don’t use the tidyverse - opinião pessoal do autor sobre o porquê do mesmo não utilizar nenhum pacote do tidyverse. Don’t teach built-in plotting to beginners (teach ggplot2) - postagem do autor do pacote broom, David Robinson, sobre o porquê de ele ensinar seus alunos a manipularem primeiro o ggplot2 em detrimento das funções gráficas do pacote base do R. Teach the tidyverse to beginners - postagem de David Robinson sobre sua opinião pessoal de se ensinar primeiro o tidyverse aos alunos de cursos de introdução ao R. Introducing magrittr - Vinheta de introdução às funcionalidades do operador %&gt;% "],["unzip.html", "B Baixar e descomprimir um arquivo", " B Baixar e descomprimir um arquivo Caso você queira baixar e descomprimir um arquivo .zip no próprio R, ao invés de baixá-lo manualmente, siga os comandos abaixo. Utilizaremos um arquivo utilizado na seção 4.2. # grava o endereco do arquivo em um objeto arq_zip_url &lt;- &quot;https://github.com/LABOTAM/IntroR/blob/main/dados/municipiosshape.zip&quot; # cria um diretorio temporario dirtemp &lt;- tempdir() # cria um arquivo temporario para arquivar esse zip arq_temp &lt;- tempfile(tmpdir = dirtemp, fileext = &quot;.zip&quot;) # baixa o arquivo para dentro do arquivo temporario download.file(arq_zip_url, arq_temp) # Apos executar o comando acima, o arquivo `.zip` e baixado para o objeto `arq_temp` # agora utilizaremos a funcao `unzip()` para descomprimir o arquivo # pega o nome do primeiro arquivo dentro do zip == corresponde ao nome da pasta fname &lt;- unzip(arq_temp, list = TRUE)$Name[1] nomes_arqs &lt;- unzip(arq_temp, list = TRUE) class(nomes_arqs) # e um dataframe; a primeira coluna mostra o caminho de cada arquivo presente no zip; segunda coluna, o tamanho do arquivo str(nomes_arqs) nomes_arqs # Descomprime o arquivo zip para a pasta temporaria unzip(arq_temp, files = nome_pasta, exdir = dirtemp, overwrite = TRUE) # caminho completo do arquivo extraido caminho_completo &lt;- file.path(dirtemp, nome_pasta) caminho_completo # lista arquivos dentro do caminho contido em caminho_completo list.files(paste0(caminho_completo, &quot;/.&quot;), all.files = TRUE) "],["videos.html", "C Aulas em vídeo", " C Aulas em vídeo Gravamos vídeoaulas para a maior parte do material aqui ofertado. Elas estão agrupadas abaixo para facilitar a visualização e o entendimento dos tópicos abordados. "],["importando-e-exportando-dados.html", "C.1 Importando e exportando dados", " C.1 Importando e exportando dados "],["criação-de-vetores-1.html", "C.2 Criação de vetores", " C.2 Criação de vetores "],["classes-de-vetores-e-fatores.html", "C.3 Classes de vetores e fatores", " C.3 Classes de vetores e fatores "],["sequências-numéricas-e-repetições-operações-e-funções-com-vetores.html", "C.4 Sequências numéricas e repetições, operações e funções com vetores", " C.4 Sequências numéricas e repetições, operações e funções com vetores "],["listas-1.html", "C.5 Listas", " C.5 Listas "],["criando-matrizes-1.html", "C.6 Criando matrizes", " C.6 Criando matrizes "],["criando-dataframes-e-operações-importantes-em-matrizes-e-dataframes.html", "C.7 Criando dataframes, e operações importantes em matrizes e dataframes", " C.7 Criando dataframes, e operações importantes em matrizes e dataframes "],["indexação-de-matrizes-e-dataframes.html", "C.8 Indexação de matrizes e dataframes", " C.8 Indexação de matrizes e dataframes "],["condicionais-1.html", "C.9 Condicionais", " C.9 Condicionais "],["funções-da-família-apply.html", "C.10 Funções da família apply(\")", " C.10 Funções da família apply(\") "],["funções-de-manipulação-de-pasta-e-arquivos.html", "C.11 Funções de manipulação de pasta e arquivos", " C.11 Funções de manipulação de pasta e arquivos "],["funções-de-manipulação-de-texto---parte-01.html", "C.12 Funções de manipulação de texto - parte 01", " C.12 Funções de manipulação de texto - parte 01 "],["funções-de-manipulação-de-texto---parte-02.html", "C.13 Funções de manipulação de texto - parte 02", " C.13 Funções de manipulação de texto - parte 02 "],["objetos-complexos.html", "C.14 Objetos complexos", " C.14 Objetos complexos "],["chernoff.html", "D Caras de Chernoff", " D Caras de Chernoff #as carinhas de Chernoff são geradas pelo pacote TeachingDemos library(&quot;TeachingDemos&quot;) #uma matriz com variaveis pessoas = paste(&quot;pessoa&quot;,1:10,sep=&quot;-&quot;) altura = rnorm(10,mean=1.7,sd=0.2) dedao = rnorm(10,mean=0.05,sd=0.002) mm = data.frame(altura,dedao) rownames(mm) = pessoas faces(mm) "],["referências.html", "Referências", " Referências "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
